[{"C:\\Users\\gonza\\finance-app\\src\\UserContext.js":"1","C:\\Users\\gonza\\finance-app\\src\\portfolio\\logicPruebasConAdd.js":"2","C:\\Users\\gonza\\finance-app\\src\\Personas\\UserItem.tsx":"3","C:\\Users\\gonza\\finance-app\\src\\components\\components\\CustomCircularProgress.js":"4","C:\\Users\\gonza\\finance-app\\src\\components\\subNavigations\\CompanyNav.js":"5","C:\\Users\\gonza\\finance-app\\src\\portfolio\\StockShop.js":"6","C:\\Users\\gonza\\finance-app\\src\\views\\indexes\\Nasdaq.js":"7","C:\\Users\\gonza\\finance-app\\src\\views\\company\\KeyMetrics.js":"8","C:\\Users\\gonza\\finance-app\\src\\dashboard\\AssetStructure.js":"9","C:\\Users\\gonza\\finance-app\\src\\charts\\linechart.js":"10","C:\\Users\\gonza\\finance-app\\src\\components\\TransitionComponent.js":"11","C:\\Users\\gonza\\finance-app\\src\\Auth\\Register.js":"12","C:\\Users\\gonza\\finance-app\\src\\Auth\\useIAuth.js":"13","C:\\Users\\gonza\\finance-app\\src\\dashboard\\Middleware2.js":"14","C:\\Users\\gonza\\finance-app\\src\\App.js":"15","C:\\Users\\gonza\\finance-app\\src\\components\\Navbar.js":"16","C:\\Users\\gonza\\finance-app\\src\\portfolio\\portfolioGenerator2.js":"17","C:\\Users\\gonza\\finance-app\\src\\index.js":"18","C:\\Users\\gonza\\finance-app\\src\\useTemporaryPossesions.js":"19","C:\\Users\\gonza\\finance-app\\src\\useAuth.js":"20","C:\\Users\\gonza\\finance-app\\src\\SignIn2.js":"21","C:\\Users\\gonza\\finance-app\\src\\SignIn.js":"22","C:\\Users\\gonza\\finance-app\\src\\RegistrationForm.js":"23","C:\\Users\\gonza\\finance-app\\src\\components\\Overlay.js":"24","C:\\Users\\gonza\\finance-app\\src\\charts\\KeymetricsChart.js":"25","C:\\Users\\gonza\\finance-app\\src\\Auth\\ProtectedRoute.js":"26","C:\\Users\\gonza\\finance-app\\src\\views\\indexes\\IndexesController.js":"27","C:\\Users\\gonza\\finance-app\\src\\views\\seguidores\\PopulateOnScroll.js":"28","C:\\Users\\gonza\\finance-app\\src\\SignInForm.js":"29","C:\\Users\\gonza\\finance-app\\src\\utils\\useViewport.js":"30","C:\\Users\\gonza\\finance-app\\src\\portfolio\\PortfolioPriceChart.js":"31","C:\\Users\\gonza\\finance-app\\src\\dashboard\\Marcador.js":"32","C:\\Users\\gonza\\finance-app\\src\\components\\Searcher2.js":"33","C:\\Users\\gonza\\finance-app\\src\\views\\seguidores\\Post.js":"34","C:\\Users\\gonza\\finance-app\\src\\charts\\DonutChart.js":"35","C:\\Users\\gonza\\finance-app\\src\\utils\\Pipes.js":"36","C:\\Users\\gonza\\finance-app\\src\\charts\\indexesChart2.js":"37","C:\\Users\\gonza\\finance-app\\src\\utils\\useFatch.js":"38","C:\\Users\\gonza\\finance-app\\src\\components\\NewsItem.js":"39","C:\\Users\\gonza\\finance-app\\src\\views\\company\\Rows.js":"40","C:\\Users\\gonza\\finance-app\\src\\views\\seguidores\\FollowingDispatcher.js":"41","C:\\Users\\gonza\\finance-app\\src\\Auth\\Login.js":"42","C:\\Users\\gonza\\finance-app\\src\\Context.js":"43","C:\\Users\\gonza\\finance-app\\src\\portfolio\\Engine.js":"44","C:\\Users\\gonza\\finance-app\\src\\dashboard\\PerformanceStructure.js":"45","C:\\Users\\gonza\\finance-app\\src\\dashboard\\PerformanceStructureB.js":"46","C:\\Users\\gonza\\finance-app\\src\\dashboard\\Positions.js":"47","C:\\Users\\gonza\\finance-app\\src\\Auth\\ContactDetails.js":"48","C:\\Users\\gonza\\finance-app\\src\\serviceWorker.ts":"49","C:\\Users\\gonza\\finance-app\\src\\dashboard\\UserMain.js":"50","C:\\Users\\gonza\\finance-app\\src\\utils\\financeCalculations.js":"51","C:\\Users\\gonza\\finance-app\\src\\views\\principal\\elements\\News.js":"52","C:\\Users\\gonza\\finance-app\\src\\dashboard\\LateralSection.js":"53","C:\\Users\\gonza\\finance-app\\src\\views\\principal\\elements\\TickerBar2.js":"54","C:\\Users\\gonza\\finance-app\\src\\views\\company\\CompanyChart.js":"55","C:\\Users\\gonza\\finance-app\\src\\views\\indexes\\Constituents.js":"56","C:\\Users\\gonza\\finance-app\\src\\views\\principal\\principal.js":"57","C:\\Users\\gonza\\finance-app\\src\\Personas\\PeopleRouter.tsx":"58","C:\\Users\\gonza\\finance-app\\src\\views\\company\\FinancialStatements\\IncomeStatement.js":"59","C:\\Users\\gonza\\finance-app\\src\\views\\seguidores\\Likes.tsx":"60","C:\\Users\\gonza\\finance-app\\src\\views\\company\\DetailsSquare.js":"61","C:\\Users\\gonza\\finance-app\\src\\views\\principal\\elements\\Sectors.js":"62","C:\\Users\\gonza\\finance-app\\src\\components\\Cell.js":"63","C:\\Users\\gonza\\finance-app\\src\\portfolio\\useCompaniesChange.js":"64","C:\\Users\\gonza\\finance-app\\src\\components\\Sidebar.js":"65","C:\\Users\\gonza\\finance-app\\src\\views\\company\\ControllerCompany.js":"66","C:\\Users\\gonza\\finance-app\\src\\utils\\useMesure.js":"67","C:\\Users\\gonza\\finance-app\\src\\components\\Multioption.js":"68","C:\\Users\\gonza\\finance-app\\src\\utils\\useMountApproval.js":"69","C:\\Users\\gonza\\finance-app\\src\\views\\company\\FinancialOptions.js":"70","C:\\Users\\gonza\\finance-app\\src\\views\\company\\PeersSquare.js":"71","C:\\Users\\gonza\\finance-app\\src\\views\\covid\\Sliders.js":"72","C:\\Users\\gonza\\finance-app\\src\\components\\Searcher.js":"73","C:\\Users\\gonza\\finance-app\\src\\utils\\numFormatter.js":"74","C:\\Users\\gonza\\finance-app\\src\\dashboard\\Marcador2.js":"75","C:\\Users\\gonza\\finance-app\\src\\views\\indexes\\SP500.js":"76","C:\\Users\\gonza\\finance-app\\src\\views\\seguidores\\TextEditor.js":"77","C:\\Users\\gonza\\finance-app\\src\\dashboard\\SearcherPositions.js":"78","C:\\Users\\gonza\\finance-app\\src\\views\\principal\\elements\\GainersCarousel.js":"79","C:\\Users\\gonza\\finance-app\\src\\charts\\StackedColumn.js":"80","C:\\Users\\gonza\\finance-app\\src\\views\\covid\\CovidSection2.js":"81","C:\\Users\\gonza\\finance-app\\src\\utils\\useDebounce.js":"82","C:\\Users\\gonza\\finance-app\\src\\views\\indexes\\IndexesGeneral.js":"83","C:\\Users\\gonza\\finance-app\\src\\utils\\useChartReflow.js":"84","C:\\Users\\gonza\\finance-app\\src\\views\\company\\PeerCarousel.js":"85","C:\\Users\\gonza\\finance-app\\src\\views\\principal\\elements\\Indices.js":"86","C:\\Users\\gonza\\finance-app\\src\\Personas\\PersonasList.tsx":"87","C:\\Users\\gonza\\finance-app\\src\\components\\Searcher4.js":"88","C:\\Users\\gonza\\finance-app\\src\\portfolio\\CurrentPriceRP.js":"89","C:\\Users\\gonza\\finance-app\\src\\charts\\GeneralIndexDispatcher.js":"90","C:\\Users\\gonza\\finance-app\\src\\utils\\datesUtils.js":"91","C:\\Users\\gonza\\finance-app\\src\\views\\company\\CompanySection.js":"92","C:\\Users\\gonza\\finance-app\\src\\dashboard\\StockDispatcher.js":"93","C:\\Users\\gonza\\finance-app\\src\\views\\indexes\\BigIndex.js":"94","C:\\Users\\gonza\\finance-app\\src\\portfolio\\PurchaseDialog.js":"95","C:\\Users\\gonza\\finance-app\\src\\views\\company\\Financials.js":"96","C:\\Users\\gonza\\finance-app\\src\\charts\\CustomAreaChart.js":"97","C:\\Users\\gonza\\finance-app\\src\\charts\\IndexesChart.js":"98","C:\\Users\\gonza\\finance-app\\src\\charts\\MiniatureChartIndex.js":"99"},{"size":1483,"mtime":1613995380467,"results":"100","hashOfConfig":"101"},{"size":28997,"mtime":1614429754894,"results":"102","hashOfConfig":"101"},{"size":1294,"mtime":1613663688226,"results":"103","hashOfConfig":"101"},{"size":1618,"mtime":1610291129685,"results":"104","hashOfConfig":"101"},{"size":4609,"mtime":1614015075409,"results":"105","hashOfConfig":"101"},{"size":6590,"mtime":1614279074565,"results":"106","hashOfConfig":"101"},{"size":156,"mtime":1605711412858,"results":"107","hashOfConfig":"101"},{"size":2334,"mtime":1608561129906,"results":"108","hashOfConfig":"101"},{"size":2319,"mtime":1613663688238,"results":"109","hashOfConfig":"101"},{"size":2531,"mtime":1606594527518,"results":"110","hashOfConfig":"101"},{"size":1989,"mtime":1607005895516,"results":"111","hashOfConfig":"101"},{"size":5717,"mtime":1614097731368,"results":"112","hashOfConfig":"101"},{"size":3795,"mtime":1613993234800,"results":"113","hashOfConfig":"101"},{"size":2458,"mtime":1614429638765,"results":"114","hashOfConfig":"101"},{"size":9685,"mtime":1614432044009,"results":"115","hashOfConfig":"101"},{"size":4572,"mtime":1613995520837,"results":"116","hashOfConfig":"101"},{"size":15226,"mtime":1614436258392,"results":"117","hashOfConfig":"101"},{"size":1040,"mtime":1608322106668,"results":"118","hashOfConfig":"101"},{"size":1562,"mtime":1608225605796,"results":"119","hashOfConfig":"101"},{"size":819,"mtime":1613917552080,"results":"120","hashOfConfig":"101"},{"size":5522,"mtime":1610907455690,"results":"121","hashOfConfig":"101"},{"size":455,"mtime":1608059587651,"results":"122","hashOfConfig":"101"},{"size":4124,"mtime":1613663688229,"results":"123","hashOfConfig":"101"},{"size":1018,"mtime":1613663688232,"results":"124","hashOfConfig":"101"},{"size":4724,"mtime":1611333256765,"results":"125","hashOfConfig":"101"},{"size":668,"mtime":1613663688204,"results":"126","hashOfConfig":"101"},{"size":628,"mtime":1605723505412,"results":"127","hashOfConfig":"101"},{"size":1672,"mtime":1613917552085,"results":"128","hashOfConfig":"101"},{"size":1868,"mtime":1608404101490,"results":"129","hashOfConfig":"101"},{"size":463,"mtime":1606078800550,"results":"130","hashOfConfig":"101"},{"size":4366,"mtime":1614430720907,"results":"131","hashOfConfig":"101"},{"size":637,"mtime":1608646319792,"results":"132","hashOfConfig":"101"},{"size":1735,"mtime":1609867251793,"results":"133","hashOfConfig":"101"},{"size":5227,"mtime":1613917552086,"results":"134","hashOfConfig":"101"},{"size":1234,"mtime":1609248574030,"results":"135","hashOfConfig":"101"},{"size":90,"mtime":1608554488394,"results":"136","hashOfConfig":"101"},{"size":4178,"mtime":1606997931817,"results":"137","hashOfConfig":"101"},{"size":2424,"mtime":1605785592357,"results":"138","hashOfConfig":"101"},{"size":2707,"mtime":1610903187173,"results":"139","hashOfConfig":"101"},{"size":7221,"mtime":1610571434742,"results":"140","hashOfConfig":"101"},{"size":8528,"mtime":1614020596212,"results":"141","hashOfConfig":"101"},{"size":2516,"mtime":1613996139149,"results":"142","hashOfConfig":"101"},{"size":13203,"mtime":1614432803989,"results":"143","hashOfConfig":"101"},{"size":7080,"mtime":1614006382809,"results":"144","hashOfConfig":"101"},{"size":3575,"mtime":1614095486660,"results":"145","hashOfConfig":"101"},{"size":4598,"mtime":1614267948504,"results":"146","hashOfConfig":"101"},{"size":8873,"mtime":1614002843011,"results":"147","hashOfConfig":"101"},{"size":6426,"mtime":1614081151096,"results":"148","hashOfConfig":"101"},{"size":5295,"mtime":1595505397461,"results":"149","hashOfConfig":"101"},{"size":2255,"mtime":1608643927125,"results":"150","hashOfConfig":"101"},{"size":220,"mtime":1613663688291,"results":"151","hashOfConfig":"101"},{"size":3785,"mtime":1613917552083,"results":"152","hashOfConfig":"101"},{"size":308,"mtime":1608661645022,"results":"153","hashOfConfig":"101"},{"size":1591,"mtime":1613663688307,"results":"154","hashOfConfig":"101"},{"size":5559,"mtime":1609434787599,"results":"155","hashOfConfig":"101"},{"size":4156,"mtime":1605891857388,"results":"156","hashOfConfig":"101"},{"size":1847,"mtime":1613663688308,"results":"157","hashOfConfig":"101"},{"size":468,"mtime":1613663688224,"results":"158","hashOfConfig":"101"},{"size":11693,"mtime":1610570701731,"results":"159","hashOfConfig":"101"},{"size":1261,"mtime":1613663688311,"results":"160","hashOfConfig":"101"},{"size":2164,"mtime":1605640036088,"results":"161","hashOfConfig":"101"},{"size":931,"mtime":1613663688306,"results":"162","hashOfConfig":"101"},{"size":363,"mtime":1610195822613,"results":"163","hashOfConfig":"101"},{"size":5019,"mtime":1614457349605,"results":"164","hashOfConfig":"101"},{"size":7965,"mtime":1613663688233,"results":"165","hashOfConfig":"101"},{"size":1562,"mtime":1610108918469,"results":"166","hashOfConfig":"101"},{"size":649,"mtime":1606232051393,"results":"167","hashOfConfig":"101"},{"size":3436,"mtime":1605208003831,"results":"168","hashOfConfig":"101"},{"size":250,"mtime":1610108918469,"results":"169","hashOfConfig":"101"},{"size":3154,"mtime":1610389738949,"results":"170","hashOfConfig":"101"},{"size":3456,"mtime":1605707127753,"results":"171","hashOfConfig":"101"},{"size":6094,"mtime":1610832840362,"results":"172","hashOfConfig":"101"},{"size":3564,"mtime":1609877616942,"results":"173","hashOfConfig":"101"},{"size":464,"mtime":1610373170297,"results":"174","hashOfConfig":"101"},{"size":684,"mtime":1608646651594,"results":"175","hashOfConfig":"101"},{"size":154,"mtime":1605711412858,"results":"176","hashOfConfig":"101"},{"size":8006,"mtime":1613663688313,"results":"177","hashOfConfig":"101"},{"size":270,"mtime":1609515992314,"results":"178","hashOfConfig":"101"},{"size":1986,"mtime":1611077821043,"results":"179","hashOfConfig":"101"},{"size":4047,"mtime":1610105316100,"results":"180","hashOfConfig":"101"},{"size":6203,"mtime":1611078525493,"results":"181","hashOfConfig":"101"},{"size":543,"mtime":1613917210109,"results":"182","hashOfConfig":"101"},{"size":4807,"mtime":1607003068471,"results":"183","hashOfConfig":"101"},{"size":582,"mtime":1607016487231,"results":"184","hashOfConfig":"101"},{"size":656,"mtime":1605708915429,"results":"185","hashOfConfig":"101"},{"size":830,"mtime":1605811574797,"results":"186","hashOfConfig":"101"},{"size":2393,"mtime":1613663688225,"results":"187","hashOfConfig":"101"},{"size":7570,"mtime":1610902510402,"results":"188","hashOfConfig":"101"},{"size":1053,"mtime":1613663688256,"results":"189","hashOfConfig":"101"},{"size":1235,"mtime":1607005895515,"results":"190","hashOfConfig":"101"},{"size":3215,"mtime":1613917552082,"results":"191","hashOfConfig":"101"},{"size":2694,"mtime":1613663688303,"results":"192","hashOfConfig":"101"},{"size":2551,"mtime":1607890229872,"results":"193","hashOfConfig":"101"},{"size":1317,"mtime":1605805839078,"results":"194","hashOfConfig":"101"},{"size":1682,"mtime":1607699266520,"results":"195","hashOfConfig":"101"},{"size":3601,"mtime":1610472464262,"results":"196","hashOfConfig":"101"},{"size":3947,"mtime":1610830287030,"results":"197","hashOfConfig":"101"},{"size":4147,"mtime":1605804791338,"results":"198","hashOfConfig":"101"},{"size":2696,"mtime":1610829944153,"results":"199","hashOfConfig":"101"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"tz5z4e",{"filePath":"202","messages":"203","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"205"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"209"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"216"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"205"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"226","usedDeprecatedRules":"216"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"205"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"233"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"205"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"240"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"205"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"246","messages":"247","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"205"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"251","messages":"252","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"205"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"205"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"205"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"205"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"205"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"275"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"279"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"275"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"285","messages":"286","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"233"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"205"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"240"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"240"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"279"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"310","messages":"311","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"205"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"205"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"321","messages":"322","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"240"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"275"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"205"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"332","messages":"333","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"205"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"240"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"240"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"216"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"240"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"352","messages":"353","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"205"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"359","messages":"360","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"275"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"365"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368","usedDeprecatedRules":"216"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"373","messages":"374","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"375","messages":"376","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"377","usedDeprecatedRules":"205"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380","usedDeprecatedRules":"216"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"240"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"275"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"389","usedDeprecatedRules":"205"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"392","messages":"393","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"394","messages":"395","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"396","usedDeprecatedRules":"240"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"399","usedDeprecatedRules":"205"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"406","messages":"407","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"408","usedDeprecatedRules":"205"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"413","messages":"414","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"415","usedDeprecatedRules":"205"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"418","messages":"419","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"420","usedDeprecatedRules":"205"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"423","messages":"424","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"425","usedDeprecatedRules":"216"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"428","messages":"429","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"430","usedDeprecatedRules":"240"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"433","usedDeprecatedRules":"434"},{"filePath":"435","messages":"436","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"437","messages":"438","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"439","messages":"440","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"441","usedDeprecatedRules":"240"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"444","messages":"445","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"446","messages":"447","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448","usedDeprecatedRules":"205"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"451","messages":"452","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"453","messages":"454","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"455","messages":"456","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"457","messages":"458","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"459","messages":"460","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\gonza\\finance-app\\src\\UserContext.js",[],"C:\\Users\\gonza\\finance-app\\src\\portfolio\\logicPruebasConAdd.js",["461","462","463","464","465","466"],"import { useEffect, useRef } from \"react\";\r\nimport { useDataLayer } from \"../Context\";\r\nimport { convertHumanToUnixInit, convertHumanToUnixInitial, convertUnixToHuman, milisencondsInADay } from \"../utils/datesUtils\";\r\nimport { usePortfolioGenerator } from \"./portfolioGenerator2\";\r\n//we lost lot of time by not realising .map() mutate object, so each time we were changing th eamount of one date we were change all the amount of the past dates as well kind of magically. That is because each date is an array of objects, and this objects are references from the previous object as we generate the the series from the objects of the date before. So everytime we were fining the updatedInfo, we were using the same object (as they werre pointing to he same memory dir), instead of a copy..\r\n\r\n\r\n//we are injecting this from App.js\r\n\r\n\r\n\r\n//let initialTimeUnix = 0\r\n//gastamos 12.000 en acciones de amzn\r\n//vendemos 10 acciones a 3000, ingresando 30.000, ganamos 12.000\r\n\r\nconst findFirstDate = (userActivity) => {\r\n    let valu\r\n    userActivity.forEach(operation => {\r\n        if (operation.isFirstOperation) {\r\n           // console.log(operation.date)\r\n            valu = convertHumanToUnixInit(operation.date)\r\n        }\r\n    })\r\n    return valu\r\n}\r\n\r\n\r\n\r\nconst getTotalDaysElapsed = (initialTime) => {\r\n    //const initialTime = findFirstDate()\r\n    const date = convertUnixToHuman(Date.now())\r\n    //console.log(date, \"duuuu\")\r\n    const todayUnix00 = convertHumanToUnixInit(date)\r\n\r\n    //console.log(todayUnix00,\"duuu2\", initialTime)\r\n    const totalMilisecons = todayUnix00 - initialTime\r\n    if (totalMilisecons > 0) {\r\n        return totalMilisecons / milisencondsInADay\r\n    } else {\r\n        //this will only run in the day 0 \r\n        return 0\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const useLogicPruebas = () => {\r\n\r\n    const { state, dispatch } = useDataLayer()\r\n\r\n    const createTimelaspse = (initialTime) => {\r\n        const firstDate = convertUnixToHuman(initialTime)\r\n        let timelapse = [firstDate]\r\n        let lastDate= initialTime\r\n        //let initialTime = findFirstDate(state.userActivity)\r\n        const range = getTotalDaysElapsed(initialTime)\r\n        //let unixDate = initialTimeUnix.current\r\n        //console.log(range, \"raaango\")\r\n        //console.log(initialTime, \"ostiatime\")\r\n        Array.from(Array(range).keys()).forEach(_ => {\r\n            lastDate += milisencondsInADay\r\n            timelapse = [...timelapse, convertUnixToHuman(lastDate)]\r\n        })\r\n        return timelapse\r\n    }\r\n\r\n    const handleSell = (costMeanXud, amountSold, priceSold) => {\r\n        const income = (priceSold * amountSold) - (costMeanXud * amountSold)\r\n        return { income }\r\n    }\r\n\r\n    // const addToGeneratedSeries = (newOperation, cb) => {\r\n    //     //we could save the first date in database intead of calculating everytime\r\n    //     console.log(\"queee hostiaaaaaaa\")\r\n    //     let today;\r\n    //     const { unitaryCost, ticker, amount } = newOperation.details\r\n    //     const currentGeneratedSerie = state.generatedSeries\r\n    //     //we need to get today's serie last key\r\n    //     console.log(JSON.parse(JSON.stringify(currentGeneratedSerie)), \"quepaso1\")\r\n    //     if (newOperation.isFirstOperation) {\r\n    //         //the generated serie won't have any date\r\n    //         today = convertUnixToHuman(Date.now())\r\n    //         const updatedSeries = {\r\n    //             ...state.generatedSeries,\r\n    //             dates: {\r\n    //                 [today]: {\r\n    //                     income: 0,\r\n    //                     positions: [\r\n    //                         {ticker, amount, unitaryCost}\r\n    //                     ]\r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //         cb(updatedSeries)\r\n    //         return\r\n    //         //we leave the function here\r\n    //     }\r\n    //     //realmente ya tenemos la date de hoy en newOperation\r\n    //     today = Object.keys(currentGeneratedSerie.dates)[Object.keys(currentGeneratedSerie.dates).length - 1]\r\n\r\n    //     console.log(state.generatedSeries, \"repuuuuta\")\r\n    //     console.log(JSON.parse(JSON.stringify(today)), \"quepaso2\")\r\n    //     let todayRegister = currentGeneratedSerie.dates[today]\r\n    //     console.log(todayRegister, \"registro de hoy\")\r\n\r\n    //     let alreadyInPortfolio = todayRegister.positions.find(asset => asset.ticker === ticker)\r\n    //     if (alreadyInPortfolio) {\r\n    //         if (newOperation.operationType === \"buy\") {\r\n    //             const newAmount = alreadyInPortfolio.amount + amount\r\n    //             const unitaryCostMean =\r\n    //                 (alreadyInPortfolio.unitaryCost * alreadyInPortfolio.amount) /\r\n    //                 (alreadyInPortfolio.amount + amount)\r\n    //                 +\r\n    //                 (unitaryCost * amount) /\r\n    //                 (alreadyInPortfolio.amount + amount)\r\n    //             alreadyInPortfolio = {\r\n    //                 ...alreadyInPortfolio\r\n    //             }\r\n    //             const readyUnitaryCost = Math.round(unitaryCostMean * 100) / 100\r\n    //             const otherPositions = todayRegister.positions.filter(asset => asset.ticker !== ticker)\r\n    //             alreadyInPortfolio = {\r\n    //                 ...alreadyInPortfolio,\r\n    //                 amount: newAmount,\r\n    //                 unitaryCost: readyUnitaryCost\r\n    //             }\r\n    //             todayRegister = {\r\n    //                 ...todayRegister,\r\n    //                 positions: [\r\n    //                     ...otherPositions,\r\n\r\n    //                 ]\r\n    //             }\r\n    //         } else {\r\n    //             //sell\r\n    //             const newAmount = alreadyInPortfolio.amount - amount\r\n    //             const { income } = handleSell(alreadyInPortfolio.unitaryCost, amount, newOperation.details.priceSold)\r\n    //             //we need to check if there was income for this ticker (if was sold anytime before)\r\n    //             const newIncome = alreadyInPortfolio.income ? alreadyInPortfolio.income + income : income\r\n    //             alreadyInPortfolio = {\r\n    //                 ...alreadyInPortfolio,\r\n    //                 income: newIncome,\r\n    //                 amount: newAmount\r\n    //             }\r\n    //             const otherPositions = todayRegister.positions.filter(asset => asset.ticker !== ticker)\r\n    //             if (newAmount > 0) {\r\n    //                 todayRegister = {\r\n    //                     ...todayRegister,\r\n    //                     positions: [\r\n    //                         ...otherPositions,\r\n    //                         alreadyInPortfolio\r\n    //                     ],\r\n    //                     income: todayRegister.income + income\r\n    //                 }\r\n    //             } else {\r\n    //                 const updatedPositions = todayRegister.positions.filter(asset => asset.ticker === ticker)\r\n    //                 todayRegister = {\r\n    //                     ...todayRegister,\r\n    //                     positions: updatedPositions,\r\n    //                     income: todayRegister.income + income\r\n    //                 }\r\n    //             }\r\n    //         }\r\n\r\n    //     } else {\r\n    //         if (newOperation.operationType === \"buy\") {\r\n    //             todayRegister = {\r\n    //                 ...todayRegister,\r\n    //                 positions: [...todayRegister.positions,\r\n    //                 { ticker, amount, unitaryCost }]\r\n    //             }\r\n    //         } else {\r\n    //             throw new Error(ticker, amount, \"can't sell stock that don't have\")\r\n    //         }\r\n    //     }\r\n    //     const updatedSeries = {\r\n    //         ...state.generatedSeries,\r\n    //         dates: {\r\n    //             ...state.generatedSeries.dates,\r\n    //             [today]: todayRegister\r\n    //         }\r\n    //     }\r\n    //     console.log(updatedSeries, \"repuuuuta2\")\r\n    //     cb(updatedSeries)\r\n    // }\r\n\r\n    const generateSerieFromBegining = (userActivity, cb) =>{\r\n        const worker = new Worker(\"/worker2.js\")\r\n        worker.postMessage(userActivity)\r\n        worker.onmessage=(e)=>{\r\n            console.log(e.data, \"posesions generated\")\r\n            const possesionGenerated = e.data\r\n            cb(possesionGenerated)\r\n        }\r\n    }\r\n    const generateSerieFromBeginin = (userActivity, cb) => {\r\n \r\n       // console.log(userActivity, \"actividad usuario\")\r\n        const initialTime = findFirstDate(userActivity)\r\n       // console.log(initialTime, \"tiempooo\")\r\n        //console.log(convertUnixToHuman(initialTime), \"crazyy\")\r\n        const timelapse = createTimelaspse(initialTime)\r\n       \r\n        let masterHistory;\r\n        let koko = 0\r\n        masterHistory = {\r\n            income: 0\r\n        }\r\n        //console.log(timelapse, \"timelapse\")\r\n        if (!timelapse.length) {\r\n            masterHistory = {\r\n                ...masterHistory,\r\n                dates: {\r\n                }\r\n            }\r\n        }\r\n        //**deberiamos tener en cuenta si es fin de semana o no, ya que el finde no cambia nada, por lo que es redundante\r\n        timelapse.forEach(date => {\r\n            masterHistory = {\r\n                ...masterHistory,\r\n                dates: {\r\n                    ...masterHistory.dates,\r\n                    [date]: []\r\n                }\r\n            }\r\n        })\r\n\r\n        //here we initialize an empty array for each date\r\n        console.log(masterHistory, \"maastar\")\r\n        console.log(timelapse, \"timelapse\")\r\n        timelapse.forEach((date, index) => {\r\n            let hasMadeOperationThatDate = false\r\n            userActivity.forEach(operation => {\r\n                //console.log(typeof operation.date,typeof date,date, \"kostia\")\r\n                //console.log(operation.date, date, \"kostia\")\r\n                if (date === operation.date) {\r\n                    //console.log(index, \"iiii\")\r\n                    //console.log(\"hola\")\r\n                    //console.log(date, \"first date\")\r\n                    hasMadeOperationThatDate = true\r\n                    let ticker = operation.details.ticker\r\n                    let amount = operation.details.amount\r\n                    let unitaryCost = operation.details.unitaryCost\r\n                    let priceSold = operation.details.priceSold\r\n\r\n                    //tenemos que comprobar si teniamos alguna cantidad previamente de ese ticker\r\n                    let lastAmount = 0\r\n                    //console.log(JSON.parse(JSON.stringify(masterHistory)), JSON.parse(JSON.stringify(masterHistory.dates)), masterHistory.dates[date], date, \"wata\")\r\n                    const hasAlreadyOperatedThatDay = masterHistory[\"dates\"][date].positions\r\n                    if (hasAlreadyOperatedThatDay) {\r\n                        //console.log(ticker, \"operated twice that day\")\r\n                        const alreadyInPortfolio = masterHistory.dates[date].positions.find(item => item.ticker === ticker)\r\n                        if (alreadyInPortfolio) {\r\n                            lastAmount = alreadyInPortfolio.amount\r\n                            const newAmount =\r\n                                operation.operationType === \"buy\" ?\r\n                                    lastAmount + amount : lastAmount - amount\r\n                            if (operation.operationType === \"buy\") {\r\n                                const updatedInfo = masterHistory.dates[date].positions.map(({ ...posesions }) => {\r\n                                    if (posesions.ticker === ticker) {\r\n                                        posesions.amount = newAmount\r\n                                        const unitaryCostMean =\r\n                                            (posesions.unitaryCost * posesions.amount) /\r\n                                            (posesions.amount + amount)\r\n                                            +\r\n                                            (unitaryCost * amount) /\r\n                                            (posesions.amount + amount)\r\n\r\n                                        posesions.unitaryCost = Math.round(unitaryCostMean * 100) / 100\r\n                                    }\r\n                                    return posesions\r\n                                })\r\n                                masterHistory = {\r\n                                    ...masterHistory,\r\n                                    dates: {\r\n                                        ...masterHistory.dates,\r\n                                        [date]: {\r\n                                            ...masterHistory.dates[date],\r\n                                            positions: updatedInfo\r\n                                        }\r\n                                    }\r\n\r\n                                }\r\n                            }\r\n                            else if (operation.operationType === \"sell\") {\r\n                                let dateIncome, operationIncome;\r\n                                masterHistory.dates[date].positions.forEach(posesions => {\r\n                                    if (posesions.ticker === ticker) {\r\n                                        if (index === 0) {\r\n                                           // console.log(posesions.unitaryCost,\r\n                                             //   amount, priceSold, \"incomeee\")\r\n                                        }\r\n                                        const { income } = handleSell(posesions.unitaryCost, amount, priceSold)\r\n                                        if (index === 0) {\r\n                                            //console.log(JSON.parse(JSON.stringify(income, \"incomeee\")))\r\n                                        }\r\n                                        operationIncome = income\r\n\r\n                                        dateIncome = masterHistory.dates[date].income + income\r\n                                    }\r\n                                })\r\n                                let updatedInfo = newAmount !== 0 ?\r\n                                    //if we don't use spreed operatior we will be mutating the original object\r\n                                    masterHistory.dates[date].positions.map(({ ...posesions }) => {\r\n                                        if (posesions.ticker === ticker) {\r\n                                            posesions.amount = newAmount\r\n                                            posesions[\"income\"] = operationIncome\r\n                                        }\r\n                                        return posesions\r\n                                    })\r\n                                    :\r\n                                    masterHistory.dates[date].positions.filter(item => item.ticker !== ticker)\r\n\r\n                                masterHistory = {\r\n                                    ...masterHistory,\r\n                                    dates: {\r\n                                        ...masterHistory.dates,\r\n                                        [date]: {\r\n                                            income: dateIncome,\r\n                                            positions: updatedInfo\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            masterHistory = {\r\n                                ...masterHistory,\r\n                                dates: {\r\n                                    ...masterHistory.dates,\r\n                                    [date]: {\r\n                                        ...masterHistory.dates[date],\r\n                                        positions: [\r\n                                            ...masterHistory.dates[date].positions,\r\n                                            {\r\n                                                ticker,\r\n                                                amount,\r\n                                                unitaryCost\r\n                                            }\r\n                                        ]\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //if is the first iteration we now this is the initial operation so there're weren stocks before.\r\n                    else {\r\n                        const alreadyInPortfolio = index === 0 ? false : masterHistory.dates[timelapse[index - 1]].positions.find(item => item.ticker === ticker)\r\n                       // console.log(alreadyInPortfolio, \"que concho\")\r\n                        if (alreadyInPortfolio) {\r\n                            lastAmount = alreadyInPortfolio.amount\r\n                            const newAmount =\r\n                                operation.operationType === \"buy\" ?\r\n                                    lastAmount + amount : lastAmount - amount\r\n                            if (operation.operationType === \"buy\") {\r\n                                const updatedInfo = masterHistory.dates[timelapse[index - 1]].positions.map(({ ...posesions }) => {\r\n                         //           console.log(posesions, \"cojones\")\r\n                                    if (posesions.ticker === ticker) {\r\n                                        posesions.amount = newAmount\r\n                                        const unitaryCostMean =\r\n                                            (posesions.unitaryCost * posesions.amount) /\r\n                                            (posesions.amount + amount)\r\n                                            +\r\n                                            (unitaryCost * amount) /\r\n                                            (posesions.amount + amount)\r\n\r\n                                        posesions.unitaryCost = Math.round(unitaryCostMean * 100) / 100\r\n                                    }\r\n                                    return posesions\r\n                                })\r\n\r\n                                masterHistory = {\r\n                                    ...masterHistory,\r\n                                    dates: {\r\n                                        ...masterHistory.dates,\r\n                                        [date]: {\r\n                                            ...masterHistory.dates[timelapse[index - 1]],\r\n                                            positions: updatedInfo\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            else if (operation.operationType === \"sell\") {\r\n                                // console.log(JSON.parse(JSON.stringify(masterHistory)), \"antes\", ticker, date, timelapse[index - 1])\r\n                                //let newIncome;\r\n                                let operationIncome;\r\n                                let dateIncome;\r\n                                masterHistory.dates[timelapse[index - 1]].positions.forEach(posesions => {\r\n                                    if (posesions.ticker === ticker) {\r\n                                        const { income } = handleSell(posesions.unitaryCost, amount, priceSold)\r\n                                        operationIncome = income\r\n                                        dateIncome = masterHistory.dates[timelapse[index - 1]].income + income\r\n                                    }\r\n                                })\r\n                                let updatedInfo = newAmount !== 0 ?\r\n                                    masterHistory.dates[timelapse[index - 1]].positions.map(({ ...posesions }) => {\r\n                                        if (posesions.ticker === ticker) {\r\n                                            posesions.amount = newAmount\r\n                                            posesions[\"income\"] = operationIncome\r\n                                        }\r\n                                        return posesions\r\n                                    })\r\n                                    :\r\n                                    masterHistory.dates[timelapse[index - 1]].positions.filter(item => item.ticker !== ticker)\r\n                                // console.log(JSON.parse(JSON.stringify(masterHistory)), \"despues\", ticker, date, timelapse[index - 1])\r\n                                masterHistory = {\r\n                                    ...masterHistory,\r\n                                    dates: {\r\n                                        ...masterHistory.dates,\r\n                                        [date]: {\r\n                                            income: dateIncome,\r\n                                            positions: updatedInfo\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                        } else {\r\n                            //si opera varias en un dia, el codigo no debe pasar x aqui\r\n                            const info = {\r\n                                ticker,\r\n                                amount,\r\n                                unitaryCost\r\n                            }\r\n\r\n                            if (index === 0) {\r\n                                //console.log(info, \"info\")\r\n                                //aunque sea el primer dia\r\n                                masterHistory = {\r\n                                    ...masterHistory,\r\n                                    dates: {\r\n                                        ...masterHistory.dates,\r\n                                        [date]: {\r\n                                            income: 0,\r\n                                            positions: [\r\n                                                info\r\n                                            ]\r\n                                        }\r\n                                    }\r\n\r\n                                }\r\n\r\n                            } else {\r\n                                masterHistory = {\r\n                                    ...masterHistory,\r\n                                    dates: {\r\n                                        ...masterHistory.dates,\r\n                                        [date]: {\r\n                                            ...masterHistory.dates[timelapse[index - 1]],\r\n                                            positions: [\r\n                                                ...masterHistory.dates[timelapse[index - 1]].positions,\r\n                                                info\r\n                                            ]\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }else{\r\n                   // console.log(\"noooooooooo\")\r\n                }\r\n            })\r\n            if (!hasMadeOperationThatDate) {\r\n                //si no hemos operado copiaremos el contenido del dia anterior\r\n                //console.log(\"no operation that day\")\r\n                koko++\r\n                //console.log(koko, \"recuento\")\r\n                const lastInfo = masterHistory.dates[timelapse[index - 1]]\r\n                //console.log(lastInfo)\r\n                masterHistory = {\r\n                    ...masterHistory,\r\n                    dates: {\r\n                        ...masterHistory.dates,\r\n                        [date]: lastInfo\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        console.log(masterHistory, \"aveeer nena\")\r\n        cb(masterHistory)\r\n    }\r\n    //solo se recalcularan las series cuando el ususario haya echo una nueva operacion y o cuando haya entrado en portolio dashboard\r\n    //usePortfolioGenerator()\r\n    useEffect(() => {\r\n        //this needs to fire either when initialState is ready and everytime we add new operation (user activity changes), as we need this to calculate the changes in AssetStructure chart\r\n        console.log(state.userActivity, state.setPruebaReady, state.generatedSeries.ready, \"actu\")\r\n        //setPruebaReady creo que es redundante aqui ya que cuando generatedSeries.status es falso significa que hemos realizado una nueva operacion (deberiamos impedir realizar nueva operacion hasta que no generatedSeries.status sea true again)\r\n        if (state.userActivity.length > 0 && state.setPruebaReady && !state.generatedSeries.ready) {\r\n            console.log(\"exxecutao\")\r\n            //if no userActivity we wont run any code\r\n                generateSerieFromBegining(state.userActivity, (generatedSerie) => {\r\n                    console.log(\"exxecutao2\")\r\n                    dispatch({ type: \"STORE_GENERATED_SERIES\", payload: generatedSerie })\r\n                })\r\n            //  else {\r\n            //     const newOperation = state.userActivity[state.userActivity.length - 1]\r\n            //     dispatch({ type: \"SET_ARE_GENERATED_SERIES_READY\", payload: false })\r\n            //     addToGeneratedSeries(newOperation, (generatedSerie) => {\r\n            //         dispatch({ type: \"STORE_GENERATED_SERIES\", payload: generatedSerie })\r\n            //         dispatch({ type: \"SET_ARE_GENERATED_SERIES_READY\", payload: true })\r\n            //         //userRefreshed.current will be alredy false\r\n            //     })\r\n            // }\r\n            \r\n        }\r\n        \r\n       \r\n        // if (state.userActivity.length > 0 && Object.keys(state.portfolioHistory).length > 0) {\r\n        //     generateSerieFromBegining(state.userActivity, (generatedSerie) => { dispatch({ type: \"STORE_GENERATED_SERIES\", payload: generatedSerie }) })\r\n        // }\r\n    }, [state.setPruebaReady, state.generatedSeries])\r\n\r\n\r\n}\r\n\r\n\r\n\r\n//console.log(createTimelaspse(), \"yea\")\r\n\r\n\r\n\r\n\r\n//makeIt()\r\n//console.log(findFirstDate(), \"aqui\")\r\n\r\n\r\nexport const userActivity = [\r\n    {\r\n        date: \"2020-06-15\",\r\n        operationType: \"buy\",\r\n        details: {\r\n            ticker: \"amzn\",\r\n            amount: 40,\r\n            unitaryCost: 300\r\n\r\n        },\r\n        isFirstOperation: true,\r\n\r\n    },\r\n    {\r\n        date: \"2020-06-15\",\r\n        operationType: \"buy\",\r\n        details: {\r\n            ticker: \"aapl\",\r\n            amount: 60,\r\n            unitaryCost: 300\r\n\r\n        },\r\n        isFirstOperation: false,\r\n\r\n    },\r\n    {\r\n        date: \"2020-06-15\",\r\n        operationType: \"sell\",\r\n        details: {\r\n            ticker: \"aapl\",\r\n            amount: 40,\r\n            priceSold: 300\r\n\r\n        },\r\n        isFirstOperation: false,\r\n    },\r\n    {\r\n        date: \"2020-06-16\",\r\n        operationType: \"buy\",\r\n        details: {\r\n            ticker: \"aa\",\r\n            amount: 40,\r\n            unitaryCost: 14\r\n\r\n        },\r\n        isFirstOperation: false,\r\n\r\n    },\r\n    {\r\n        date: \"2020-06-22\",\r\n        operationType: \"buy\",\r\n        details: {\r\n            ticker: \"aa\",\r\n            amount: 30,\r\n            unitaryCost: 14\r\n\r\n        },\r\n        isFirstOperation: false,\r\n    },\r\n    {\r\n        date: \"2020-06-25\",\r\n        operationType: \"buy\",\r\n        details: {\r\n            ticker: \"aa\",\r\n            amount: 30,\r\n            unitaryCost: 14\r\n\r\n        },\r\n        isFirstOperation: false,\r\n\r\n    },\r\n    {\r\n        date: \"2020-07-18\",\r\n        operationType: \"sell\",\r\n        details: {\r\n            ticker: \"aapl\",\r\n            amount: 10,\r\n            priceSold: 315\r\n\r\n        },\r\n        isFirstOperation: false,\r\n\r\n    },\r\n    {\r\n        date: \"2020-08-21\",\r\n        operationType: \"buy\",\r\n        details: {\r\n            ticker: \"fb\",\r\n            amount: 100,\r\n            unitaryCost: 10\r\n\r\n        },\r\n        isFirstOperation: false,\r\n\r\n    },\r\n    {\r\n        date: \"2020-08-21\",\r\n        operationType: \"buy\",\r\n        details: {\r\n            ticker: \"fb\",\r\n            amount: 20,\r\n            unitaryCost: 10\r\n\r\n        },\r\n        isFirstOperation: false,\r\n\r\n    },\r\n    {\r\n        date: \"2020-08-21\",\r\n        operationType: \"buy\",\r\n        details: {\r\n            ticker: \"tef\",\r\n            amount: 80,\r\n            unitaryCost: 7\r\n\r\n        },\r\n        isFirstOperation: false,\r\n\r\n    },\r\n    {\r\n        date: \"2020-09-24\",\r\n        operationType: \"sell\",\r\n        details: {\r\n            ticker: \"fb\",\r\n            amount: 120,\r\n            priceSold: 20\r\n\r\n        },\r\n        isFirstOperation: false,\r\n\r\n\r\n    },\r\n    {\r\n        date: \"2020-09-21\",\r\n        operationType: \"sell\",\r\n        details: {\r\n            ticker: \"tef\",\r\n            amount: 45,\r\n            priceSold: 3\r\n\r\n        },\r\n        isFirstOperation: false,\r\n\r\n    },\r\n    {\r\n        date: \"2020-10-26\",\r\n        operationType: \"sell\",\r\n        details: {\r\n            ticker: \"amzn\",\r\n            amount: 10,\r\n            priceSold: 3000\r\n\r\n        },\r\n        isFirstOperation: false,\r\n\r\n    }\r\n]",["467","468"],"C:\\Users\\gonza\\finance-app\\src\\Personas\\UserItem.tsx",["469"],"import React, { ReactNode } from 'react'\r\nimport { PortfolioPriceChart } from '../portfolio/PortfolioPriceChart'\r\nimport { PeopleItem } from './interfaces'\r\nimport styled from \"styled-components\"\r\nimport { makeStyles, Paper } from '@material-ui/core'\r\nimport { Link } from 'react-router-dom'\r\n\r\ninterface IProps {\r\n    person: PeopleItem\r\n}\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: \"350px\"\r\n    }\r\n})\r\nexport const UserItem: React.FC<IProps> = ({ person }) => {\r\n    const { user, portfolio } = person\r\n\r\n    const StyledDiv = styled.div`\r\n        width: 200px\r\n    `\r\n    const classes = useStyles()\r\n    return (\r\n        <Paper\r\n            classes={{ root: classes.root }}\r\n        >\r\n            <UserInfo>\r\n                <Link to={`/people/${user.userId}`}>\r\n                    <h3>{user.firstName}</h3>\r\n                </Link>\r\n                <h6>{user.lastName}</h6>\r\n            </UserInfo>\r\n            <Portfolio>\r\n                <PortfolioPriceChart datos={portfolio} title={`${user.firstName} Portfolio`} />\r\n            </Portfolio>\r\n        </Paper>\r\n    )\r\n}\r\n\r\ninterface ICProps {\r\n    children: ReactNode\r\n}\r\nconst UserInfo: React.FC<ICProps> = ({ children }) => <>{children}</>\r\nconst Portfolio: React.FC<ICProps> = ({ children }) => <>{children}</>",["470","471"],"C:\\Users\\gonza\\finance-app\\src\\components\\components\\CustomCircularProgress.js",[],["472","473"],"C:\\Users\\gonza\\finance-app\\src\\components\\subNavigations\\CompanyNav.js",["474"],"import { AppBar, Button, Chip, makeStyles, Tab, Tabs } from '@material-ui/core';\r\nimport React, { forwardRef, useEffect, useState } from 'react'\r\nimport { Transition } from 'react-transition-group';\r\nimport { useMesure } from '../../utils/useMesure';\r\nimport BookmarksIcon from '@material-ui/icons/Bookmarks';\r\nimport LibraryAddCheckIcon from '@material-ui/icons/LibraryAddCheck';\r\nimport { useDataLayer } from '../../Context';\r\nimport { useUILayer } from '../../ContextUI';\r\nimport { useHistory } from 'react-router-dom';\r\nimport clsx from 'clsx';\r\nimport { useUserLayer } from '../../UserContext';\r\n\r\nconst drawerWidth = 240;\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBarCompany: {\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    transition: theme.transitions.create([\"top\", \"transform\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    transform: \"translateX(0px)\",\r\n  },\r\n  appBarCompanyShift: {\r\n    transform: `translateX(${drawerWidth}px)`\r\n  },\r\n  tab: {\r\n    marginLeft: \"60px\",\r\n  },\r\n  white: {\r\n    borderColor: \"white\"\r\n  },\r\n}));\r\n\r\nexport const CompanyNav = forwardRef(({ menuCompaniesOpen, topNavigation }) => {\r\n\r\n  const { state: { currentCompany, following }, dispatch } = useDataLayer()\r\n  const { sidebarOpen, setMountApproval } = useUILayer()\r\n  const { userState: { info } } = useUserLayer()\r\n  const { height } = useMesure(topNavigation)\r\n  const history = useHistory()\r\n  const [tabValue, setTabValue] = useState(0);\r\n\r\n  function a11yProps(index) {\r\n    return {\r\n      id: `simple-tab-${index}`,\r\n      'aria-controls': `simple-tabpanel-${index}`,\r\n    };\r\n  }\r\n  console.log(currentCompany, following, \"muuuuwwww\")\r\n\r\n  const menu2transitions = {\r\n    entering: {\r\n      top: `${height}px`,\r\n    },\r\n    entered: {\r\n      top: `${height}px`,\r\n    },\r\n    exiting: {\r\n      top: \"0px\",\r\n    },\r\n    exited: {\r\n      top: \"0px\"\r\n    }\r\n  }\r\n\r\n  const handleChange = (e, val) => {\r\n    setTabValue(val)\r\n  }\r\n  const classes = useStyles();\r\n\r\n  const navigate = (url) => {\r\n    history.push(`${url}/${currentCompany.ticker}`)\r\n  }\r\n\r\n  const handleFollow = () => {\r\n    fetch(`http://localhost:8001/api/v1/interests/interests?email=${info.email}&interest=${currentCompany.ticker}`)\r\n      .then(res => res.json())\r\n      .then(interest => {\r\n        if (typeof interest === \"string\") {\r\n          interest = [interest]\r\n        }\r\n        dispatch({ type: \"STORE_USER_INTEREST\", payload: interest })\r\n      })\r\n      .catch(err => { console.log(err.message, \"can't update interest\") })\r\n  }\r\n\r\n  const [isFollowing, setIsFollowing] = useState(false)\r\n  useEffect(() => {\r\n    if (!following.length) {\r\n      setIsFollowing(false)\r\n      return\r\n    }\r\n    //hay que tener en cuenta si esta logeao o no\r\n    const _isFollowing = following.find(tag => tag === currentCompany.ticker)\r\n    setIsFollowing(!!_isFollowing)\r\n\r\n  }, [following])\r\n  return (\r\n    <Transition\r\n      in={menuCompaniesOpen}\r\n      timeout={300}\r\n      // mountOnEnter\r\n      // unmountOnExit\r\n      onExited={() => { setMountApproval(true) }}\r\n    >\r\n      {animationState => (\r\n        <AppBar\r\n          className={clsx(classes.appBarCompany, {\r\n            [classes.appBarCompanyShift]: sidebarOpen\r\n          })}\r\n          style={menu2transitions[animationState]}\r\n        >\r\n          <Tabs value={tabValue} onChange={handleChange} aria-label=\"simple tabs example\"\r\n            classes={{ root: classes.tab }}\r\n          >\r\n            <Tab label=\"Overview\" {...a11yProps(0)} onClick={() => { navigate(\"/companies/overview/\") }} />\r\n            <Tab label=\"Financials\" {...a11yProps(1)} onClick={() => { navigate(\"/companies/financials/\") }} />\r\n            <Tab label=\"Key metrics\" {...a11yProps(2)} onClick={() => { navigate(\"/companies/keymetrics/\") }} />\r\n            <Tab label=\"News\" {...a11yProps(2)} onClick={() => { history.push(`/news/`) }} />\r\n          </Tabs>\r\n          <FollowingControl {...{ handleFollow, isFollowing }} />\r\n          <Chip label=\"not owned\" size=\"small\" variant=\"outlined\" style={{ color: \"white\" }}\r\n            classes={{\r\n              outlined: classes.white\r\n            }}\r\n          />\r\n        </AppBar>\r\n      )}\r\n    </Transition>\r\n  )\r\n})\r\n\r\nconst FollowingControl = ({ handleFollow, isFollowing }) => {\r\n  return isFollowing ?\r\n    <Button\r\n      startIcon={<LibraryAddCheckIcon />}\r\n      onClick={handleFollow}\r\n    >\r\n      Following\r\n    </Button>\r\n    :\r\n    <Button\r\n      startIcon={<BookmarksIcon />}\r\n      onClick={handleFollow}\r\n    >Follow</Button>\r\n\r\n}",["475","476"],"C:\\Users\\gonza\\finance-app\\src\\portfolio\\StockShop.js",["477","478"],"C:\\Users\\gonza\\finance-app\\src\\views\\indexes\\Nasdaq.js",[],"C:\\Users\\gonza\\finance-app\\src\\views\\company\\KeyMetrics.js",["479","480","481","482","483","484","485","486"],"import { Chip, List, ListItem, ListItemText } from '@material-ui/core'\r\nimport React, { useEffect, useState, useRef } from 'react'\r\nimport { useDataLayer } from \"../../Context\"\r\nimport { camelCasePipe } from '../../utils/Pipes'\r\n\r\nexport const KeyMetrics = ({ ticker, setListHeight }) => {\r\n\r\n    const { state , dispatch} = useDataLayer()\r\n    const listo = useRef(null)\r\n    const url = \"https://www.alphavantage.co/query?function=OVERVIEW\";\r\n  \r\n  const apiKey = \"btm6dp748v6ud360stcg\";\r\n  const [data, setData] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        console.log(\"vas\")\r\n        //we need to check what happends if we pass undefined,\r\n        if(!state.keymetrics[ticker] || !state.keymetrics[ticker] === undefined){\r\n          console.log(\"que coño\", state.keymetrics[ticker])\r\n          setLoading(true);\r\n          fetch(`${url}&symbol=${ticker}&apikey=${apiKey}`)\r\n            .then((data) => data.json())\r\n            .then((data) => {\r\n              setLoading(false);\r\n              setData(data);\r\n            })\r\n            .catch((err) => {\r\n              setError(err.message);\r\n            });\r\n        }else{\r\n          setData(state.keymetrics[ticker])\r\n        }\r\n      }, [state]);\r\n      useEffect(() => {\r\n        if(!state.keymetrics[ticker]){\r\n          data && dispatch({type: \"STORE_DATA\", payload: {ticker: ticker, field: \"keymetrics\", value: data}})\r\n        }\r\n      }, [data])\r\n\r\n    useEffect(() => {\r\n        if (listo.current && Object.keys(data).length > 0) {\r\n            //console.log(listo.current.offsetHeight, \"hhhhhight\")\r\n            setListHeight(listo.current.offsetHeight)\r\n        }\r\n    }, [data])\r\n   \r\n    return (\r\n        <ul className=\"list-modelo\" ref={listo}>\r\n            {Object.keys(data).length > 0 &&\r\n                Object.keys(data).map(field => {\r\n                    if (field.toLowerCase() === \"description\") {\r\n                        return null\r\n                    }\r\n                    return (<li>\r\n                        <Chip label={camelCasePipe(field)} size=\"small\" />\r\n                        <p style={{ marginLeft: \"auto\" }}>{data[field]}</p>\r\n                    </li>)\r\n                }\r\n                )\r\n            }\r\n        </ul>\r\n    )\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\dashboard\\AssetStructure.js",["487","488"],"import { Paper } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { DonutChart } from '../charts/DonutChart'\r\nimport { useDataLayer } from '../Context'\r\n\r\nexport const AssetStructure = () => {\r\n    const { state } = useDataLayer()\r\n    const { stocks } = state.currentPossesions\r\n    const [readyData, setReadyData] = useState(\"\")\r\n    const getMarketValueByStock = () => {\r\n        let arrByCompany = []\r\n        let totalMarketVal = 0\r\n        console.log(stocks, \"staaacks\")\r\n        stocks.forEach(poss => {\r\n            console.log(state.portfolioHistoryByCompany)\r\n            const stockHistory = state.portfolioHistoryByCompany[poss.ticker]\r\n            console.log(stockHistory, \"hastory\")\r\n            let marketVal;\r\n            if(stockHistory && stockHistory.length > 0){\r\n                const lastRegister = stockHistory[stockHistory.length - 1]\r\n                const lastRegisterClosePrice = lastRegister[2]\r\n                marketVal = lastRegisterClosePrice * poss.amount\r\n                \r\n            }else{\r\n                //here means that this is a new stock, and as we just update daily, the market value will be equal to its cost\r\n                const asset = state.currentPossesions.stocks. find(asset=>asset.ticker === poss.ticker)\r\n                marketVal = asset.amount * asset.unitaryCost\r\n            }\r\n            totalMarketVal += marketVal\r\n                arrByCompany = [...arrByCompany,\r\n                {\r\n                    ticker: poss.ticker,\r\n                    marketVal\r\n                }]\r\n        })\r\n        console.log(arrByCompany, \"elmarketall\")\r\n        return arrByCompany.map(item => {\r\n            item[\"proportion\"] = (item.marketVal / totalMarketVal) * 100\r\n            return item\r\n        })\r\n    }\r\n    const prepareData =(data, cb)=>{\r\n        cb(data.map(item=>[item.ticker, item.proportion]))\r\n    }\r\n    useEffect(() => {\r\n        if (stocks.length > 0 && state.areHistoricPricesReady) {\r\n            const data = getMarketValueByStock()\r\n            prepareData(data, (result)=>{\r\n                setReadyData(result)\r\n            })\r\n        }\r\n    }, [stocks, state.areHistoricPricesReady])\r\n    return (\r\n        <Paper>\r\n       { readyData.length && <DonutChart data={readyData}/>}\r\n    </Paper>\r\n    )\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\charts\\linechart.js",["489"],"import React from 'react'\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\n\r\nexport const Linechart = ({ data }) => {\r\n\r\n    console.log(data, \"poooooooooota\")\r\n    const options = {\r\n        // title: {\r\n        //     text: 'Solar Employment Growth by Sector, 2010-2016'\r\n        // },     \r\n        \r\n        series: [{\r\n            data: data.map(item=>item.close),\r\n            // data: [50, 40, 40, 30, 15, 12, 8, 22,40],\r\n            marker: {\r\n                enabled: false\r\n            },\r\n            animation: false,\r\n        }],\r\n        chart: {\r\n            type: 'line',\r\n            backgroundColor: 'black',\r\n            plotBorderWidth: null,\r\n            marginTop: 0,\r\n            marginBottom: 0,\r\n            marginLeft: 0,\r\n            plotShadow: false,\r\n            borderWidth: 0,\r\n            plotBorderWidth: 0,\r\n            marginRight: 0\r\n        },\r\n        tooltip: {\r\n            userHTML: true,\r\n            style: {\r\n                padding: 0,\r\n                width: 0,\r\n                height: 0,\r\n            },\r\n            formatter: function () {\r\n                return this.point.residents;\r\n            },\r\n        },\r\n        title: {\r\n            text: ''\r\n        },\r\n        xAxis: {\r\n            enabled: false,\r\n            showEmpty: false,\r\n        },\r\n        yAxis: {\r\n            min: 0,\r\n            title: {\r\n                text: ''\r\n            },\r\n            showEmpty: false,\r\n            enabled: false\r\n        },\r\n        credits: {\r\n            enabled: false\r\n        },\r\n        legend: {\r\n            enabled: false\r\n        },\r\n        plotOptions: {\r\n            line: {\r\n                lineWidth: 1.5,\r\n            },\r\n            showInLegend: false,\r\n            tooltip: {}\r\n        },\r\n        \r\n\r\n\r\n        // responsive: {\r\n        //     rules: [{\r\n        //         condition: {\r\n        //             maxWidth: 500\r\n        //         },\r\n        //         chartOptions: {\r\n        //             legend: {\r\n        //                 layout: 'vertical',\r\n        //                 align: 'center',\r\n        //                 verticalAlign: 'bottom'\r\n        //             }\r\n        //         }\r\n        //     }]\r\n        // }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            { data && <HighchartsReact\r\n                highcharts={Highcharts}\r\n                options={options}\r\n                containerProps={{ style: { height: \"100%\" } }}\r\n            />}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","C:\\Users\\gonza\\finance-app\\src\\components\\TransitionComponent.js",["490","491","492","493","494"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    position: 'relative',\r\n  },\r\n  title: {\r\n    marginLeft: theme.spacing(2),\r\n    flex: 1,\r\n  },\r\n}));\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport function TransitionComponent({children, open, setOpenChartModal}) {\r\n  const classes = useStyles();\r\n  //const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n      return\r\n    //setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n      return\r\n    //setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\r\n        <AppBar className={classes.appBar}>\r\n          <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" onClick={()=>{setOpenChartModal(false)}} aria-label=\"close\">\r\n              <CloseIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              Sound\r\n            </Typography>\r\n            <Button autoFocus color=\"inherit\" onClick={handleClose}>\r\n              save\r\n            </Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n        {children}\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}",["495","496"],"C:\\Users\\gonza\\finance-app\\src\\Auth\\Register.js",["497","498"],"import React, { useEffect, useState } from 'react'\r\nimport { useUserLayer } from '../UserContext'\r\nimport { useDebounce } from '../utils/useDebounce'\r\n\r\nexport const Register = () => {\r\n    const [username, setUsername] = useState(\"\")\r\n    const [email, setEmail] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [rpassword, setRpassword] = useState(\"\")\r\n    const { userDispatch } = useUserLayer()\r\n    const [serverError, setServerError] = useState(null)\r\n    const [success, setSuccess] = useState(false)\r\n    const [fieldChanging, setFieldChanging] = useState(\"\")\r\n    const { debouncedQuery } = useDebounce({ username, email }, fieldChanging, 800)\r\n    const [validatedFields, setValidatedFields] = useState(\r\n        {\r\n            email: { error: null, valid: null },\r\n            username: { error: null, valid: null }\r\n        }\r\n\r\n    )\r\n\r\n    useEffect(() => {\r\n        if (!email) return;\r\n\r\n        fetch(\"http://localhost:8001/api/v1/validation/email\", {\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({ email }),\r\n            method: \"POST\"\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                if (!res.ok) throw new Error(res.msg)\r\n                setValidatedFields(prev => ({\r\n                    ...prev,\r\n                    email: { error: null, valid: true }\r\n                }))\r\n            })\r\n            .catch(err => {\r\n                console.log(err, \"error\")\r\n                setValidatedFields(prev => ({\r\n                    ...prev,\r\n                    email: { valid: null, error: err.message }\r\n                }))\r\n            })\r\n    }, [debouncedQuery.email])\r\n\r\n    useEffect(() => {\r\n        if (!username) return;\r\n\r\n        fetch(\"http://localhost:8001/api/v1/validation/users\", {\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({ username }),\r\n            method: \"POST\"\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                if (!res.ok) throw new Error(res.msg)\r\n                setValidatedFields(prev => ({\r\n                    ...prev,\r\n                    username: { error: null, valid: true }\r\n                }))\r\n            })\r\n            .catch(err => {\r\n                console.log(err, \"error\")\r\n                setValidatedFields(prev => ({\r\n                    ...prev,\r\n                    username: { valid: null, error: err.message }\r\n                }))\r\n            })\r\n    }, [debouncedQuery.username])\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if (rpassword !== password) {\r\n            alert(\"password don't match\")\r\n            return\r\n        }\r\n        handleRegister()\r\n    }\r\n    const handleRegister = () => {\r\n        fetch(\"http://localhost:8001/api/v1/auth/register\", {\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({ username, email, password }),\r\n            method: \"POST\"\r\n        })\r\n            .then(res => {\r\n                if (!res.ok) throw new Error(\"what the hell\");\r\n                return res\r\n            })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                userDispatch({ type: \"SET_TOKEN\", paylod: res.token })\r\n                userDispatch({ type: \"SET_USER\", payload: { email } })\r\n                localStorage.setItem(\"token\", JSON.stringify(res.token))\r\n                setSuccess(true)\r\n            })\r\n            .catch(err => { setServerError(err.message) })\r\n    }\r\n\r\n    if (success) {\r\n        return <p>successs</p>\r\n    }\r\n    if (serverError) {\r\n        return <p>{serverError}</p>\r\n    }\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit}>\r\n                <label for=\"username\">\r\n                    username\r\n                    <input type=\"text\" value={username}\r\n                        name=\"username\"\r\n                        onChange={(e) => {\r\n                            setUsername(e.target.value);\r\n                            setFieldChanging(\"username\");\r\n                        }}\r\n                        required\r\n                    />\r\n                </label>\r\n                {validatedFields.username.error && <p>{validatedFields.username.error}</p>}\r\n                {validatedFields.username.valid && <p>valid username</p>}\r\n                <label for=\"email\">\r\n                    email\r\n                    <input type=\"email\" value={email}\r\n                        name=\"email\"\r\n                        onChange={(e) => {\r\n                            setEmail(e.target.value);\r\n                            setFieldChanging(\"email\");\r\n                        }}\r\n                        required\r\n                    />\r\n                </label>\r\n                {validatedFields.email.error && <p>{validatedFields.email.error}</p>}\r\n                {validatedFields.email.valid && <p>valid email</p>}\r\n                <label for=\"password\">\r\n                    password\r\n                    <input type=\"password\" value={password}\r\n                        name=\"password\"\r\n                        onChange={(e) => { setPassword(e.target.value) }}\r\n                        required />\r\n                </label>\r\n                <label for=\"rpassword\">\r\n                    repeat password\r\n                    <input type=\"password\" value={rpassword}\r\n                        name=\"rpassword\"\r\n                        onChange={(e) => { setRpassword(e.target.value) }}\r\n                        required />\r\n                </label>\r\n                <button type=\"submit\">submit</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\Auth\\useIAuth.js",["499","500","501","502","503"],"import React, { useState, useEffect } from 'react'\r\nimport { useUserLayer } from '../UserContext'\r\n\r\nexport const useIAuth = () => {\r\n    const [hasPermission, setHasPermission] = useState(false)\r\n    const [loading, setLoading] = useState(true)\r\n    const { userState, userDispatch } = useUserLayer()\r\n    useEffect(() => {\r\n        setLoading(true)\r\n        fetch(\"http://localhost:8001/api/v1/auth/post\", {\r\n            headers: {\r\n                \"Authorization\": `bearer ${userState.token}`\r\n            },\r\n        }).then(res => {\r\n            console.log(res, \"resposns\")\r\n            if (!res.ok) throw new Error(\"token not valid\")\r\n            console.log(\"success nena\", res)\r\n            setHasPermission(true)\r\n            setLoading(false)\r\n        })\r\n            .catch(err => {\r\n                setHasPermission(false)\r\n                setLoading(false)\r\n                console.log(err.message)\r\n            })\r\n    }, [])\r\n    return { hasPermission, loading }\r\n}\r\nexport const useIAuthh = () => {\r\n    const [loading, setLoading] = useState(true)\r\n    const { userState, userDispatch } = useUserLayer()\r\n    useEffect(() => {\r\n        //if there's no token user will have to login\r\n        if (!userState.token) {\r\n            setLoading(false)\r\n            userDispatch({ type: \"SET_USER_NULL\" })\r\n            return\r\n        }\r\n        //if there's token we have to check if it's valid\r\n        else if (userState.token) {\r\n            setLoading(true)\r\n            fetch(\"http://localhost:8001/api/v1/auth/post\", {\r\n                headers: {\r\n                    \"Authorization\": `bearer ${userState.token}`\r\n                },\r\n            })\r\n                .then(res => {\r\n                    if (!res.ok) throw new Error(\"token not valid\");\r\n                    return res\r\n                })\r\n                .then(res => res.json())\r\n                //if token is valid we extract the userData from the token itself and send it to the client\r\n                .then(res => {\r\n                    console.log(res, \"resposns\")\r\n                    userDispatch({ type: \"SET_USER\", payload: { email: res.userData.email } })\r\n                    console.log(\"success nena\", res)\r\n                    setLoading(false)\r\n                })\r\n\r\n                .catch(err => {\r\n                    setLoading(false)\r\n                    //necesary to initialize components that needs to know if user information is ready, like FOllowingDispatcher\r\n                    userDispatch({ type: \"SET_USER_NULL\" })\r\n                    console.log(err.message)\r\n                })\r\n        }\r\n    }, [])\r\n}\r\n\r\n// export const useAuthLogin = (setHasTried, hasTried) => {\r\n//     const [hasPermission, setHasPermission] = useState(false)\r\n//     const [loading, setLoading] = useState(true)\r\n//     const { userState: { token } } = useUserLayer()\r\n//     useEffect(() => {\r\n//         if (hasTried) {\r\n//             setLoading(true)\r\n//             fetch(\"http://localhost:8001/api/v1/auth/post\", {\r\n//                 headers: {\r\n//                     \"Authorization\": `bearer ${token}`\r\n//                 },\r\n//             }).then(res => {\r\n//                 console.log(res, \"resposns\")\r\n//                 if (!res.ok) throw new Error(\"token not valid\")\r\n//                 setHasTried(false)\r\n//                 console.log(\"success nena\", res)\r\n//                 setHasPermission(true)\r\n//                 setLoading(false)\r\n//             })\r\n//                 .catch(err => {\r\n//                     setHasPermission(false)\r\n//                     setLoading(false)\r\n//                     setHasTried(false)\r\n//                     console.log(err.message)\r\n//                 })\r\n//         }\r\n//     }, [hasTried])\r\n//     return { hasPermission, loading }\r\n// }\r\n",["504","505"],"C:\\Users\\gonza\\finance-app\\src\\dashboard\\Middleware2.js",["506","507","508","509","510","511","512","513","514","515"],"import { Paper } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { useDataLayer } from '../Context'\r\n// import { useEngine } from '../portfolio/Engine'\r\nimport { PortfolioPriceChart } from '../portfolio/PortfolioPriceChart'\r\nimport { useCompaniesChange } from '../portfolio/useCompaniesChange'\r\nimport { useUserLayer } from '../UserContext'\r\nimport { AssetStructure } from './AssetStructure'\r\nimport { LateralSection } from './LateralSection'\r\nimport { Marcador2 } from './Marcador2'\r\nimport { PerformanceStructure } from './PerformanceStructure'\r\nimport { PerformanceStructureB } from './PerformanceStructureB'\r\nimport { Positions } from './Positions'\r\nimport {usePortfolioGenerator} from \"../portfolio/portfolioGenerator2\"\r\n\r\nexport const Middleware = (props) => {\r\n    usePortfolioGenerator()\r\n    const Component = props.component\r\n    const { state } = useDataLayer()\r\n    const { portfolioSeriesReady, stockLibrary } = state\r\n    const { userState } = useUserLayer()\r\n    const [dataReady, setDataReady] = useState(false)\r\n    const [quotes, setQuotes] = useState(null)\r\n    //we need to check that potfolio history is not empty before render userMain\r\n    //and we need to check we have all posesion's historical prices\r\n    \r\n    const { available, loading } = useCompaniesChange()\r\n\r\n    if (!userState.isAuthenticated) {\r\n        return <Redirect to={{ pathname: \"/pruebaLogin\" }} />\r\n    }\r\n    return ( \r\n        //tenemos que crear un useEngine para generar el portfolioHistory\r\n        <div>\r\n            <div class=\"dasboard-grid--desktop\">\r\n                <div className=\"principal\">\r\n\r\n                    {/* <div>\r\n                {posessionsReady ?\r\n                    <Component /> : <div>loading...</div>}\r\n            </div> */}\r\n\r\n                    {portfolioSeriesReady ? \r\n                    <PortfolioPriceChart datos={state.portfolioSeries} \r\n                    title=\"profitability over investment\"\r\n                    //quotes={quotes}\r\n                    /> \r\n                    : <p>Loading...</p>}\r\n                    <PerformanceStructure {...{ available, loading }} />\r\n                    <PerformanceStructureB />\r\n                </div>\r\n                <div className=\"secondary\">\r\n                    <Positions />\r\n                    <AssetStructure />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\App.js",["516","517","518","519","520","521","522","523","524","525","526","527","528","529"],"C:\\Users\\gonza\\finance-app\\src\\components\\Navbar.js",["530","531","532","533","534","535","536","537"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport clsx from \"clsx\";\r\nimport { Chip, Tab, Tabs, useTheme } from \"@material-ui/core\";\r\nimport { useHistory, useLocation } from \"react-router-dom\"\r\nimport { useDataLayer } from \"../Context\";\r\nimport { useUILayer } from \"../ContextUI\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useMesure } from \"../utils/useMesure\";\r\nimport { Transition } from \"react-transition-group\";\r\nimport { formatter } from \"../utils/numFormatter\";\r\nimport { useOktaAuth } from '@okta/okta-react';\r\nimport { CompanyNav } from \"./subNavigations/CompanyNav\";\r\nimport { useUserLayer } from \"../UserContext\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n}));\r\n\r\nexport const Navbar = ({ handleDrawerOpen }) => {\r\n  //const { authState, authService } = useOktaAuth();\r\n  const history = useHistory()\r\n  const { state } = useDataLayer()\r\n  const { sidebarOpen } = useUILayer()\r\n  const location = useLocation()\r\n  const topNavigation = useRef(null)\r\n  const [menuCompaniesOpen, setMenuCompaniesOpen] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const masterRoute = location.pathname.split(\"/\").filter(item => item !== \"\")\r\n    console.log(masterRoute[0], \"first pathname query\")\r\n    if (masterRoute[0] === \"companies\") {\r\n      setMenuCompaniesOpen(true)\r\n    }\r\n    else {\r\n      console.log(\"ahora es falso\")\r\n      setMenuCompaniesOpen(false)\r\n    }\r\n\r\n  }, [location])\r\n\r\n  console.log(location, \"locationnnnnn\")\r\n\r\n\r\n  const classes = useStyles();\r\n\r\n\r\n\r\n  // const button = authState.isAuthenticated ?\r\n  //   <button onClick={() => { authService.logout() }}>Logout</button> :\r\n  //   <button onClick={() => { history.push('/login') }}>Login</button>;\r\n\r\n  const { userDispatch } = useUserLayer()\r\n  const logout = (cb) => {\r\n    userDispatch({ type: \"SET_USER_NULL\" })\r\n    cb()\r\n  }\r\n  return (\r\n    <div>\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: sidebarOpen,\r\n        })}\r\n        ref={topNavigation}\r\n      >\r\n        <Toolbar>\r\n          <IconButton\r\n\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            edge=\"start\"\r\n            className={clsx(classes.menuButton, {\r\n              [classes.hide]: sidebarOpen,\r\n            })}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap>\r\n            {menuCompaniesOpen ? state.currentCompany.name : \"FinnTrack\"}\r\n          </Typography>\r\n          <div\r\n            style={{ marginLeft: \"auto\", display: \"flex\", alignItems: \"centeryyy\" }}\r\n          >\r\n            <Button variant=\"contained\" color=\"primary\"\r\n              onClick={() => { history.push(\"/login\") }}\r\n            >login</Button>\r\n            <Button variant=\"contained\" color=\"primary\"\r\n              onClick={() => { logout(() => history.push(\"/login\")) }}\r\n            >Logout</Button>\r\n            <Button\r\n              onClick={() => { history.push(\"/portfoliof\") }}\r\n              variant=\"contained\"\r\n            >\r\n              Investment Dashboard\r\n            </Button>\r\n            <Typography>\r\n              {formatter.format(state.currentPossesions.userCash)} $\r\n            </Typography>\r\n          </div>\r\n          <button onClick={() => { history.push(\"/interests\") }}>interests</button>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <CompanyNav {...{ menuCompaniesOpen, topNavigation }} />\r\n    </div>\r\n  );\r\n};\r\n\r\n","C:\\Users\\gonza\\finance-app\\src\\portfolio\\portfolioGenerator2.js",["538","539","540","541","542","543","544","545","546","547","548","549","550"],"C:\\Users\\gonza\\finance-app\\src\\index.js",["551","552","553"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"./styles/main.css\"\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport { ContextProvider } from './Context';\nimport { UIProvider } from './ContextUI';\nimport { AppWithRouterAccess } from './AppWithRouterAccess';\nimport { UserContext } from './UserContext';\n\n//hasrouter won't work with okta\nReactDOM.render(\n  <React.StrictMode>\n    <UserContext>\n      <ContextProvider>\n        <UIProvider>\n          <BrowserRouter>\n            <AppWithRouterAccess />\n          </BrowserRouter>\n        </UIProvider>\n      </ContextProvider>\n    </UserContext>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n{/*</Security> */ }\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","C:\\Users\\gonza\\finance-app\\src\\useTemporaryPossesions.js",["554","555","556"],"import React, { useEffect, useRef } from 'react'\r\nimport { useDataLayer } from './Context'\r\nimport { userActivity } from './portfolio/logicPruebasConAdd'\r\n\r\nexport const useTemporaryPossesions = () => {\r\n    const { state, dispatch } = useDataLayer()\r\n    const length = useRef(0)\r\n    const iteration = useRef(0)\r\n    useEffect(() => {\r\n        if (state.userActivity.length > 0) {\r\n            length.current = state.userActivity.length\r\n            userActivity.forEach((op, index, arr) => {\r\n                console.log(index, \"opixxo\")\r\n                dispatch({\r\n                    type: \"ADD_PORTFOLIO_CURRENT_POSSESIONS\",\r\n                    payload: {\r\n                        ticker: op.details.ticker,\r\n                        amount: op.details.amount,\r\n                        operationType: op.operationType,\r\n                        cashNetOperation: 0\r\n                    }\r\n                })\r\n                dispatch({\r\n                    type: \"ADD_UNIQUE_STOCKS\",\r\n                    payload: {\r\n                        ticker: op.details.ticker,\r\n                    }\r\n                })\r\n                index + 1 === arr.length && dispatch({ type: \"ENABLE\" })\r\n\r\n            })\r\n        }\r\n    }, [state.userActivity])\r\n\r\n    // useEffect(() => {\r\n    //     iteration.current += 1\r\n    //     console.log(\"botonto\")\r\n    //     console.log(iteration.current, length.current, \"zorrona\")\r\n    //     if (iteration.current === 2) {\r\n    //         dispatch({ type: \"ENABLE\" })\r\n    //     }\r\n    // }, [state.currentPossesions])\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\useAuth.js",["557","558","559"],"import { useOktaAuth } from \"@okta/okta-react\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useUserLayer } from \"./UserContext\"\r\n\r\nconst useAuth = () => {\r\n  const { authState, authService } = useOktaAuth();\r\n  const { userDispatch } = useUserLayer()\r\n\r\n  useEffect(() => {\r\n    if (!authState.isAuthenticated) {\r\n      // When user isn't authenticated, forget any user info\r\n      userDispatch({ type: \"SET_USER_NULL\" })\r\n    } else {\r\n      authService.getUser().then(info => {\r\n        console.log(\"setting user\", info)\r\n        if (!info) {\r\n          userDispatch({ type: \"SET_USER_NULL\" })\r\n        } else {\r\n          userDispatch({ type: \"SET_USER\", payload: info })\r\n        }\r\n      });\r\n    }\r\n  }, [authState, authService]); // Update if authState changes\r\n\r\n};\r\n\r\nexport default useAuth;","C:\\Users\\gonza\\finance-app\\src\\SignIn2.js",["560","561","562"],"import React, { useContext, useRef, useState } from 'react'\r\nimport { Context } from \"./Context\"\r\nimport { Formik, useField, Form } from \"formik\"\r\nimport { TextField, Button, Paper, makeStyles } from \"@material-ui/core\"\r\nimport * as yup from 'yup';\r\nimport { OktaAuth } from '@okta/okta-auth-js';\r\nimport { useOktaAuth } from '@okta/okta-react';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: \"100%\",\r\n        marginBottom: \"1.5rem\"\r\n    }\r\n})\r\nexport default function Formm({ issuer }) {\r\n    const { authService } = useOktaAuth();\r\n    const [sessionToken, setSessionToken] = useState();\r\n    const userData = useRef(\"\")\r\n    const classes = useStyles()\r\n    const CustomTextField = ({ label, ...props }) => {\r\n\r\n        const [field, meta] = useField(props)\r\n        const errorText = meta.error && meta.touched ? meta.error : \"\";\r\n        return (<TextField\r\n            label={label}\r\n            {...field}\r\n            {...props}\r\n            helperText={errorText}\r\n            error={!!errorText}\r\n            variant=\"outlined\"\r\n            classes={{ root: classes.root }}\r\n            autoComplete=\"off\"\r\n\r\n        />)\r\n    }\r\n\r\n    const validationSchema = yup.object({\r\n        username: yup\r\n            .string()\r\n            .required()\r\n            .max(100),\r\n        email: yup\r\n            .string()\r\n            .email()\r\n            .required()\r\n            .max(100),\r\n        apellido: yup\r\n            .string()\r\n            .required()\r\n            .max(100),\r\n        password: yup\r\n            .string()\r\n            .required()\r\n            .max(10000),\r\n    });\r\n\r\n    console.log(validationSchema, \"validacion\")\r\n    const handleSubmit = (values) => {\r\n        const { email, password } = values\r\n\r\n        const oktaAuth = new OktaAuth({\r\n            // If your app is configured to use the Implicit Flow\r\n            // instead of the Authorization Code with Proof of Code Key Exchange (PKCE)\r\n            // you will need to uncomment the below line:\r\n            // pkce: false,\r\n            issuer: issuer\r\n        });\r\n        oktaAuth.signIn({ username: email, password })\r\n            .then(res => {\r\n                const sessionToken = res.sessionToken;\r\n                setSessionToken(sessionToken);\r\n                // sessionToken is a one-use token, so make sure this is only called once\r\n                authService.redirect({ sessionToken });\r\n            })\r\n            .catch(err => console.log('Found an error', err));\r\n    };\r\n\r\n    const handleSubmita = (e) => {\r\n        console.log(e.value, \"suuumitao\")\r\n    }\r\n    console.log(userData.current, \"userData\")\r\n\r\n\r\n\r\n    if (sessionToken) {\r\n        // Hide form while sessionToken is converted into id/access tokens\r\n        return null;\r\n    }\r\n\r\n\r\n    return (\r\n        <div >\r\n\r\n            <Formik initialValues={{\r\n                username: \"\",\r\n                email: \"\",\r\n                password: \"\"\r\n            }}\r\n\r\n                validationSchema={validationSchema}\r\n                validateOnChange={true}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    console.log(\"trolaos maricon\")\r\n                    setTimeout(() => {\r\n                        handleSubmit(values)\r\n                        setSubmitting(false);\r\n                    }, 400);\r\n                }}\r\n            >\r\n\r\n                {(({ values, handleChange, handleBlur, handleSubmit, errors }) => {\r\n                    return (\r\n                        <Paper\r\n                            elevation={3}\r\n                            className=\"form-wrap\"\r\n                        >\r\n                            <h1 className=\"header-form\">Contact Me!</h1>\r\n                            <Form\r\n                                style={{ textAlign: \"left\", padding: \"1.5rem\" }}\r\n                            >\r\n                                <input type=\"hidden\" name=\"form-name\" value=\"form1\" />\r\n                                <div className=\"wrap-input\">\r\n                                    <CustomTextField\r\n                                        required\r\n                                        name=\"username\"\r\n                                        label=\"username\"\r\n                                    />\r\n                                </div>\r\n                                <div className=\"wrap-input\">\r\n                                    <CustomTextField\r\n                                        required\r\n                                        name=\"email\"\r\n                                        label=\"email\"\r\n                                    />\r\n                                </div>\r\n                                <div className=\"wrap-input\">\r\n                                    <CustomTextField\r\n                                        required\r\n                                        name=\"password\"\r\n                                        label=\"password\"\r\n                                    />\r\n                                </div>\r\n                                <Button type=\"submit\"\r\n                                    color=\"primary\"\r\n                                    size=\"large\"\r\n                                    variant=\"contained\"\r\n                                    disabled={Object.keys(errors).length > 0}\r\n                                >Submit</Button>\r\n                            </Form>\r\n                        </Paper>\r\n                    )\r\n                })}\r\n            </Formik>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\SignIn.js",[],"C:\\Users\\gonza\\finance-app\\src\\RegistrationForm.js",[],"C:\\Users\\gonza\\finance-app\\src\\components\\Overlay.js",[],"C:\\Users\\gonza\\finance-app\\src\\charts\\KeymetricsChart.js",["563"],"import React, { useEffect, useRef, useState } from 'react'\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport { useParams } from \"react-router-dom\"\r\nimport { useFetch } from '../utils/useFetch';\r\nimport { Multioption } from '../components/Multioption';\r\n//those are historical\r\nexport const KeymetricsChart = () => {\r\n    const { company } = useParams()\r\n    const url = `https://financialmodelingprep.com/api/v3/key-metrics/${company.toUpperCase()}?apikey=651d720ba0c42b094186aa9906e307b4`\r\n    \r\n    const [dataset, setDataset] = useState({})\r\n    const hookOptions = {\r\n        explicitUrl: true\r\n    }\r\n\r\n\r\n    const [chosenFields, setChosenFields] = useState(\r\n        [\"tangibleBookValuePerShare\", \"shareholdersEquityPerShare\", \"interestDebtPerShare\"])\r\n\r\n    const { datos, loading, error } = useFetch(url, company, \"metricsHistorical\", hookOptions)\r\n    useEffect(()=>{\r\n        fetch(\"https://financialmodelingprep.com/api/v3/key-metrics/AMZN?apikey=651d720ba0c42b094186aa9906e307b4\")\r\n        .then(res=>res.json())\r\n        .then(resa=>{console.log(resa, \"resa\")})\r\n        .catch(err=>{console.log(err, \"puto error\")})\r\n    },[])\r\n\r\n    const datasetBuilder = (data) => {\r\n        let masterObject = {}\r\n        Object.keys(data[0]).forEach(item => {\r\n            masterObject[item] = []\r\n        })\r\n        data.forEach(record => {\r\n            Object.keys(record).forEach(item => {\r\n                masterObject[item] = [...masterObject[item], record[item]]\r\n            })\r\n        })\r\n        console.log(masterObject, \"master\")\r\n        return masterObject\r\n    }\r\n    useEffect(() => {\r\n        console.log(\"momop\", datos, datos.length)\r\n        if (datos.length > 0) {\r\n            console.log(\"momo\")\r\n            let readyData = datasetBuilder(datos)\r\n            setDataset(readyData)\r\n        }\r\n    }, [datos])\r\n\r\n\r\n    console.log(datos, \"mammmmma\")\r\n\r\n    const options = {\r\n        chart: {\r\n            type: \"spline\"\r\n        },\r\n        title: {\r\n            text: 'Solar Employment Growth by Sector, 2010-2016'\r\n        },\r\n\r\n        // subtitle: {\r\n        //     text: 'Source: thesolarfoundation.com'\r\n        // },\r\n\r\n        // yAxis: {\r\n        //     title: {\r\n        //         text: 'Number of Employees'\r\n        //     }\r\n        // },\r\n\r\n        // xAxis: {\r\n        //     accessibility: {\r\n        //         rangeDescription: 'Range: 2014 to 2017'\r\n        //     }\r\n        // },\r\n        // xAxis: [{\r\n        //     labels: {\r\n        //         formatter: function () {\r\n        //             const arr = dataset.date[0].split(\"-\")\r\n        //             const arrint = arr.map(item=>parseFloat(item))\r\n        //             return Highcharts.dateFormat('%Y %M %d', new Date(arrint));\r\n        //         }\r\n        //     }\r\n        // }],\r\n        xAxis:{\r\n            allowDecimals: false\r\n        },\r\n        legend: {\r\n            layout: 'vertical',\r\n            align: 'center',\r\n            verticalAlign: 'bottom'\r\n        },\r\n        height: 500,\r\n        plotOptions: {\r\n            series: {\r\n                label: {\r\n                    connectorAllowed: false\r\n                },\r\n                pointStart: 2014\r\n            }\r\n        },\r\n        series: Object.keys(dataset).length > 0 && chosenFields.map(field => {\r\n            console.log(dataset, \"dooota\")\r\n            return ({\r\n                name: field,\r\n                data: dataset[field]\r\n            }\r\n            )\r\n        })\r\n        ,\r\n\r\n        responsive: {\r\n            rules: [{\r\n                condition: {\r\n                    maxWidth: 500\r\n                },\r\n                chartOptions: {\r\n                    legend: {\r\n                        layout: 'vertical',\r\n                        align: 'center',\r\n                        verticalAlign: 'bottom'\r\n                    }\r\n                }\r\n            }]\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {loading && <p>laoding...</p>}\r\n            {error && <p>{error}</p>}\r\n            {Object.keys(dataset).length > 0 &&\r\n                <div style={{ display: \"flex\", marginTop: \"100px\", height: \"550px\", justifyContent: \"flexEnd\" }}>\r\n                    <HighchartsReact\r\n                        highcharts={Highcharts}\r\n                        options={options}\r\n                        containerProps={{ style: { flex: 1 } }}\r\n                    />\r\n                    <Multioption\r\n                        fields={dataset}\r\n                        setChosenFields={setChosenFields}\r\n                        chosenFields={chosenFields}\r\n                    />\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","C:\\Users\\gonza\\finance-app\\src\\Auth\\ProtectedRoute.js",["564"],"import React, { useEffect } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { useIAuth } from './useIAuth'\r\n\r\nexport const ProtectedRoute = () => {\r\n\r\n    const { hasPermission, loading } = useIAuth()\r\n    //ojo loading tiene que empezar como true\r\n    if (loading) {\r\n        return <p>loading..</p>\r\n    }\r\n    return (\r\n        <>\r\n            { hasPermission ?\r\n                <div>\r\n                    Mira que horto,\r\n\r\n                    sip estás autenticado\r\n        </div>\r\n                :\r\n                // <p>no estas auth</p>\r\n                <Redirect to={{ pathname: \"/pruebaLogin\" }} />\r\n            }\r\n        </>\r\n    )\r\n}\r\n",["565","566"],"C:\\Users\\gonza\\finance-app\\src\\views\\indexes\\IndexesController.js",["567","568"],"import React from 'react'\r\nimport { useParams } from \"react-router-dom\"\r\nimport { BigIndex } from './BigIndex'\r\nimport { IndexesGeneral } from './IndexesGeneral'\r\nimport { Nasdaq } from './Nasdaq'\r\nimport { SP500 } from './SP500'\r\n\r\n//queda pendiente poner el registro completo con csv \r\nexport const IndexesController = () => {\r\n    const { field } = useParams()\r\n    const bigIndexes = [\"sp500\", \"nasdaq\", \"dowjones\"]\r\n    console.log(field, \"campu\")\r\n    return (\r\n        <>\r\n            {bigIndexes.includes(field) ?\r\n                <BigIndex index={field}/>\r\n                : <IndexesGeneral />}\r\n        </>\r\n    )\r\n}\r\n",["569","570"],"C:\\Users\\gonza\\finance-app\\src\\views\\seguidores\\PopulateOnScroll.js",["571","572"],"import { debounce } from '@material-ui/core'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { useIntersection } from 'react-use'\r\n\r\nexport const PopulateOnScroll = ({ children }) => {\r\n    const [chunkCount, setChunkCount] = useState(0)\r\n    const [isDataReadyScroll, _setIsDataReadyScroll] = useState(false)\r\n    const [currentChunk, setCurrentChunk] = useState(1)\r\n    const interestionRef = useRef(null)\r\n    const intersection = useIntersection(interestionRef, {\r\n        root: null,\r\n        rootMargin: \"0px\",\r\n        threshold: 1\r\n    })\r\n\r\n    const debounce = useRef(false)\r\n    useEffect(() => {\r\n        console.log(intersection, \"interseccion baby\")\r\n        if (!isDataReadyScroll) return;\r\n        if (intersection && intersection.intersectionRatio < 1.5 && currentChunk <= chunkCount) {\r\n            console.log(\"interesected\")\r\n            if (!debounce.current) {\r\n                debounce.current = true\r\n                setCurrentChunk(prev => prev + 1)\r\n                console.log(\"intersection crossed\")\r\n                let timeout = setTimeout(() => {\r\n                    debounce.current = false\r\n                    clearTimeout(timeout)\r\n                }, 800)\r\n            }\r\n        }\r\n    }, [intersection])\r\n    return (\r\n        <div>\r\n            {children({ setChunkCount, _setIsDataReadyScroll, currentChunk })}\r\n            {/* <div style={{ height: \"20px\" }}\r\n                ref={interestionRef}\r\n            >\r\n            </div> */}\r\n\r\n                <div style={{ height: \"20px\" }}\r\n                    ref={interestionRef}\r\n                >\r\n                </div>\r\n          \r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\SignInForm.js",[],"C:\\Users\\gonza\\finance-app\\src\\utils\\useViewport.js",["573"],"import React, { useEffect, useState } from 'react'\r\n\r\nexport const useViewport = () => {\r\n    const [viewport, setViewport] = useState(window.innerWidth)\r\n    const updateViewport = () => {\r\n        setViewport(window.innerWidth)\r\n    }\r\n    useEffect(() => {\r\n\r\n        window.addEventListener(\"resize\", updateViewport)\r\n        return () => {\r\n            window.removeEventListener(\"resize\", updateViewport)\r\n        }\r\n    }, [])\r\n    return { viewport }\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\portfolio\\PortfolioPriceChart.js",["574","575","576"],"import React, { useState, useEffect, useRef } from 'react'\r\nimport Highcharts, { chart } from \"highcharts/highstock\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport { useChartReflow } from '../utils/useChartReflow';\r\nimport { Paper } from '@material-ui/core';\r\nimport { useDataLayer } from '../Context';\r\nimport { convertUnixToHuman } from '../utils/datesUtils';\r\n\r\nHighcharts.setOptions({\r\n    global: {\r\n        useUTC: false\r\n    }\r\n});\r\n\r\n\r\nexport const PortfolioPriceChart = ({ datos, title }) => {\r\n\r\n    const chart = useRef(null)\r\n    useChartReflow(chart.current)\r\n    const { state: { addFirstSerie } } = useDataLayer()\r\n    const [dataset, setDataset] = useState(\"\")\r\n    const [availableTomorrow, setAvailableTomorrow] = useState(false)\r\n\r\n    //la fecha de la grafica siempre es un dia menos respecto a las generatedseries\r\n\r\n    const prepareData = () => {\r\n        let cleanData = [];\r\n        Object.keys(datos).forEach(date => {\r\n            console.log(date, \"duuta\")\r\n            const actualDate = date.split(\"-\").map((val) => parseInt(val));\r\n            const formatedDate = new Date(\r\n                actualDate[0],\r\n                actualDate[1] - 1,\r\n                actualDate[2]\r\n            );\r\n            console.log(formatedDate, \"ttiiimo\")\r\n            const unixTime = formatedDate.getTime();\r\n            console.log(new Date(unixTime), \"huuuuuuuuuue\")\r\n            cleanData.push({ ...datos[date], date: unixTime })\r\n        })\r\n        let readyData = cleanData.map(item => ([item.date, item.liquidativeValue]))\r\n        //prepend first point in 1000pts in firstDate \r\n        if (addFirstSerie) {\r\n\r\n        }\r\n        console.log(readyData, \"dataridi\")\r\n        setDataset(readyData)\r\n    }\r\n\r\n    const simulateSerie = () => {\r\n        let readyData = []\r\n        const firstOpTime = JSON.parse(localStorage.getItem(\"firstDate\"))\r\n        readyData = [...readyData, [firstOpTime, 1000]]\r\n        //should be only one\r\n        const key = Object.keys(datos)[0]\r\n        const currentLiquidative = datos[key].liquidativeValue\r\n        readyData = [...readyData, [Date.now(), currentLiquidative]]\r\n        setDataset(readyData)\r\n    }\r\n    useEffect(() => {\r\n        if (datos) {\r\n            if (addFirstSerie) {\r\n                simulateSerie()\r\n                return\r\n            }\r\n            prepareData(datos)\r\n\r\n        } else {\r\n            setAvailableTomorrow(true)\r\n        }\r\n\r\n    }, [datos])\r\n\r\n    const options = {\r\n        chart: {\r\n            type: \"spline\",\r\n            zoomType: \"x\",\r\n            events: {\r\n                selection: function (e) {\r\n                    e && console.log(e);\r\n                },\r\n                load: function (e) {\r\n                    chart.current = this\r\n                }\r\n            },\r\n            //width,\r\n            id: \"chart-stock\",\r\n            animation: {\r\n                duration: 225,\r\n            },\r\n        },\r\n        plotOptions: {\r\n            candlestick: {\r\n                color: \"red\",\r\n                upColor: \"rgb(22,177,87)\",\r\n                lineColor: \"red\",\r\n                upLineColor: \"rgb(22,177,87)\",\r\n                pointPadding: 0.02,\r\n            },\r\n        },\r\n\r\n        title: {\r\n            text: { title },\r\n            zoomType: \"x\",\r\n        },\r\n        rangeSelector: {\r\n            allButtonsEnabled: true,\r\n        },\r\n        navigator: {},\r\n        series: [\r\n            {\r\n                data: dataset,\r\n                dataGrouping: {\r\n                    units: [\r\n                        [\"day\", [1, 2, 3, 4, 5, 8, 16]],\r\n                        [\"week\", [1, 2, 3, 4]],\r\n                        [\"month\", [1, 2, 3, 4, 6]],\r\n                    ],\r\n                    smoothed: true,\r\n                },\r\n                // showInNavigator: true,\r\n            },\r\n        ],\r\n    };\r\n\r\n    return (\r\n        <Paper\r\n            className=\"portfolio-chart\"\r\n        >\r\n            {availableTomorrow && <p>Data is not available untill next day after you submited a operation, if you submited in weekend wait till monday</p>}\r\n            {\r\n                dataset &&\r\n                <HighchartsReact\r\n                    highcharts={Highcharts}\r\n                    options={options}\r\n                    constructorType={\"stockChart\"}\r\n\r\n                />}\r\n        </Paper>\r\n    )\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\dashboard\\Marcador.js",[],"C:\\Users\\gonza\\finance-app\\src\\components\\Searcher2.js",[],"C:\\Users\\gonza\\finance-app\\src\\views\\seguidores\\Post.js",["577","578"],"import { Badge, Chip } from '@material-ui/core';\r\nimport React, { useEffect, useState, useRef } from 'react'\r\nimport { time_ago } from \"../../utils/datesUtils\"\r\nimport ChatBubbleOutlineIcon from '@material-ui/icons/ChatBubbleOutline';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\n\r\n\r\n\r\nconst Post = ({ message, selectPost, isSelected = false }) => {\r\n    const [{ conversationData, error, loading }, setConversationData] = useState({ conversationData: null, error: null, loading: true })\r\n    const { user, created_at } = message\r\n    const time = useRef(time_ago(new Date(created_at).getTime()))\r\n\r\n    const getRandomNum = () => {\r\n        const randomLike = [0, 0, 1, 3, Math.round(Math.random() * 10)]\r\n        //console.log(randomLike, \"la arr\")\r\n        return randomLike[Math.round(Math.random() * 4)]\r\n    }\r\n    const randomNum = useRef(getRandomNum())\r\n    console.log(\"rereeenderoo\")\r\n    useEffect(() => {\r\n        //if (!isSelected) return;\r\n        console.log(\"mounting again\")\r\n        setConversationData(prev => ({ ...prev, loading: true }))\r\n        fetch(`https://api.stocktwits.com/api/2/streams/conversation/${message.id}.json`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                //error means no replies found for message\r\n                if (res.errors) {\r\n                    setConversationData({ error: true, conversationData: null, laoding: false })\r\n                }\r\n                setConversationData(prev =>\r\n                    ({ ...prev, conversationData: res, loading: false }))\r\n            })\r\n            .catch(err => {\r\n                setConversationData(prev =>\r\n                    ({ error: true, conversationData: null, laoding: false }))\r\n            })\r\n    }, [message])\r\n\r\n    if (message.entities) {\r\n        console.log(message.entities, \"entitieees\")\r\n    }\r\n    return (\r\n        <div className={isSelected ? \"post is-selected\" : \"post\"}\r\n            onClick={() => { selectPost(message) }}\r\n        >\r\n            <div className=\"post-avatar\">\r\n                <img className=\"avatar\" src={user.avatar_url} alt={user.username} />\r\n            </div>\r\n            <div className=\"post-body\">\r\n                <div className=\"post-header\">\r\n                    {message.entities.sentiment ?\r\n                        <Chip\r\n                            size=\"small\"\r\n                            label={message.entities.sentiment.basic}\r\n                        />\r\n                        : null\r\n                    }\r\n                    <span>\r\n                        {time.current}\r\n                    </span>\r\n                </div>\r\n                <p>\r\n                    {message.body}\r\n                </p>\r\n                <div className=\"post-footer\">\r\n                    <Badge badgeContent={randomNum.current} color=\"secondary\">\r\n                        <FavoriteBorderIcon />\r\n                    </Badge>\r\n                    {\r\n                        error ?\r\n                            <Badge badgeContent={0} color=\"secondary\">\r\n                                <ChatBubbleOutlineIcon />\r\n                            </Badge>\r\n                            :\r\n                            conversationData ?\r\n                                <Badge badgeContent={conversationData.parent.conversation.replies} color=\"secondary\">\r\n                                    <ChatBubbleOutlineIcon />\r\n                                </Badge>\r\n                                :\r\n                                <ChatBubbleOutlineIcon />\r\n                    }\r\n\r\n                    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                        {\r\n                            isSelected && conversationData && conversationData.messages && conversationData.messages.length > 0 &&\r\n                            conversationData.messages.map(msg => <Reply message={msg} />)\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nPost.defaultProps = {\r\n    selectPost: (param) => null\r\n}\r\n\r\nconst Reply = ({ message }) => {\r\n    const { user, created_at } = message\r\n    return (\r\n        <div\r\n        >\r\n            <div className=\"post-avatar\">\r\n                <img className=\"avatar\" src={user.avatar_url} alt={user.username} />\r\n            </div>\r\n            <div className=\"post-body\">\r\n                <div className=\"post-header\">\r\n                    {message.entities.sentiment ?\r\n                        <Chip\r\n                            size=\"small\"\r\n                            label={message.entities.sentiment.basic}\r\n                        />\r\n                        : null\r\n                    }\r\n                    {/* <span>\r\n                        {time_ago(time)}\r\n                    </span> */}\r\n                </div>\r\n                <p>\r\n                    {message.body}\r\n                </p>\r\n                <div className=\"post-footer\">\r\n                    <Badge badgeContent={0} color=\"secondary\">\r\n                        <FavoriteBorderIcon />\r\n                    </Badge>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default React.memo(Post)","C:\\Users\\gonza\\finance-app\\src\\charts\\DonutChart.js",["579","580"],"import React, { useState, useEffect } from 'react'\r\nimport Highcharts from \"highcharts\"\r\nimport HighchartsReact from \"highcharts-react-official\";\r\n\r\nexport const DonutChart = ({data}) => {\r\n    const chartOptions = {\r\n        chart: {\r\n            type: 'pie',\r\n        },\r\n        title: {\r\n            text: 'Contents of Highsoft\\'s weekly fruit delivery'\r\n        },\r\n        subtitle: {\r\n            text: '3D donut in Highcharts'\r\n        },\r\n        plotOptions: {\r\n            pie: {\r\n                innerSize: 100,\r\n            }\r\n        },\r\n        series: [{\r\n            name: 'Delivered amount',\r\n            data\r\n        }]\r\n        // series: [{\r\n        //     name: 'Delivered amount',\r\n        //     data: [\r\n        //         ['Bananas', 8],\r\n        //         ['Kiwi', 3],\r\n        //         ['Mixed nuts', 1],\r\n        //         ['Oranges', 6],\r\n        //         ['Apples', 8],\r\n        //         ['Pears', 4],\r\n        //         ['Clementines', 4],\r\n        //         ['Reddish (bag)', 1],\r\n        //         ['Grapes (bunch)', 1]\r\n        //     ]\r\n        // }]\r\n    }\r\n    return (\r\n        <HighchartsReact\r\n        highcharts={Highcharts}\r\n        options={chartOptions}\r\n        />\r\n    )\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\utils\\Pipes.js",[],"C:\\Users\\gonza\\finance-app\\src\\charts\\indexesChart2.js",["581","582","583","584","585"],"import React, { useState, useEffect, useRef, useLayoutEffect } from \"react\";\r\nimport Highcharts from \"highcharts/highstock\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport { useUILayer } from \"../ContextUI\";\r\nimport { useChartReflow } from \"../utils/useChartReflow\";\r\n\r\n\r\nexport const IndexesChart2 = ({ datos }) => {\r\n    console.log(\"helllo\")\r\n    const chart = useRef(null)\r\n    const [dataset, setDataset] = useState(\"\")\r\n    useChartReflow(chart.current)\r\n    console.log(datos, \"datuus\")\r\n    useEffect(() => {\r\n        console.log(\"manzana\", datos.historical)\r\n        if (datos.prices && datos.prices.length > 0) {\r\n            console.log(\"entra\")\r\n            prepareData(datos.prices)\r\n\r\n        } else {\r\n            console.log(\"algo pasa, nunca deberia ejecutarse este else\")\r\n        }\r\n    }, [datos])\r\n\r\n    const sanitizeDates = (datar) => {\r\n        const data = datar.slice(0).map(item => {\r\n            const dateArr = item.date.slice(0).split(\"-\").map(num => parseInt(num));\r\n            item.date = new Date(dateArr).getTime();\r\n            return item\r\n        })\r\n        return data\r\n    }\r\n    \r\n    const prepareData = (datab) => {\r\n        console.log(datab, \"koojones que pasa\")\r\n        let data = typeof datab[0].date === \"string\"\r\n            ?\r\n            sanitizeDates(datab)\r\n            :\r\n            datab\r\n\r\n\r\n        console.log(\"hola\");\r\n        let ohl = [];\r\n        let ohlNA = [];\r\n        let volume = [];\r\n        data.forEach((record) => {\r\n            let cleanRecord = [\r\n                record[\"date\"],\r\n                record[\"close\"],\r\n                record[\"high\"],\r\n                record[\"low\"],\r\n                record[\"open\"],\r\n            ];\r\n            ohl = [...ohl, cleanRecord];\r\n        });\r\n        console.log(\"ooooohl\", ohl);\r\n\r\n        setDataset(ohl.reverse());\r\n    };\r\n\r\n    const options = {\r\n        chart: {\r\n            zoomType: \"x\",\r\n            events: {\r\n                selection: function (e) {\r\n                    e && console.log(e);\r\n                },\r\n                load: function () {\r\n                    chart.current = this\r\n                }\r\n                // load: function(){\r\n                //   setIsBuilding(false)\r\n                // }\r\n            },\r\n            //width,\r\n            id: \"chart-stock\",\r\n            animation: {\r\n                duration: 225,\r\n            },\r\n        },\r\n        plotOptions: {\r\n            candlestick: {\r\n                color: \"red\",\r\n                upColor: \"rgb(22,177,87)\",\r\n                lineColor: \"red\",\r\n                upLineColor: \"rgb(22,177,87)\",\r\n                pointPadding: 0.02,\r\n            },\r\n        },\r\n\r\n        title: {\r\n            text: \"My chart\",\r\n            zoomType: \"x\",\r\n        },\r\n        rangeSelector: {\r\n            allButtonsEnabled: true,\r\n        },\r\n        navigator: {},\r\n        series: [\r\n            {\r\n                type: \"candlestick\",\r\n                data: dataset,\r\n                dataGrouping: {\r\n                    units: [\r\n                        [\"day\", [1, 2, 3, 4, 5, 8, 16]],\r\n                        [\"week\", [1, 2, 3, 4]],\r\n                        [\"month\", [1, 2, 3, 4, 6]],\r\n                    ],\r\n                    smoothed: true,\r\n                },\r\n                // showInNavigator: true,\r\n            },\r\n        ],\r\n    };\r\n    console.log(dataset, \"jodio\")\r\n\r\n    return (\r\n        <>\r\n            {\r\n                dataset &&\r\n                <HighchartsReact\r\n                    highcharts={Highcharts}\r\n                    options={options}\r\n                    constructorType={\"stockChart\"}\r\n\r\n                />}\r\n            <div>kaak</div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n//  key info example\r\n//{\r\n//     \"date\" : \"2020-11-17\",\r\n//     \"open\" : 12030.269531,\r\n//     \"high\" : 12047.129883,\r\n//     \"low\" : 11964.200195,\r\n//     \"close\" : 11977.490234,\r\n//     \"adjClose\" : 11977.490234,\r\n//     \"volume\" : 4.12277E9,\r\n//     \"unadjustedVolume\" : 4.12277E9,\r\n//     \"change\" : -52.7793,\r\n//     \"changePercent\" : -0.439,\r\n//     \"vwap\" : 11996.27344,\r\n//     \"label\" : \"November 17, 20\",\r\n//     \"changeOverTime\" : -0.00439","C:\\Users\\gonza\\finance-app\\src\\utils\\useFatch.js",["586","587","588"],"C:\\Users\\gonza\\finance-app\\src\\components\\NewsItem.js",[],"C:\\Users\\gonza\\finance-app\\src\\views\\company\\Rows.js",["589","590","591","592"],"import {\r\n    Collapse,\r\n    IconButton,\r\n    makeStyles,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    withStyles,\r\n} from \"@material-ui/core\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport { formatter } from \"../../utils/numFormatter\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    root: {\r\n        background: \"white\",\r\n        borderRadius: \"10px\",\r\n        margin: \"0 auto\",\r\n        width: \"100%\",\r\n        // [theme.breakpoints.up(\"sm\")]: {\r\n        //     width: \"700px\"\r\n        // },\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            width: \"1000px\"\r\n        },\r\n        [theme.breakpoints.up(\"lg\")]: {\r\n            width: \"1250px\"\r\n        }\r\n    },\r\n    tableConatiner: {\r\n\r\n    },\r\n\r\n    iconButton: {\r\n        padding: 0\r\n    },\r\n\r\n    cell: {\r\n        borderBottom: \"none\"\r\n    },\r\n    sectionTitleCell: {\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            // paddingLeft: 0, paddingRight: 0\r\n        },\r\n        [theme.breakpoints.up(\"lg\")]: {\r\n\r\n            // paddingLeft: 0, paddingRight: \"35px\"\r\n        }\r\n    },\r\n    subtitles: {\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            // maxWidth: \"130px\"\r\n        },\r\n        [theme.breakpoints.up(\"lg\")]: {\r\n            // maxWidth: \"none\",\r\n            // width: \"200px\"\r\n        },\r\n        // maxWidth: \"none\"\r\n    }\r\n}))\r\n\r\n\r\nconst TableCellSmall = withStyles({\r\n    root: {\r\n        transform: \"translateX(1.5rem)\",\r\n        // whiteSpace: \"nowrap\"\r\n    }\r\n})(TableCell)\r\nconst TableCellXSmall = withStyles({\r\n    root: {\r\n        transform: \"translateX(3rem)\",\r\n        // whiteSpace: \"nowrap\"\r\n    }\r\n})(TableCell)\r\n\r\nconst makeShortInt = (item) => formatter.format(parseInt(item) / 1000000).replace(\".00\", \"\")\r\nexport const TableSectionChunk = ({ title, data, lookupKey, open, setOpen }) => {\r\n    const classes = useStyles()\r\n    console.log(data, \"la datona\")\r\n    return (\r\n        <TableRow\r\n        >\r\n            <TableCell\r\n            style={{padding: \"0.5rem\", width: \"40px\", textAlign: \"center\"}}\r\n            >\r\n                <IconButton\r\n                    classes={{ root: classes.iconButton }}\r\n                    onClick={() => { setOpen(prev => !prev) }}\r\n                >\r\n                    {open ? <KeyboardArrowDownIcon /> : <KeyboardArrowUpIcon />}\r\n                </IconButton>\r\n            </TableCell>\r\n            <TableCell\r\n                classes={{ root: classes.sectionTitleCell }}\r\n                colSpan={2}\r\n                >\r\n                <p\r\n                //style={{width: \"120px\"}}\r\n                \r\n                >{title}</p></TableCell>\r\n            {data && Object.keys(data[lookupKey]).map(date =>\r\n                <TableCell\r\n                    align=\"right\"\r\n                >\r\n                    {makeShortInt(data[lookupKey][date])}</TableCell>)\r\n            }\r\n        </TableRow>\r\n    )\r\n}\r\nexport const TableSubtitleChunk = ({ title, data, lookupKey, hackWidth }) => {\r\n    const classes = useStyles()\r\n    return (\r\n        <TableRow\r\n        >\r\n            <TableCell\r\n                classes={{ root: classes.cell }}\r\n                style={{padding: \"0.5rem\", width: \"40px\", textAlign: \"center\"}}\r\n            >\r\n                <IconButton\r\n                    classes={{ root: classes.iconButton }}\r\n                    style={{ visibility: \"hidden\" }}\r\n                >\r\n                    <KeyboardArrowUpIcon />\r\n                </IconButton>\r\n            </TableCell>\r\n            <TableCellSmall\r\n                classes={{ root: classes.cell }}\r\n                colSpan={2}>\r\n                <p\r\n                    className={classes.subtitles}\r\n                >{title}</p>\r\n            </TableCellSmall>\r\n            {data && Object.keys(data[lookupKey]).map(date =>\r\n                <TableCell\r\n                    align=\"right\"\r\n                    style={{ width: hackWidth + \"px\" }}\r\n                    classes={{ root: classes.cell }}\r\n                >{makeShortInt(data[lookupKey][date])}</TableCell>)\r\n            }\r\n        </TableRow>\r\n    )\r\n}\r\nexport const TableSubSubtitleChunk = ({ title, data, lookupKey, hackWidth }) => {\r\n    const classes = useStyles()\r\n    return (\r\n        <TableRow\r\n        >\r\n            <TableCell\r\n                classes={{ root: classes.cell }}\r\n                \r\n            >\r\n                <IconButton\r\n                    classes={{ root: classes.iconButton }}\r\n                    style={{ visibility: \"hidden\" }}\r\n                >\r\n                    <KeyboardArrowUpIcon />\r\n                </IconButton>\r\n            </TableCell>\r\n            <TableCellXSmall\r\n                classes={{ root: classes.cell }}\r\n\r\n                colSpan={2}>\r\n                <p\r\n                    className={classes.subtitles}\r\n                >{title}</p>\r\n            </TableCellXSmall>\r\n            {data && Object.keys(data[lookupKey]).map(date =>\r\n                <TableCell\r\n                    align=\"right\"\r\n                    classes={{ root: classes.cell }}\r\n                    style={{ width: hackWidth + \"px\" }}\r\n                >{makeShortInt(data[lookupKey][date])}</TableCell>)\r\n            }\r\n        </TableRow>\r\n    )\r\n}\r\n\r\nexport const Collapsible = ({ children, renderTitleSection }) => {\r\n    const [open, setOpen] = useState(false)\r\n    return (\r\n        <TableBody>\r\n            {renderTitleSection(open, setOpen)}\r\n            <TableRow\r\n            //  style={{...defaultStyles, ...transitionStyles[state]}}\r\n            >\r\n                <TableCell colSpan={8} className=\"nested-cell\">\r\n                    <Collapse\r\n                        in={open}\r\n                        mountOnEnter\r\n                        timeout=\"auto\"\r\n                        unmountOnExit\r\n                    >\r\n                        <Table >\r\n                            <TableBody>\r\n                                {children}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </Collapse>\r\n                </TableCell>\r\n            </TableRow>\r\n        </TableBody>\r\n    )\r\n}\r\n\r\nexport const TableSectionAlone = ({ title, data, lookupKey }) => {\r\n    const classes = useStyles()\r\n    return (\r\n        <TableRow\r\n        >\r\n            <TableCell>\r\n                <IconButton\r\n                    classes={{ root: classes.iconButton }}\r\n                    style={{ visibility: \"hidden\" }}\r\n                >\r\n                    {<KeyboardArrowDownIcon />}\r\n                </IconButton>\r\n            </TableCell>\r\n            <TableCell\r\n                classes={{ root: classes.sectionTitleCell }}\r\n                colSpan={2}\r\n               >\r\n                <p\r\n                //style={{width: \"120px\"}}\r\n                >{title}</p></TableCell>\r\n            {data && Object.keys(data[lookupKey]).map(date =>\r\n                <TableCell\r\n                    align=\"right\"\r\n                >\r\n                    {makeShortInt(data[lookupKey][date])}</TableCell>)\r\n            }\r\n        </TableRow>\r\n    )\r\n}","C:\\Users\\gonza\\finance-app\\src\\views\\seguidores\\FollowingDispatcher.js",["593","594","595","596","597"],"import React, { useEffect, useRef, useState } from 'react'\r\n//import { usercontext, useUserLayer } from '../../UserContext'\r\nimport Post from './Post'\r\nimport gsap from \"gsap\"\r\nimport { Backdrop, Button } from '@material-ui/core'\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nexport class FollowingDispatcher extends React.Component {\r\n\r\n    //static contextType = usercontext\r\n    constructor(props, context) {\r\n        super(props, context)\r\n    }\r\n    state = {\r\n        loading: true,\r\n        data: null,\r\n        error: null,\r\n        responseType: null,\r\n        backdropOpen: false,\r\n        selectedPost: null,\r\n        rotatingIcon: false\r\n    }\r\n    // messageRef = React.createRef()\r\n    // timeline = gsap.timeline()\r\n\r\n    componentDidMount() {\r\n        if (this.props.valores.userState.ready) {\r\n\r\n            this.fetchInterests()\r\n        }\r\n    }\r\n\r\n    //we have to sort all message by date, and store them by chunks \r\n    componentDidUpdate(prevProps, prevState) {\r\n        console.log(prevState, prevProps, \"prevv propss\")\r\n        if (prevState.data !== this.state.data) {\r\n            console.log(this.state.data, \"data recibida\")\r\n\r\n        }\r\n        //in case user navigate to /interests directly in url\r\n        if (prevProps.valores !== this.props.valores) {\r\n            console.log(\"valores change\", this.props.valores.userState.ready)\r\n            if (this.props.valores.userState.ready) {\r\n                this.fetchInterests()\r\n            }\r\n        }\r\n    }\r\n\r\n    prepareData(res) {\r\n        console.log(res.data, \"jooooiia\")\r\n        if (!res.data || !res.data.length) {\r\n            console.log(\"es nulo\")\r\n            return null\r\n        }\r\n        const sortedData = res.data\r\n            .map(msg => {\r\n                const unixTime = new Date(msg.created_at).getTime()\r\n                msg.unixTime = unixTime\r\n                return msg\r\n            })\r\n            .sort((previous, current) => current.unixTime - previous.unixTime);\r\n        console.log(sortedData, \"sortedData\")\r\n        if (this.state.responseType === \"trending\") {\r\n            return sortedData\r\n        }\r\n        if (this.state.responseType === \"interests\") {\r\n            const chunkedData = this.chunkData(sortedData, 30)\r\n            return chunkedData\r\n        }\r\n    }\r\n\r\n    chunkData(arr, postsXChunk) {\r\n        let result = []\r\n        const chunkNumber = Math.round(arr.length / postsXChunk)\r\n        this.props.setChunkCount(chunkNumber)\r\n        const sobrantes = arr.length - postsXChunk * chunkNumber\r\n        let iteration = 0\r\n        Array(chunkNumber).fill(null).forEach(() => {\r\n            result = [...result, arr.slice(iteration, iteration + 30)]\r\n            iteration += 30\r\n        })\r\n        if (sobrantes) result = [...result, arr.slice(iteration, iteration + sobrantes)];\r\n\r\n        return result\r\n    }\r\n    fetchInterests() {\r\n        this.setState({\r\n            rotatingIcon: true,\r\n            data: null,\r\n        })\r\n        fetch(`http://localhost:8001/api/v1/interests/populate?email=${this.props.valores.userState.info.email}`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                this.setState({ responseType: res.type })\r\n                //this.props._setResponseType(res.type)\r\n                const readyData = this.prepareData(res)\r\n                console.log(readyData, \"readyData bibor\")\r\n                this.setState({\r\n                    loading: false,\r\n                    data: readyData,\r\n                    rotatingIcon: false\r\n                })\r\n                if (this.state.responseType === \"interests\") {\r\n                    this.props._setIsDataReadyScroll(readyData !== null)\r\n                }\r\n            })\r\n            .catch(err => { this.setState({ laoding: false, error: err.message, rotatingIcon: false }) })\r\n    }\r\n\r\n    selectPost = (post) => {\r\n        // console.log(this.state.data, \"dataoo\")\r\n        //const selection = this.state.data.find(post => post.id === id)\r\n        this.setState({ selectedPost: post, backdropOpen: true })\r\n    }\r\n    unselectPost = () => {\r\n        { this.setState({ backdropOpen: false, selectedPost: null }) }\r\n    }\r\n    render() {\r\n        console.log(this.props.valores.userState, \"wopo\")\r\n        //console.log(this.context.userState.info, \"los proops\")\r\n        const { data, loading, responseType, backdropOpen, selectedPost, rotatingIcon } = this.state\r\n        console.log(data, \"lo dataa\")\r\n        const { currentChunk } = this.props\r\n        if (loading) {\r\n            return <h3>Loading...</h3>\r\n        }\r\n\r\n        if (responseType === \"interests\") {\r\n            return (\r\n                <>\r\n                    <div>\r\n                        {data && data.length &&\r\n                            data.slice(0, currentChunk).map((chunk, index) => {\r\n                                console.log(chunk, \"qe collons chu\")\r\n                                return (<PostChunk key={index} {...{ chunk }}\r\n                                    selectPost={this.selectPost}\r\n                                />\r\n                                )\r\n                            }\r\n                            )\r\n                        }\r\n                    </div>\r\n                    {selectedPost &&\r\n                        <ModalSelection\r\n                            isOpen={backdropOpen}\r\n                            unselectPost={this.unselectPost}>\r\n                            <Post message={selectedPost} selectPost={this.selectPost} isSelected={true} />\r\n                        </ModalSelection>\r\n                    }\r\n\r\n                </>\r\n            )\r\n        }\r\n        if (responseType === \"trending\") {\r\n            return (\r\n                <>\r\n                    <Button\r\n                        startIcon={<RefreshIcon className={rotatingIcon ? \"rotating-icon\" : \"\"} />}\r\n                        onClick={() => { this.fetchInterests() }}\r\n                    >\r\n                        Refresh\r\n                </Button>\r\n                    {data && <GsapFadeInStagger>\r\n                        {data.map(message => (\r\n                            <Post {...{ message }}\r\n                                selectPost={this.selectPost}\r\n                            />\r\n                        ))}\r\n                    </GsapFadeInStagger>}\r\n\r\n                    {selectedPost &&\r\n                        <ModalSelection\r\n                            isOpen={backdropOpen}\r\n                            unselectPost={this.unselectPost}>\r\n                            <Post message={selectedPost} selectPost={this.selectPost} isSelected={true} />\r\n                        </ModalSelection>\r\n                    }\r\n\r\n                </>\r\n            )\r\n        }\r\n        return <p>No responseType returned from server</p>\r\n    }\r\n}\r\n\r\nconst ModalSelection = ({ unselectPost, children, isOpen }) => {\r\n\r\n    return (\r\n        <Backdrop open={isOpen}\r\n            onClick={unselectPost}\r\n            style={{ zIndex: 100 }}>\r\n\r\n            { children}\r\n        </Backdrop>\r\n    )\r\n}\r\n\r\nconst GsapFadeInStagger = ({ children }) => {\r\n    const chunkRef = useRef(null)\r\n    const timeline = gsap.timeline()\r\n    useEffect(() => {\r\n        timeline.to(chunkRef.current.childNodes, {\r\n            //y: 100,\r\n            opacity: 1,\r\n            ease: \"power4.inOut\",\r\n            duration: 0.7,\r\n            stagger: 0.1\r\n        });\r\n    }, [])\r\n    return (\r\n        <div ref={chunkRef}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst PostChunk = ({ chunk, selectPost }) => {\r\n\r\n    // const chunkRef = useRef(null)\r\n    // const timeline = gsap.timeline()\r\n    // console.log(chunk, \"eel chunk\")\r\n    // useEffect(() => {\r\n    //     timeline.to(chunkRef.current.childNodes, {\r\n    //         //y: 100,\r\n    //         opacity: 1,\r\n    //         ease: \"power4.inOut\",\r\n    //         duration: 0.7,\r\n    //         stagger: 0.1\r\n    //     });\r\n    // }, [])\r\n\r\n    return <GsapFadeInStagger>\r\n        {chunk.map((message, index) => (\r\n            <Post key={message.id} {...{ message, selectPost }} />\r\n        ))}\r\n    </GsapFadeInStagger>\r\n}\r\n\r\n// export default withUserState(FollowingDispatcher)\r\n\r\n// const withUserState = (component) => {\r\n//     const { userState } = useUserLayer()\r\n//     const Component = component\r\n//     return function (props) {\r\n//         return <Component {...props} email={userState.info.email} />\r\n//     }\r\n// }\r\n\r\nconst Koko = ({ message }) => {\r\n    return <div>{message.body}</div>\r\n}","C:\\Users\\gonza\\finance-app\\src\\Auth\\Login.js",["598","599"],"import React, { useEffect, useState } from 'react'\r\nimport { Redirect, useHistory } from 'react-router-dom'\r\nimport { useUILayer } from '../ContextUI'\r\nimport { useUserLayer } from '../UserContext'\r\nimport { useIAuth } from './useIAuth'\r\n\r\n\r\nexport const Login = () => {\r\n    const [email, setEmail] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [{ error, loading }, setStatus] = useState({ error: null, loading: false })\r\n    const { userDispatch } = useUserLayer()\r\n\r\n    const { hasPermission } = useIAuth()\r\n    const history = useHistory()\r\n\r\n    const handleLogin = (e) => {\r\n        console.log(\"upa\")\r\n        e.preventDefault()\r\n        setStatus(prev => ({ ...prev, loading: true }))\r\n        fetch(\"http://localhost:8001/api/v1/auth/login\", {\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({ email, password }),\r\n            method: \"POST\"\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                localStorage.setItem(\"token\", JSON.stringify(res.token))\r\n                userDispatch({ type: \"SET_TOKEN\", payload: res.token })\r\n                userDispatch({ type: \"SET_USER\", payload: { email } })\r\n                history.push(\"/protectedRuta\")\r\n                setStatus(prev => ({ ...prev, loading: false }))\r\n                //setPermissionObtained(true)\r\n            })\r\n            .catch(err => {\r\n                //setPermissionObtained(false)\r\n                setStatus(({ error: err.message, loading: false }))\r\n            })\r\n    }\r\n    if (hasPermission) {\r\n        return <Redirect to={{ pathname: \"/protectedRuta\" }} />\r\n    }\r\n    if (error) {\r\n        return <p>{error}</p>\r\n    }\r\n    if (loading) {\r\n        return <p>Loading...</p>\r\n    }\r\n    return (\r\n        <form onSubmit={handleLogin}>\r\n            <label>\r\n                <input type=\"text\" name=\"email\"\r\n                    value={email}\r\n                    onChange={(e) => {\r\n                        setEmail(e.target.value)\r\n                    }}\r\n                    required\r\n                />\r\n            </label>\r\n            <label>\r\n                <input type=\"password\" name=\"password\"\r\n                    value={password}\r\n                    onChange={(e) => {\r\n                        setPassword(e.target.value)\r\n                    }}\r\n                    required\r\n                />\r\n            </label>\r\n            <button type=\"submit\">submita</button>\r\n        </form>\r\n    )\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\Context.js",[],"C:\\Users\\gonza\\finance-app\\src\\portfolio\\Engine.js",["600","601","602","603","604","605"],"import React, { useEffect, useRef, useState } from \"react\"\r\nimport { useDataLayer } from \"../Context\"\r\nimport { convertHumanToUnixInit } from \"../utils/datesUtils\"\r\nimport { useLogicPruebas } from \"./logicPruebasConAdd\"\r\n\r\n\r\n//1. Deducimos del historial de operaciones los Tickers que necesitamos\r\n//2. Enviamos esos tickers a nuestro servidor, obtnemos sus precios historicos y los devolvemos de vuelta\r\n//3. combinamos y tranformamos esos precios en el cliente y guardamos el resultado en el estado\r\n//4. el resultado nos sirve para conocer el precio de todas las acciones para cualquier fecha y consultarlo de manera muy eficiente\r\n\r\n\r\nexport const useEngine = () => {\r\n\r\n    useLogicPruebas()\r\n\r\n    const { state, dispatch } = useDataLayer()\r\n    const { missingTicker } = state\r\n    const { stocks } = state.currentPossesions\r\n\r\n    //WHAT if we don't have any ticker yet?\r\n\r\n    const getPricesHistory = async () => {\r\n        try {\r\n            const request = await fetch(\"http://localhost:8001/api/v1/prices/portfolio_prices\", {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                method: \"POST\",\r\n                body: JSON.stringify(stocks)\r\n            })\r\n            const data = await request.json()\r\n            return data\r\n        }\r\n        catch (err) {\r\n            throw new Error(err, \" aquiii puta\")\r\n        }\r\n    }\r\n    //missing ticker is a tuple for now\r\n    //deberiamos retornar una promesa aquí\r\n    // const getPricesHistoryMissingTicker = async (missingTicker) => {\r\n    //     // console.log(missingTicker, \"totsstocks missing tikcer\")\r\n    //     // console.log(stocks, \"totsstocks\")\r\n    //     // console.log(JSON.stringify(stocks, \"totsstocks\"))\r\n    //     //we need arry format in the server so we use filter intead of find\r\n    //     const misingTickerOperationInfo =\r\n    //         stocks.\r\n    //             filter(asset => asset.ticker.toUpperCase() === missingTicker.toUpperCase())\r\n    //     console.log(misingTickerOperationInfo, \"woot\")\r\n    //     try {\r\n    //         const request = await fetch(\"http://localhost:8001/portfolio2?missingTicker=true\", {\r\n    //             headers: {\r\n    //                 \"Content-Type\": \"application/json\"\r\n    //             },\r\n    //             method: \"POST\",\r\n    //             body: JSON.stringify(misingTickerOperationInfo)\r\n    //         })\r\n    //         const data = await request.json()\r\n    //         return data\r\n    //     }\r\n    //     catch (err) {\r\n    //         throw new Error(err, \" aquiii puta\")\r\n    //     }\r\n    // }\r\n\r\n\r\n    // //only one at a time right now\r\n    // //this is pointless because we won't know the close proce untill tomorrow\r\n    // //that may be only be usefull when dealing when with real time data\r\n    // const updateData = (data, cb) => {\r\n    //     console.log(data, \"la jodida data\")\r\n    //     const newCompanyData = data[0][missingTicker]\r\n    //     let portfolioHistoryCopy = { ...state.portfolioHistory }\r\n    //     let portfolioHistoryByCompanyCopy = { ...state.portfolioHistoryByCompany }\r\n    //     console.log(portfolioHistoryCopy, \"que wobo\")\r\n    //     console.log(newCompanyData, \"ku pasau\")\r\n    //     newCompanyData.forEach(register => {\r\n    //         const date = register.date.split(\"T\")[0]\r\n    //         if (state.portfolioHistory[date]) {\r\n    //             portfolioHistoryCopy[date] = {\r\n    //                 ...portfolioHistoryCopy[date],\r\n    //                 [missingTicker]: { close: register.close }\r\n    //             }\r\n    //         }\r\n    //         else {\r\n    //             portfolioHistoryCopy[date] = {\r\n    //                 [missingTicker]: { close: register.close }\r\n    //             }\r\n    //         }\r\n    //     })\r\n    //     let newCompanyChartData = newCompanyData.map(register => {\r\n    //         const date = register.date.split(\"T\")[0]\r\n    //         return [\r\n    //             convertHumanToUnixInit(date),\r\n    //             register[\"adjClose\"],\r\n    //             register[\"adjHigh\"],\r\n    //             register[\"adjLow\"],\r\n    //             register[\"adjOpen\"]\r\n    //         ]\r\n    //     })\r\n    //     console.log(portfolioHistoryCopy, \"que wobo2\")\r\n    //     console.log(newCompanyChartData, \"perula\", JSON.parse(JSON.stringify(missingTicker)))\r\n    //     portfolioHistoryByCompanyCopy = {\r\n    //         ...portfolioHistoryByCompanyCopy,\r\n    //         [missingTicker]: newCompanyChartData\r\n    //     }\r\n    //     console.log(portfolioHistoryByCompanyCopy, \"perula1\", JSON.parse(JSON.stringify(missingTicker)))\r\n    //     dispatch({ type: \"STORE_PORTFOLIO_HISTORY_BY_COMPANY_CHART_READY\", payload: portfolioHistoryByCompanyCopy })\r\n\r\n\r\n    //     dispatch({ type: \"STORE_PORTFOLIO_HISTORY_BY_DATE\", payload: portfolioHistoryCopy })\r\n\r\n    //     cb()\r\n    // }\r\n\r\n    const prepareData = (arr, cb) => {\r\n        \r\n        console.log(arr, \"la arrey\")\r\n        const worker = new Worker(\"/worker.js\")\r\n        worker.postMessage(arr)\r\n        worker.onmessage = e => {\r\n            const { portfolioHistoryByDate, portfolioHistoryByCompanies } = e.data\r\n            console.log(portfolioHistoryByDate, portfolioHistoryByCompanies, \"errr work\")\r\n            dispatch({ type: \"STORE_PORTFOLIO_HISTORY_BY_COMPANY_CHART_READY\", payload: portfolioHistoryByCompanies })\r\n            dispatch({ type: \"STORE_PORTFOLIO_HISTORY_BY_DATE\", payload: portfolioHistoryByDate })\r\n            cb()\r\n            console.log(portfolioHistoryByCompanies, \"ku pusu\")\r\n\r\n            console.log(arr, \"averaaaa\")\r\n            console.log(portfolioHistoryByDate, \"master\")\r\n        }\r\n    }\r\n\r\n    const __init = async () => {\r\n        //get price data of the user possesions\r\n        console.log(stocks.length, \"tokkee\")\r\n        if (!stocks.length) return\r\n        const initialData = await getPricesHistory()\r\n        console.log(initialData, \"initialprices\")\r\n         //ojo aquí el type que obtemenos de la initialData, \r\n        prepareData(initialData, () => {\r\n            dispatch({ type: \"SET_ARE_HISTORIC_PRICES_READY\", payload: true })\r\n        })\r\n    }\r\n\r\n    //initialize the app\r\n    useEffect(() => {\r\n\r\n        if (state.setPruebaReady) {\r\n            __init()\r\n        }\r\n    }, [state.setPruebaReady])\r\n\r\n\r\n    // useEffect(() => {\r\n    //     if(state.setPruebaReady){\r\n    //         console.log(missingTicker, \"missingTicker otstia\")\r\n    //         dispatch({\r\n    //                 type: \"SET_ARE_HISTORIC_PRICES_READY\",\r\n    //                 payload: false\r\n    //             })\r\n    //         const asyncWrapper = async () => {\r\n    //             const missingData = await getPricesHistoryMissingTicker(missingTicker)\r\n    //             updateData(missingData, () => {\r\n    //                 dispatch({dispatch: \"RESTART_MISSING_TICKER\"})\r\n    //                 dispatch({ type: \"SET_ARE_HISTORIC_PRICES_READY\", payload: true })\r\n    //             })\r\n    //         }\r\n    //         asyncWrapper()\r\n    //     }\r\n\r\n    // }, [missingTicker])\r\n\r\n\r\n}\r\n\r\n","C:\\Users\\gonza\\finance-app\\src\\dashboard\\PerformanceStructure.js",["606","607","608","609","610","611","612","613"],"import React, { useEffect, useState, useRef } from 'react'\r\nimport Highcharts from \"highcharts/highstock\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport { useDataLayer } from '../Context';\r\nimport { convertHumanToUnixInit, convertUnixToHuman, milisencondsInADay } from '../utils/datesUtils';\r\nimport { rounder } from '../utils/numFormatter';\r\nimport { Paper } from '@material-ui/core';\r\n\r\n\r\nexport const PerformanceStructure = ({ available, loading }) => {\r\n    const [dataReady, setDataReady] = useState(\"\")\r\n    const { state, dispatch } = useDataLayer()\r\n    const { companiesChange } = state\r\n    const data1 = useRef([])\r\n    const data2 = useRef([])\r\n\r\n    // useEffect(() => {\r\n\r\n    //     initialData.forEach((item, index) => {\r\n    //         if (index % 5 === 0) {\r\n    //             data1.current = [...data1.current, [item[0], -Math.round(Math.random() * 100)]]\r\n    //             data2.current = [...data2.current, [item[0], -Math.round(Math.random() * 100)]]\r\n    //         } else {\r\n    //             data1.current = [...data1.current, [item[0], Math.round(Math.random() * 100)]]\r\n    //             data2.current = [...data2.current, [item[0], Math.round(Math.random() * 100)]]\r\n    //         }\r\n    //     })\r\n    //     setDataset(true)\r\n    // }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        if (loading) {\r\n            return\r\n        }\r\n        if (!available) {\r\n            return\r\n        }\r\n        const _dataReady = prepareDataset(companiesChange)\r\n        setDataReady(_dataReady)\r\n\r\n    }, [available])\r\n\r\n\r\n    const prepareDataset = (data) => {\r\n        let readyData = []\r\n        Object.entries(data).forEach(arr => {\r\n            console.log(arr, \"avoora\")\r\n            let ticker = arr[0]\r\n            const data = arr[1].filter(point => Math.abs(point[1]) > 0.1)\r\n            readyData = [...readyData,\r\n            {\r\n                type: \"column\",\r\n                name: ticker,\r\n                data,\r\n                // centerInCategory: true\r\n            }]\r\n        })\r\n        return readyData\r\n    }\r\n\r\n    const chartOptions = {\r\n        chart: {\r\n            type: \"column\",\r\n            alignTicks: false,\r\n        },\r\n\r\n        // rangeSelector: {\r\n        //     selected: 1\r\n        // },\r\n\r\n        title: {\r\n            text: 'AAPL Stock Volume'\r\n        },\r\n        plotOptions: {\r\n            // column: {\r\n            //     centerInCategory: true,\r\n            // },\r\n            series: {\r\n                dataGrouping: {\r\n                    approximation: \"average\",\r\n                    units: [[\r\n                        'week', // unit name\r\n                        [1] // allowed multiples\r\n                    ], [\r\n                        'month',\r\n                        [1, 2, 3, 4, 6]\r\n                    ]]\r\n                },\r\n            }\r\n        },\r\n        //poner esto crea bugs \r\n        // xAxis: {\r\n        //     categories: dataReady && dataReady.map(item => item.name)\r\n        // },\r\n        series: dataReady\r\n\r\n    }\r\n\r\n    if (loading) {\r\n        return <p>loading...</p>\r\n    }\r\n    return (\r\n        <Paper className=\"performance-chart1\">\r\n\r\n            {!available && <p>Data is not available untill next day after you submited a operation, if you submited in weekend wait till monday</p>}\r\n            {\r\n                dataReady &&\r\n                <HighchartsReact\r\n                    highcharts={Highcharts}\r\n                    options={chartOptions}\r\n                    constructorType={\"stockChart\"}\r\n\r\n                />}\r\n        </Paper>\r\n    )\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\dashboard\\PerformanceStructureB.js",["614","615","616","617"],"import React, { useEffect, useState, useRef } from 'react'\r\nimport Highcharts from \"highcharts/highstock\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport { useDataLayer } from '../Context';\r\nimport { convertHumanToUnixInit, convertUnixToHuman, milisencondsInADay } from '../utils/datesUtils';\r\nimport { Paper } from '@material-ui/core';\r\n\r\n\r\nexport const PerformanceStructureB = () => {\r\n    const { state } = useDataLayer()\r\n    const { generatedSeries } = state\r\n    const [chartData, setChartData] = useState()\r\n    const [loading, setLoading] = useState(false)\r\n    const [availableTomorrow, setAvailableTomorrow] = useState(false)\r\n\r\n    const prepareDataset = () => {\r\n        let readyData = {}\r\n        Object.keys(state.companiesImpact.data).forEach(date => {\r\n            state.companiesImpact.data[date].forEach(asset => {\r\n                if (readyData[asset.ticker] === undefined) {\r\n                    readyData = {\r\n                        ...readyData,\r\n                        [asset.ticker]: []\r\n                    }\r\n                }\r\n                const unixDate = convertHumanToUnixInit(date)\r\n                //we are clasifying \"other\" as a ticker/category\r\n                const isThereAndRelevant = state.companiesImpact.data[date].find(item => item.ticker === asset.ticker)\r\n                if (isThereAndRelevant) {\r\n                    readyData[asset.ticker] = [\r\n                        ...readyData[asset.ticker],\r\n                        [unixDate, isThereAndRelevant.performance]\r\n                    ]\r\n                }\r\n\r\n            })\r\n        })\r\n        console.log(readyData, \"ruuudi\")\r\n        if (readyData.other && readyData.other.length > 0) {\r\n            //if sum of all others is less than absolute 0.1 we won't show category other for that date neither\r\n            const relevantOthers = readyData.other.filter(item => Math.abs(item[1]) > 0.1)\r\n            readyData = { ...readyData, relevantOthers }\r\n        }\r\n        return readyData\r\n    }\r\n\r\n    const prepareForChart = (data, cb) => {\r\n        let readySeries = []\r\n        Object.entries(data).forEach(assetData => {\r\n            const ticker = assetData[0]\r\n            const data = assetData[1]\r\n            readySeries = [...readySeries,\r\n            {\r\n                type: \"column\",\r\n                name: ticker,\r\n                data\r\n            }\r\n            ]\r\n        })\r\n        cb(readySeries)\r\n    }\r\n    useEffect(() => {\r\n        console.log(state.companiesImpact, generatedSeries, \"sorios\")\r\n        if (!state.companiesImpact.ready || !generatedSeries.ready) {\r\n            setLoading(true)\r\n            return\r\n        }\r\n        if (!state.companiesImpact.data) {\r\n            setLoading(false)\r\n            setAvailableTomorrow(true)\r\n        }\r\n\r\n        if (state.companiesImpact.data) {\r\n            console.log(state.companiesImpact.data, \"company impct\")\r\n            setLoading(false)\r\n            const data = prepareDataset()\r\n            prepareForChart(data, (result) => {\r\n                setChartData(result)\r\n            })\r\n\r\n        }\r\n    }, [state.companiesImpact, generatedSeries])\r\n\r\n    const chartOptions = {\r\n        chart: {\r\n            type: \"column\",\r\n            alignTicks: false,\r\n        },\r\n\r\n        // rangeSelector: {\r\n        //     selected: 1\r\n        // },\r\n\r\n        title: {\r\n            text: 'AAPL Stock Volume'\r\n        },\r\n        plotOptions: {\r\n            column: {\r\n                stacking: \"normal\"\r\n                // centerInCategory: true,\r\n            },\r\n            series: {\r\n                dataGrouping: {\r\n                    approximation: \"average\",\r\n                    units: [[\r\n                        'week', // unit name\r\n                        [1] // allowed multiples\r\n                    ], [\r\n                        'month',\r\n                        [1, 2, 3, 4, 6]\r\n                    ]]\r\n                },\r\n            }\r\n        },\r\n        //poner esto crea bugs \r\n        // xAxis: {\r\n        //     categories: dataReady && dataReady.map(item => item.name)\r\n        // },\r\n        series: chartData\r\n    }\r\n    return (\r\n        <Paper>\r\n            {loading && <p>Loading...</p>}\r\n            {availableTomorrow && <p>Data is not available untill next day after you submited a operation, if you submited in weekend wait till monday</p>}\r\n\r\n            { chartData && <HighchartsReact\r\n                highcharts={Highcharts}\r\n                options={chartOptions}\r\n                constructorType={\"stockChart\"}\r\n            />}\r\n        </Paper>\r\n    )\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\dashboard\\Positions.js",["618","619","620","621","622","623","624"],"C:\\Users\\gonza\\finance-app\\src\\Auth\\ContactDetails.js",["625","626","627","628"],"import { InputLabel, MenuItem, Select, FormControl, Button, TextField } from '@material-ui/core'\r\nimport React, { useState } from 'react'\r\nimport { useUserLayer } from '../UserContext'\r\nimport countries from \"../utils/countries.json\"\r\nimport { CgGenderFemale, CgGenderMale } from \"react-icons/cg\"\r\nimport styled from \"styled-components\"\r\n\r\nconst Container = styled.div({\r\n    width: \"600px\",\r\n    margin: \"0 auto\"\r\n})\r\nexport const ContactDetails = () => {\r\n    const [imageUpload, setImageUpload] = useState(\"\")\r\n    const [response, setResponse] = useState(\"\")\r\n    const [generatedUrl, setGeneratedUrl] = useState(\"\")\r\n    const { userState } = useUserLayer()\r\n    const [country, setCountry] = useState(\"\")\r\n    const [gender, setGender] = useState(\"\")\r\n    const [dateBirth, setDateBirth] = useState(\"\")\r\n    const [{ firstName, lastName }, setNames] = useState({ firstName: \"\", lastName: \"\" })\r\n    const handleImageUpload = (e) => {\r\n        setImageUpload(e.target.files[0])\r\n        setGeneratedUrl(URL.createObjectURL(e.target.files[0]))\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const imageData = new FormData()\r\n        imageData.append(\"image\", imageUpload)\r\n        imageData.append(\"email\", userState.info.email)\r\n        fetch(\"http://localhost:8001/api/v1/users/upload\", {\r\n            body: imageData,\r\n            method: \"POST\"\r\n        })\r\n            .then(res => res.blob())\r\n            .then(image => {\r\n                setGeneratedUrl(URL.createObjectURL(image))\r\n            })\r\n            .catch(err => { setResponse(JSON.stringify(err)) })\r\n    }\r\n    return (\r\n        <div className=\"contact-details\">\r\n            {/* {generatedUrl && <img src={generatedUrl} />} */}\r\n            <form onSubmit={handleSubmit}>\r\n                <label style={{ height: \"100px\", width: \"100px\", background: \"red\", display: \"block\" }} htmlFor=\"upload\">\r\n                    {generatedUrl && <img src={generatedUrl} style={{ height: \"100%\" }} />}\r\n                    <input\r\n                        type=\"file\"\r\n                        onChange={handleImageUpload}\r\n                        style={{ display: \"none\" }}\r\n                        id=\"upload\"\r\n                    />\r\n                    {/* <button type=\"submit\">submit</button> */}\r\n                </label>\r\n            </form>\r\n            <CountrySelect {...{ country, setCountry }} />\r\n            <Gender {...{ gender, setGender }} />\r\n            <DateOfBirth {...{ dateBirth, setDateBirth }} />\r\n            <Names {...{ firstName, lastName, setNames }} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst CountrySelect = ({ country, setCountry }) => {\r\n    const [open, setOpen] = useState(false)\r\n    return (\r\n        <FormControl >\r\n            <InputLabel id=\"select-country\">Select Country</InputLabel>\r\n            <Select\r\n                labelId=\"select-country\"\r\n                open={open}\r\n                onClose={() => { setOpen(false) }}\r\n                onOpen={() => { setOpen(true) }}\r\n                value={country}\r\n                onChange={(e) => { setCountry(e.target.value) }}\r\n            >\r\n                <MenuItem value=\"\">\r\n                </MenuItem>\r\n                {countries.map(countryName => (\r\n                    <MenuItem value={countryName}>{countryName}</MenuItem>\r\n                ))}\r\n            </Select>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nconst Gender = ({ gender, setGender }) => {\r\n\r\n    // const GenderContainer = styled.div({\r\n    //     display: \"flex\"\r\n    // })\r\n    return (\r\n        <div className=\"form-group\">\r\n            <Label>gender:</Label>\r\n            <Button\r\n                variant={gender === \"female\" ? \"contained\" : \"outlined\"}\r\n                color=\"secondary\"\r\n                onClick={() => { setGender(\"female\") }}\r\n            >\r\n                <CgGenderFemale style={{ fontSize: \"20px\" }} />\r\n            </Button>\r\n            <Button\r\n                variant={gender === \"male\" ? \"contained\" : \"outlined\"}\r\n                color=\"primary\"\r\n                onClick={() => { setGender(\"male\") }}\r\n            ><CgGenderMale style={{ fontSize: \"20px\" }} />\r\n            </Button>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst DateOfBirth = ({ setDateBirth }) => {\r\n    const [focused, setFocused] = useState(false)\r\n    return (\r\n        <div className=\"form-group\">\r\n            <Label {...{ focused }}>Birthdate</Label>\r\n            <TextField\r\n                type=\"date\"\r\n                defaultValue=\"2017-05-24\"\r\n                onChange={(e) => { setDateBirth(e.target.value) }}\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n                onFocus={() => { setFocused(true) }}\r\n                onBlur={() => { setFocused(false) }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Label = styled.label(props => ({\r\n    display: \"block\",\r\n    color: props.focused ? \"#3f51b5\" : \"unset\",\r\n}))\r\nconst FormGroup = styled.div({\r\n\r\n})\r\nconst Names = ({ firstName, lastName, setNames }) => {\r\n\r\n    const [focusedField, setFocusedField] = useState(\"\")\r\n\r\n    const handleFocus = (e) => {\r\n        setFocusedField(e.target.name)\r\n    }\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target\r\n        setNames(prev => ({ ...prev, [name]: value }))\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"form-group\"\r\n            >\r\n                <Label htmlFor=\"firstName\"\r\n                    focused={\"firstName\" === focusedField}\r\n                >First name</Label>\r\n                <TextField\r\n                    id=\"firstName\"\r\n                    type=\"text\"\r\n                    value={firstName}\r\n                    name=\"firstName\"\r\n                    variant=\"outlined\"\r\n                    onFocus={handleFocus}\r\n                    onChange={handleChange}\r\n                />\r\n            </div>\r\n            <div className=\"form-group\"\r\n            >\r\n                <Label htmlFor=\"lastName\"\r\n                    focused={\"lastName\" === focusedField}\r\n                >Last name</Label>\r\n                <TextField\r\n                    id=\"lastName\"\r\n                    type=\"text\"\r\n                    value={lastName}\r\n                    name=\"lastName\"\r\n                    variant=\"outlined\"\r\n                    onFocus={handleFocus}\r\n                    onChange={handleChange}\r\n                />\r\n            </div>\r\n        </>\r\n    )\r\n}","C:\\Users\\gonza\\finance-app\\src\\serviceWorker.ts",[],["629","630"],"C:\\Users\\gonza\\finance-app\\src\\dashboard\\UserMain.js",["631","632"],"import React, { useEffect, useState } from 'react'\r\nimport { useDataLayer } from '../Context'\r\nimport { Marcador } from './Marcador'\r\nimport { StockDispatcher } from './StockDispatcher'\r\n\r\nexport const UserMain = () => {\r\n\r\n    const { state } = useDataLayer()\r\n    const [stocks, setStocks] = useState([])\r\n    //const [metadata, setMetadata] = useState(\"\")\r\n    //tenemos que comprobar que cuando entramos al dashboard (por segunda vez), si hay algun stock nuevo que antes no tuviesemos\r\n    useEffect(() => {\r\n        if (state.areHistoricPricesReady > 0) {\r\n            console.log(state.currentPossesions, \"los tenemos\")\r\n            setStocks(state.currentPossesions.stocks)\r\n            //getHistoricals(state.currentPossesions.stocks)\r\n        }\r\n    }, [state.areHistoricPricesReady])\r\n\r\n    \r\n\r\n    return (\r\n        <div\r\n            className=\"user-dashboard\"\r\n        >\r\n            { stocks.length > 0\r\n                &&\r\n                stocks.map(asset => {\r\n                    return (\r\n                        <div\r\n                            className=\"user-dashboard--item\"\r\n                            key={asset.ticker}\r\n                        >\r\n\r\n                            <StockDispatcher\r\n                                ticker={asset.ticker.toUpperCase()}\r\n                            />\r\n                        </div>\r\n                    )\r\n\r\n                }\r\n                )}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n// const getHistoricals = async (posesions) => {\r\n//     console.log(posesions, \"posesiones\")\r\n//     const tickersArr = posesions.map(item => item.ticker.toUpperCase())\r\n//     try {\r\n//         const request = await fetch(\"http://localhost:8001/portfolio?dates=true\", {\r\n//             headers: {\r\n//                 \"Content-Type\": \"application/json\"\r\n//             },\r\n//             method: \"POST\",\r\n//             body: JSON.stringify(tickersArr)\r\n//         })\r\n//         const datos = await request.json()\r\n//         const readyData = {}\r\n//         datos.forEach(item => {\r\n//             readyData[item.ticker] = { startDate: item.startDate, endDate: item.endDate }\r\n//         })\r\n//         setMetadata(readyData)\r\n//     }\r\n//     catch (err) {\r\n//         console.log(err)\r\n//     }\r\n// }","C:\\Users\\gonza\\finance-app\\src\\utils\\financeCalculations.js",[],"C:\\Users\\gonza\\finance-app\\src\\views\\principal\\elements\\News.js",["633","634","635","636","637","638","639"],"import React, { useEffect, useState, useRef } from 'react'\r\nimport { useFetch } from '../../../utils/useFetch'\r\nimport { useFetchWithCors } from '../../../utils/useFetchWithCors'\r\nimport { useParams } from \"react-router-dom\"\r\nimport { GridComposition, NewsItem, NewsItemOver } from '../../../components/NewsItem'\r\nimport { useViewport } from '../../../utils/useViewport'\r\nimport { CompassCalibrationOutlined } from '@material-ui/icons'\r\nimport { useIntersection } from 'react-use';\r\n\r\n\r\nexport const News = ({ principal = false, title, classnames }) => {\r\n    // const {data, loading, error} = useFetchWithCors(\"http://localhost:8001/news\", \"news\", true)\r\n    const { category } = useParams()\r\n    const options = { explicitUrl: true }\r\n    const { datos, loading, error } = useFetch(`https://finnhub.io/api/v1/news?category=${category}&token=btm6dp748v6ud360stcg`, category, \"news\", options)\r\n\r\n    const [datosGrid, setDatosGrid] = useState(\"\")\r\n    const [newsPerPage, setNewsPerPage] = useState(4)\r\n    const debounce = useRef(false)\r\n    const { viewport } = useViewport()\r\n\r\n    const intersectionRef = React.useRef(null);\r\n    const intersection = useIntersection(intersectionRef, {\r\n        root: null,\r\n        rootMargin: '0px',\r\n        threshold: 1\r\n    });\r\n\r\n    const isLoadingImgs = useRef()\r\n    const arrangeDatos = (data) => {\r\n        let gridArr = []\r\n        let initialNum = 0\r\n        let finalNum = 3\r\n        Array(Math.round(data.length / 3)).fill(0).forEach(() => {\r\n            let chunk = data.slice(initialNum, finalNum)\r\n            gridArr = [...gridArr, chunk]\r\n            initialNum += 3\r\n            finalNum += 3\r\n            console.log(finalNum, \"xii\")\r\n        })\r\n        console.log(gridArr, \"xwww\")\r\n        setDatosGrid(gridArr)\r\n    }\r\n    useEffect(() => {\r\n        if (datos.length > 0) {\r\n            arrangeDatos(datos)\r\n        }\r\n    }, [datos])\r\n\r\n    const [showingSkeletong, setShowingSkeleton] = useState(false)\r\nconsole.log(intersection, \"intersec\")\r\nlet debounceTimer\r\n    useEffect(() => { \r\n        if (intersection && intersection.intersectionRatio < 1.5 && !debounce.current) {\r\n            setNewsPerPage(prev => prev + 1)\r\n            debounce.current = true\r\n            debounceTimer = setTimeout(()=>{\r\n                debounce.current = false\r\n                clearTimeout(debounceTimer)\r\n            }, 500)\r\n        }\r\n\r\n    }, [intersection])\r\n\r\n    console.log(datos.length, \"ojones\")\r\n    return (\r\n        <div className={classnames}>\r\n            {   datos.length > 0 && principal ?\r\n                <>\r\n                    {loading && <p>loading...</p>}\r\n                    {error && <p>{error}</p>}\r\n\r\n\r\n                    <> {viewport < 1000 ?\r\n                        datos.map(item => <NewsItem item={item} />)\r\n                        :\r\n                        (<>\r\n\r\n                            { datosGrid && datosGrid.slice(1, newsPerPage).map((item, index) =>\r\n                                <GridComposition\r\n                                    key={index}\r\n                                    chunk={item}\r\n                                    index={index}\r\n                                />)}\r\n                            {/* { datos && datos.slice(3, datos.length).map(item => <NewsItemOver item={item} />)} */}\r\n                        </>)\r\n                    }\r\n                    </>\r\n\r\n                </>\r\n                :\r\n                <>\r\n                    {datos.length > 0 && datos.map(item => <NewsItem item={item} />)}\r\n                </>\r\n            }\r\n            {datos.length && <div\r\n                ref={intersectionRef}\r\n                style={{ height: \"20px\" }}\r\n            ></div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nNews.defaultProps = {\r\n    title: () => null\r\n}","C:\\Users\\gonza\\finance-app\\src\\dashboard\\LateralSection.js",[],"C:\\Users\\gonza\\finance-app\\src\\views\\principal\\elements\\TickerBar2.js",[],"C:\\Users\\gonza\\finance-app\\src\\views\\company\\CompanyChart.js",["640","641","642","643","644","645","646","647","648","649","650","651","652"],"C:\\Users\\gonza\\finance-app\\src\\views\\indexes\\Constituents.js",["653","654","655"],"import { Table, TableBody, TableCell, TableHead, TableRow } from \"@material-ui/core\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { CustomCircularProgress } from \"../../components/components/CustomCircularProgress\";\r\nimport { useDataLayer } from \"../../Context\";\r\nimport { useFatch } from \"../../utils/useFatch\";\r\n\r\nexport const Constituents = ({ category, categorySan }) => {\r\n\r\n    const { state, dispatch } = useDataLayer()\r\n    const subCategory = \"constituents\"\r\n    const url = `https://finnhub.io/api/v1/index/constituents?symbol=${categorySan[1]}&token=btm6dp748v6ud360stcg`\r\n    const options = { explicitUrl: true }\r\n    const debounce = useRef(false)\r\n    const { datos, loading, error } = useFatch(url, subCategory, category, options)\r\n    const readyTickers = useRef({})\r\n    const [constituents, setConstituents] = useState(\"\")\r\n    // const functionPromise =(ticker)=>{\r\n    //     return (fetch(`https://finnhub.io/api/v1/quote?symbol=${ticker}&token=btm6dp748v6ud360stcg`)\r\n    //     .then(res=>res.json())\r\n    //     .then(res=>{readyTickers.current[ticker]=res})\r\n    //     .catch(err=>err.message))\r\n    // }\r\n    // useEffect(()=>{\r\n    //     const fetchAllIndexConstituents =async(arr)=>{\r\n    //         return await Promise.all(arr.map(ticker=>functionPromise(ticker)))\r\n    //     }\r\n    //     if(state.indexes[category] && state.indexes[category][subCategory]){\r\n    //         const constituentsArr = state.indexes[category][subCategory]\r\n    //         console.log(constituentsArr, \"gogol\")\r\n    //        const dataFinal = fetchAllIndexConstituents(constituentsArr.constituents)\r\n    //        console.log(dataFinal, \"gogo\")\r\n    //     }\r\n    // },[state.indexes])\r\n\r\n    useEffect(() => {\r\n        fetch(\"http://localhost:8001/prueba\")\r\n            .then(res => res.json())\r\n            .then(res => { console.log(res) })\r\n            .catch(err => err.message)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        console.log(\"executed\", category)\r\n        if (state.indexes[category] && state.indexes[category][subCategory]) {\r\n            console.log(state.indexes[category][subCategory], \"pota\")\r\n            fetch(`http://localhost:8001/indexes/constituents/${category}`, {\r\n                body: JSON.stringify({ ticker: state.indexes[category][subCategory].constituents }),\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => { setConstituents(res.data) })\r\n                .catch(err => { console.log(err.message) })\r\n            // .then(res=>{res.json()})\r\n            // .then(res=>{setConstituents(res )})\r\n        }\r\n    }, [state.indexes, category, debounce])\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            {loading && <CustomCircularProgress />}\r\n            {error && <p>{error}</p>}\r\n            {/* {datos.constituents && datos.constituents.length > 0 && datos.constituents.map(item => <p>{JSON.stringify(item, null, 2)}</p>)} */}\r\n            { constituents && (<Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                       <TableCell>ticker</TableCell>\r\n                       <TableCell>open</TableCell>\r\n                       <TableCell>close</TableCell>\r\n                       <TableCell>high</TableCell>\r\n                       <TableCell>low</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {constituents.map(item => <TableRow>\r\n                        <TableCell>{item.ticker}</TableCell>\r\n                        <TableCell>{item.open}</TableCell>\r\n                        <TableCell>{item.close}</TableCell>\r\n                        <TableCell>{item.high}</TableCell>\r\n                        <TableCell>{item.low}</TableCell>\r\n                    </TableRow>)}\r\n                </TableBody>\r\n            </Table>)\r\n            }\r\n            {/* {constituents && constituents.map(item => <ul>{Object.keys(item).map(fieldname => <li>{item[fieldname]}</li>)}</ul>)} */}\r\n        </>\r\n    )\r\n\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\views\\principal\\principal.js",["656","657","658","659","660"],"C:\\Users\\gonza\\finance-app\\src\\Personas\\PeopleRouter.tsx",[],"C:\\Users\\gonza\\finance-app\\src\\views\\company\\FinancialStatements\\IncomeStatement.js",["661","662","663","664","665"],"import React from 'react'\r\nimport {\r\n    Collapse,\r\n    IconButton,\r\n    makeStyles,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    withStyles,\r\n} from \"@material-ui/core\";\r\nimport { Collapsible, TableSectionAlone, TableSectionChunk, TableSubSubtitleChunk, TableSubtitleChunk } from '../Rows'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: \"white\",\r\n        borderRadius: \"10px\",\r\n        margin: \"0 auto\",\r\n        width: \"100%\",\r\n        // [theme.breakpoints.up(\"sm\")]: {\r\n        //     width: \"700px\"\r\n        // },\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            width: \"1000px\"\r\n        },\r\n        [theme.breakpoints.up(\"lg\")]: {\r\n            width: \"1250px\"\r\n        }\r\n    }\r\n}))\r\n\r\nexport const IncomeStatement = ({ anualdata, readyData }) => {\r\n    //lgconst nestedHackWidth = 175\r\n    const nestedHackWidth = 138\r\n    const classes = useStyles()\r\n    console.log(readyData, \"liisto\")\r\n    return (\r\n        <TableContainer\r\n            classes={{\r\n                root: classes.root,\r\n            }}\r\n        >\r\n            <Table >\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell colSpan={3} />\r\n                        {anualdata.current &&\r\n                            Object.keys(anualdata.current).map((year) => (\r\n                                <TableCell\r\n                                    align=\"right\"\r\n                                >{year}</TableCell>\r\n                            ))}\r\n                    </TableRow>\r\n                </TableHead>\r\n\r\n                {/* {readyData && Object.keys(readyData).map(item=>{\r\n           if(readyData)\r\n       }) } */}\r\n                {/* <TableRow>\r\n                    <TableCell>Total Current Assets</TableCell>\r\n                    {readyData && Object.keys(readyData[\"totalCurrentAssets\"]).map(date => <TableCell>{readyData[\"totalCurrentAssets\"][date]}</TableCell>)}\r\n                </TableRow> */}\r\n                {/* <Collapsible\r\n                    renderTitleSection={\r\n                        (injectedOpen, setInjectedOpen) => <TableSectionChunk\r\n                            open={injectedOpen}\r\n                            setOpen={setInjectedOpen}\r\n                            title=\"Total Revenue\"\r\n                            data={readyData}\r\n                            lookupKey=\"\"\r\n                        />\r\n                    }\r\n                >\r\n                </Collapsible> */}\r\n                <TableSectionAlone title=\"Total Revenue\" lookupKey=\"totalRevenue\" data={readyData} />\r\n                <TableSectionAlone title=\"Cost Of Revenue\" lookupKey=\"costOfRevenue\" data={readyData} />\r\n                <TableSectionAlone title=\"Gross Profit\" lookupKey=\"grossProfit\" data={readyData} />\r\n                <TableSectionAlone title=\"Total Operating Expense\" lookupKey=\"totalOperatingExpense\" data={readyData} />\r\n                <Collapsible\r\n                    renderTitleSection={(injectedOpen, setInjectedOpen) => <TableSectionChunk title=\"Total Operating Expense\"\r\n                        open={injectedOpen}\r\n                        setOpen={setInjectedOpen}\r\n                        lookupKey=\"totalOperatingExpense\"\r\n                        data={readyData}\r\n                    />}\r\n                >\r\n                    <TableSubtitleChunk title=\"selling / General / Administrative\" lookupKey=\"sellingGeneralAdministrative\" data={readyData}\r\n                    hackWidth={nestedHackWidth}/>\r\n                    <TableSubtitleChunk title=\"research & Development\" lookupKey=\"researchAndDevelopment\" data={readyData}\r\n                    hackWidth={nestedHackWidth}/>\r\n                    <TableSubtitleChunk title=\"interest Expense\" lookupKey=\"interestExpense\" data={readyData}\r\n                    hackWidth={nestedHackWidth}/>\r\n                    <TableSubtitleChunk title=\"Other Operating Expense\" lookupKey=\"otherOperatingExpense\" data={readyData}\r\n                    hackWidth={nestedHackWidth}/>\r\n                </Collapsible>\r\n                <TableSectionAlone title=\"Operating Income\" lookupKey=\"operatingIncome\" data={readyData} />\r\n                <TableSectionAlone title=\"Net Interest Income (Expense)\" lookupKey=\"netInterestIncome\" data={readyData} />\r\n                <TableSectionAlone title=\"Net Income\" lookupKey=\"netIncome\" data={readyData} />\r\n                <TableSectionAlone title=\"Extraordinary items\" lookupKey=\"extraordinaryItems\" data={readyData} />\r\n                <TableSectionAlone title=\"Non Recurring\" lookupKey=\"nonRecurring\" data={readyData} />\r\n                <TableSectionAlone title=\"Ordinary Net Income\" lookupKey=\"netIncomeFromContinuingOperations\" data={readyData} />\r\n                <TableSectionAlone title=\"Income Tax Expenses\" lookupKey=\"incomeTaxExpense\" data={readyData} />\r\n                <TableSectionAlone title=\"Discontinued Operations\" lookupKey=\"discontinuedOperations\" data={readyData} />\r\n                <TableSectionAlone title=\"Tax Provision\" lookupKey=\"taxProvision\" data={readyData} />\r\n                {/* <Collapsible fieldName=\"total assets\"\r\n                    renderTitleSection={(injectedOpen, setInjectedOpen) => <TableSectionChunk title=\"Total Assets\"\r\n                        open={injectedOpen}\r\n                        setOpen={setInjectedOpen}\r\n                        lookupKey=\"totalAssets\"\r\n                        data={readyData}\r\n                    />}\r\n                >\r\n\r\n                    <TableSubtitleChunk title=\"Property / Plant / Equipment\" lookupKey=\"propertyPlantEquipment\" data={readyData}\r\n\r\n                    />\r\n                    <TableSubSubtitleChunk title=\"Accumulated Depreciation\" lookupKey=\"accumulatedDepreciation\" data={readyData} />\r\n                    <TableSubtitleChunk title=\"Goodwill\" lookupKey=\"goodwill\" data={readyData} />\r\n                    <TableSubtitleChunk title=\"Intangibles\" lookupKey=\"intangibleAssets\" data={readyData} />\r\n                    <TableSubtitleChunk title=\"Long Term Investments\" lookupKey=\"longTermInvestments\" data={readyData} />\r\n                    <TableSubtitleChunk title=\"Other Assets\" lookupKey=\"otherAssets\" data={readyData} />\r\n                    <TableSubtitleChunk title=\"Other Non Current Assets\" lookupKey=\"otherNonCurrrentAssets\" data={readyData} />\r\n                </Collapsible>\r\n                <Collapsible fieldName=\"total assets\"\r\n                    renderTitleSection={(injectedOpen, setInjectedOpen) => <TableSectionChunk title=\"Total Current Liabilities\"\r\n                        open={injectedOpen}\r\n                        setOpen={setInjectedOpen}\r\n                        lookupKey=\"totalCurrentLiabilities\"\r\n                        data={readyData}\r\n                    />}\r\n                >\r\n                    <TableSubtitleChunk title=\"Accounts Payable\" lookupKey=\"accountsPayable\" data={readyData} />\r\n                    <TableSubtitleChunk title=\"Current Long Term Debt\" lookupKey=\"currentLongTermDebt\" data={readyData} />\r\n                    <TableSubtitleChunk title=\"Other Current Liabilities\" lookupKey=\"otherCurrentLiabilities\" data={readyData} />\r\n                </Collapsible>\r\n                <Collapsible fieldName=\"total assets\"\r\n                    renderTitleSection={(injectedOpen, setInjectedOpen) => <TableSectionChunk title=\"Total Non Current Liabilities\"\r\n                        open={injectedOpen}\r\n                        setOpen={setInjectedOpen}\r\n                        lookupKey=\"totalNonCurrentLiabilities\"\r\n                        data={readyData}\r\n                    />}\r\n                >\r\n                    <TableSubtitleChunk title=\"Total Long Term Debt\" lookupKey=\"totalLongTermDebt\" data={readyData} />\r\n                    <TableSubSubtitleChunk title=\"Long Term Debt\" lookupKey=\"longTermDebt\" data={readyData} />\r\n                    <TableSubSubtitleChunk title=\"Other Non Current Liabilities\" lookupKey=\"otherNonCurrentLiabilities\" data={readyData} />\r\n                    <TableSubSubtitleChunk title=\"Long Liabilities\" lookupKey=\"otherLiabilities\" data={readyData} />\r\n                </Collapsible>\r\n                <Collapsible fieldName=\"total assets\"\r\n                    renderTitleSection={(injectedOpen, setInjectedOpen) => <TableSectionChunk title=\"Total Equity\"\r\n                        open={injectedOpen}\r\n                        setOpen={setInjectedOpen}\r\n                        lookupKey=\"totalShareholderEquity\"\r\n                        data={readyData}\r\n                    />}\r\n                >\r\n                    <TableSubSubtitleChunk title=\"Redeemable Preferred Stock, Total\" lookupKey=\"preferredStockRedeemable\" data={readyData} />\r\n                    <TableSubSubtitleChunk title=\"Preferred Stock\" lookupKey=\"preferredStockTotalEquity\" data={readyData} />\r\n                    <TableSubSubtitleChunk title=\"Common Stock, Total\" lookupKey=\"commonStock\" data={readyData} />\r\n                    <TableSubSubtitleChunk title=\"Additional Paid-in Capital\" lookupKey=\"additionalPaidInCapital\" data={readyData} />\r\n                    <TableSubSubtitleChunk title=\"Retained Earnings (Accumulated Deficit)\" lookupKey=\"retainedEarnings\" data={readyData} />\r\n                    <TableSubSubtitleChunk title=\"Retained Earnings (Accumulated Deficit)\" lookupKey=\"treasuryStock\" data={readyData} />\r\n                    <TableSubSubtitleChunk title=\"Other Equity\" lookupKey=\"otherShareholderEquity\" data={readyData} />\r\n                </Collapsible>\r\n                <TableSectionAlone\r\n                    title=\"Total Liabilities & Shareholders' Equity\" lookupKey=\"liabilitiesAndShareholderEquity\"\r\n                    data={readyData}\r\n                />\r\n                <TableSectionAlone\r\n                    title=\"Total Preferred Shares Outstanding\" lookupKey=\"preferredStockTotalEquity\"\r\n                    data={readyData}\r\n                />\r\n                <TableSectionAlone\r\n                    title=\"Total Common Shares Outstanding\" lookupKey=\"commonStockSharesOutstanding\"\r\n                    data={readyData}\r\n                /> */}\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}\r\n\r\n\r\n// Total Revenue\t64698\t59685\t58313\t91819\r\n// Cost of Revenue, Total\t40009\t37005\t35943\t56602\r\n// Gross Profit\t24689\t22680\t22370\t35217\r\n// Total Operating Expenses\t49923\t46594\t45460\t66250\r\n// Selling/General/Admin. Expenses, Total\t4936\t4831\t4952\t5197\r\n// Research & Development\t4978\t4758\t4565\t4451\r\n// Depreciation / Amortization\t-\t-\t-\t-\r\n// Interest Expense (Income) - Net Operating\t-\t-\t-\t-\r\n// Unusual Expense (Income)\t-\t-\t-\t-\r\n// Other Operating Expenses, Total\t-\t-\t-\t-\r\n// Operating Income\t14775\t13091\t12853\t25569\r\n// Interest Income (Expense), Net Non-Operating\t134\t204\t292\t260\r\n// Gain (Loss) on Sale of Assets\t-\t-\t-\t-\r\n// Other, Net\t-8\t-158\t-10\t89\r\n// Net Income Before Taxes\t14901\t13137\t13135\t25918\r\n// Provision for Income Taxes\t2228\t1884\t1886\t3682\r\n// Net Income After Taxes\t12673\t11253\t11249\t22236\r\n// Minority Interest\t-\t-\t-\t-\r\n// Equity In Affiliates\t-\t-\t-\t-\r\n// U.S GAAP Adjustment\t-\t-\t-\t-\r\n// Net Income Before Extraordinary Items\t12673\t11253\t11249\t22236\r\n// Total Extraordinary Items\t-\t-\t-\t-\r\n// Net Income\t12673\t11253\t11249\t22236\r\n// Total Adjustments to Net Income\t-\t-\t-\t-\r\n// Income Available to Common Excluding Extraordinary Items\t12673\t11253\t11249\t22236\r\n// Dilution Adjustment\t-\t-\t-\t-\r\n// Diluted Net Income\t12673\t11253\t11249\t22236\r\n// Diluted Weighted Average Shares\t17256.52\t17419.15\t17618.76\t17818.42\r\n// Diluted EPS Excluding Extraordinary Items\t0.73\t0.65\t0.64\t1.25\r\n// DPS - Common Stock Primary Issue\t0.2\t0.2\t0.19\t0.19\r\n// Diluted Normalized EPS","C:\\Users\\gonza\\finance-app\\src\\views\\seguidores\\Likes.tsx",["666","667"],"import React, { useEffect, useState } from 'react'\r\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt';\r\nimport ThumbDownAltIcon from '@material-ui/icons/ThumbDownAlt';\r\nimport { Badge, IconButton } from '@material-ui/core';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport {PostPnp, Post} from \"./FeedViews\"\r\ninterface Props {\r\n    post: PostPnp | Post,\r\n    handleLike: (postId: number) => void,\r\n}\r\n\r\nexport const Likes: React.FC<Props> = ({ post, handleLike }) => {\r\n    const {likes, usersLiked, postId} = post\r\n    const userName = \"Manilox\"\r\n    const [isLiked, setIsLiked] = useState(false)\r\n    useEffect(() => {\r\n        const isLiked = usersLiked.find(username => username === userName)\r\n        setIsLiked(!!isLiked)\r\n    }, [usersLiked])\r\n    return (\r\n        <div>\r\n\r\n            <IconButton\r\n                onClick={()=>handleLike(postId)}\r\n            >\r\n                <Badge badgeContent={likes} color=\"primary\"\r\n                    style={{ height: \"15px\", minWidth: \"15px\", padding: 0 }}\r\n                >\r\n                    <FavoriteIcon \r\n                    style={{ color: isLiked ? \"red\" : \"blue\" }}\r\n                    />\r\n                </Badge>\r\n            </IconButton>\r\n\r\n        </div>\r\n    )\r\n}\r\n",["668","669"],"C:\\Users\\gonza\\finance-app\\src\\views\\company\\DetailsSquare.js",["670","671"],"import { List, ListItem, ListItemText } from '@material-ui/core';\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { useDataLayer } from '../../Context';\r\n\r\nexport const DetailsSquare = ({ticker}) => {\r\n    const {state, dispatch } = useDataLayer()\r\n  const url = \"https://www.alphavantage.co/query?function=OVERVIEW\";\r\n  \r\n  const apiKey = \"btm6dp748v6ud360stcg\";\r\n  const [data, setData] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n\r\n\r\n  const kaka = useRef(0)\r\n  kaka.current = kaka.current + 1\r\n  useEffect(() => {\r\n    console.log(\"vas\")\r\n    //we need to check what happends if we pass undefined,\r\n    if(!state.keymetrics[ticker] || !state.keymetrics[ticker] === undefined){\r\n      console.log(kaka.current, \"kaka\")\r\n      console.log(\"que coño\", state.keymetrics[ticker])\r\n      setLoading(true);\r\n      fetch(`${url}&symbol=${ticker}&apikey=${apiKey}`)\r\n        .then((data) => data.json())\r\n        .then((data) => {\r\n          setLoading(false);\r\n          setData(data);\r\n        })\r\n        .catch((err) => {\r\n          setError(err.message);\r\n        });\r\n    }else{\r\n      //we are updating data in localstorage to inicialice initial state of the reducer every time we start the app\r\n      setData(state.keymetrics[ticker])\r\n      //data is already saved into localstorage\r\n      //localStorage.setItem(\"keymetrics\", JSON.stringify(state.keymetrics))\r\n    }\r\n  }, [state]);\r\n\r\n  useEffect(() => {\r\n    if(!state.keymetrics[ticker]){\r\n      data && dispatch({type: \"STORE_DATA\", payload: {ticker: ticker, field: \"keymetrics\", value: data}})\r\n    }\r\n  }, [data])\r\n    return (\r\n        <>\r\n        {loading && <p>cargando..</p>}\r\n      {error && <p>{error}</p>}\r\n      {data && (\r\n        <List>\r\n            <ListItem>\r\n              <ListItemText>Sector</ListItemText>\r\n              <ListItemText>{data.Sector}</ListItemText>\r\n            </ListItem>\r\n            <ListItem>\r\n              <ListItemText>Industry</ListItemText>\r\n              <ListItemText>{data.Industry}</ListItemText>\r\n            </ListItem>\r\n          </List>)}\r\n          </>\r\n    )\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\views\\principal\\elements\\Sectors.js",[],"C:\\Users\\gonza\\finance-app\\src\\components\\Cell.js",[],"C:\\Users\\gonza\\finance-app\\src\\portfolio\\useCompaniesChange.js",["672","673","674"],"C:\\Users\\gonza\\finance-app\\src\\components\\Sidebar.js",["675","676","677","678"],"/* tslint:disable */\r\n\r\nimport {\r\n  Box,\r\n  Divider,\r\n  Drawer,\r\n  IconButton,\r\n  List,\r\n  makeStyles,\r\n  Typography,\r\n  useTheme,\r\n} from \"@material-ui/core\";\r\nimport clsx from \"clsx\";\r\nimport React, { useEffect } from \"react\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\r\nimport MailIcon from \"@material-ui/icons/Mail\";\r\nimport { TreeItem, TreeView } from \"@material-ui/lab\";\r\nimport { StyledTreeItem } from \"./components/treeItem\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Label from '@material-ui/icons/Label';\r\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport ForumIcon from '@material-ui/icons/Forum';\r\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { useUILayer } from \"../ContextUI\";\r\nimport { useDataLayer } from \"../Context\";\r\nimport { useViewport } from \"../utils/useViewport\";\r\n\r\nconst drawerWidth = 240;\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n    whiteSpace: \"nowrap\",\r\n  },\r\n  drawerOpen: {\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerClose: {\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    overflowX: \"hidden\",\r\n    width: theme.spacing(7) + 1,\r\n    [theme.breakpoints.down(\"sm\")]:{\r\n      width: 0\r\n    },\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9) + 1,\r\n    },\r\n  },\r\n  toolbar: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    height: \"112px\"\r\n  },\r\n  listItemText: {\r\n    width: \"100%\",\r\n    overflow: \"hidden\"\r\n    //necesary to make textOverflow work\r\n  },\r\n  textSpan: {\r\n    display: \"block\",\r\n    whiteSpace: \"nowrap\",\r\n    width: \"100%\",\r\n    textOverflow: \"ellipsis\",\r\n    overflow: \"hidden\"\r\n  }\r\n}));\r\n\r\n//ad open if not works\r\nexport const Sidebar = ({ handleDrawerClose, handleDrawerOpen, expanded, handleSidebarToggle }) => {\r\n  const history = useHistory()\r\n  \r\n  const theme = useTheme();\r\n  const {viewport} = useViewport()\r\n  const { sidebarOpen } = useUILayer()\r\n  const { state } = useDataLayer()\r\n  const classes = useStyles({viewport});\r\n\r\n  const [selected, setSelected] = React.useState(\"\");\r\n\r\n  const handleSelect = (event, nodeIds) => {\r\n    setSelected(nodeIds);\r\n  };\r\n\r\n\r\n  return (\r\n    <Drawer\r\n    variant={viewport > 600 ? \"permanent\":\"temporary\"}\r\n      className={clsx(classes.drawer, {\r\n        [classes.drawerOpen]: sidebarOpen,\r\n        [classes.drawerClose]: !sidebarOpen,\r\n      })}\r\n      classes={{\r\n        paper: clsx({\r\n          [classes.drawerOpen]: sidebarOpen,\r\n          [classes.drawerClose]: !sidebarOpen,\r\n        }),\r\n      }}\r\n      //this is for the movile version\r\n      open={sidebarOpen}\r\n    >\r\n      <div className={classes.toolbar}>\r\n        <IconButton onClick={handleDrawerClose}>\r\n          {theme.direction === \"rtl\" ? (\r\n            <ChevronRightIcon />\r\n          ) : (\r\n              <ChevronLeftIcon />\r\n            )}\r\n        </IconButton>\r\n      </div>\r\n      <Divider />\r\n      <TreeView\r\n        style={{ margin: \"1rem 0\" }}\r\n\r\n        // defaultCollapseIcon={<ArrowDropDownIcon />}\r\n        // defaultExpandIcon={<ArrowRightIcon />}\r\n        defaultEndIcon={<div style={{ width: 24 }} />}\r\n        expanded={expanded}\r\n        selected={selected}\r\n        onMouseEnter={handleDrawerOpen}\r\n        onMouseLeave={handleDrawerClose}\r\n        onNodeToggle={handleSidebarToggle}\r\n        onNodeSelect={handleSelect}\r\n      >\r\n        <StyledTreeItem nodeId=\"13\" labelText=\"Search\" labelIcon={SearchIcon} isTitle\r\n          ariaLabel=\"search\"\r\n          onLabelClick={() => { history.push(\"/\") }}\r\n        />\r\n        <StyledTreeItem nodeId=\"14\" labelText=\"People\" labelIcon={SearchIcon} isTitle\r\n          ariaLabel=\"People\"\r\n          onLabelClick={() => { history.push(\"/people\") }}\r\n        />\r\n        <StyledTreeItem nodeId=\"1\" labelText=\"Indexes\" labelIcon={MailIcon} isTitle\r\n\r\n        >\r\n          <StyledTreeItem\r\n            nodeId=\"2\"\r\n            labelText=\"S&P 500\"\r\n            labelIcon={SupervisorAccountIcon}\r\n            labelInfo=\"90\"\r\n            color=\"#1a73e8\"\r\n            bgColor=\"#e8f0fe\"\r\n            onLabelClick={() => { history.push(\"/indexes/sp500\") }}\r\n\r\n          />\r\n          <StyledTreeItem\r\n            nodeId=\"3\"\r\n            labelText=\"NASDAQ\"\r\n            labelIcon={InfoIcon}\r\n            labelInfo=\"2,294\"\r\n            color=\"#e3742f\"\r\n            bgColor=\"#fcefe3\"\r\n            onLabelClick={() => { history.push(\"/indexes/nasdaq\") }}\r\n\r\n          />\r\n          <StyledTreeItem\r\n            nodeId=\"4\"\r\n            labelText=\"Major INDEXES\"\r\n            labelIcon={ForumIcon}\r\n            labelInfo=\"3,566\"\r\n            color=\"#a250f5\"\r\n            bgColor=\"#f3e8fd\"\r\n            onLabelClick={() => { history.push(\"/indexes/general\") }}\r\n          />\r\n        </StyledTreeItem>\r\n\r\n        {/* <StyledTreeItem nodeId=\"7\" labelText=\"Sectors\" labelIcon={DeleteIcon} isTitle /> */}\r\n        <StyledTreeItem nodeId=\"8\" labelText=\"News\" labelIcon={Label} isTitle>\r\n          <StyledTreeItem\r\n            nodeId=\"9\"\r\n            labelText=\"General\"\r\n            labelIcon={SupervisorAccountIcon}\r\n            labelInfo=\"90\"\r\n            color=\"#1a73e8\"\r\n            bgColor=\"#e8f0fe\"\r\n            onLabelClick={() => { history.push(\"/news/general\") }}\r\n          />\r\n          <StyledTreeItem\r\n            nodeId=\"10\"\r\n            labelText=\"Forex\"\r\n            labelIcon={InfoIcon}\r\n            labelInfo=\"2,294\"\r\n            color=\"#e3742f\"\r\n            bgColor=\"#fcefe3\"\r\n            onLabelClick={() => { history.push(\"/news/forex\") }}\r\n          />\r\n          <StyledTreeItem\r\n            nodeId=\"11\"\r\n            labelText=\"Crypto\"\r\n            labelIcon={ForumIcon}\r\n            labelInfo=\"3,566\"\r\n            color=\"#a250f5\"\r\n            bgColor=\"#f3e8fd\"\r\n            onLabelClick={() => { history.push(\"/news/crypto\") }}\r\n          />\r\n          <StyledTreeItem\r\n            nodeId=\"12\"\r\n            labelText=\"Merger\"\r\n            labelIcon={LocalOfferIcon}\r\n            labelInfo=\"733\"\r\n            color=\"#3c8039\"\r\n            bgColor=\"#e6f4ea\"\r\n            onLabelClick={() => { history.push(\"/news/merger\") }}\r\n          />\r\n        </StyledTreeItem>\r\n        <StyledTreeItem nodeId=\"14\" labelText=\"Covid-19\" labelIcon={DeleteIcon}\r\n          isTitle\r\n          onClick={(e) => { history.push(\"/covid19\") }}\r\n        />\r\n      </TreeView>\r\n      <Divider />\r\n      <List\r\n      >\r\n\r\n        {state.visitedCompanies.length > 0 && state.visitedCompanies.map((company, index) => (\r\n          <ListItem button key={company.ticker}\r\n          >\r\n            {/* <ListItemIcon>\r\n              {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\r\n            </ListItemIcon> */}\r\n            <ListItemIcon>\r\n              <Typography>{company.ticker}</Typography>\r\n            </ListItemIcon>\r\n\r\n            <ListItemText\r\n              primary={company.name}\r\n              classes={{\r\n                root: classes.listItemText,\r\n                primary: classes.textSpan\r\n              }}\r\n            />\r\n          </ListItem>\r\n\r\n        ))}\r\n\r\n      </List>\r\n    </Drawer>\r\n  );\r\n};\r\n","C:\\Users\\gonza\\finance-app\\src\\views\\company\\ControllerCompany.js",["679","680"],"import React, { useRef, useEffect } from 'react'\r\nimport { Route, Switch, useHistory, useRouteMatch } from \"react-router-dom\";\r\nimport { KeymetricsChart } from '../../charts/KeymetricsChart';\r\nimport { useUILayer } from '../../ContextUI';\r\nimport { useMountApproval } from '../../utils/useMountApproval';\r\nimport { CovidSection2 } from '../covid/CovidSection2';\r\nimport { News } from '../principal/elements/News';\r\nimport { CompanySection } from './CompanySection';\r\nimport { Financials } from './Financials';\r\n\r\n\r\nexport const ControllerCompany = () => {\r\n    const history = useHistory()\r\n    const { path } = useRouteMatch()\r\n    useMountApproval()\r\n    const chart = useRef(null);\r\n    const { sidebarOpen } = useUILayer()\r\n    const initial = useRef(true)\r\n    useEffect(() => {\r\n        console.log(chart, \"puta\")\r\n        console.log(chart.current, \"puta2\")\r\n        if (chart.current && Object.keys(chart.current).length > 0 && !initial.current) {\r\n            setTimeout(() => {\r\n                chart.current.reflow()\r\n            }, 200)\r\n        }\r\n        initial.current = false\r\n    }, [sidebarOpen, history])\r\n\r\n    return (\r\n        <Switch>\r\n            <Route path={`${path}/overview/:company`} exact>\r\n                <CompanySection ref={chart} />\r\n            </Route>\r\n            <Route path={`${path}/keymetrics/:company`} exact>\r\n                <KeymetricsChart />\r\n            </Route>\r\n            <Route path={`${path}/financials/:company`} exact>\r\n                <Financials />\r\n            </Route>\r\n        </Switch>\r\n    )\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\utils\\useMesure.js",["681"],"import React, { useEffect, useState } from 'react'\r\nimport { useViewport } from './useViewport'\r\n\r\nexport const useMesure = (ref) => {\r\n    //we also make sure we respnond ref dimension change due to viewport changes\r\n    const {viewport} = useViewport()\r\n\r\n    const [{ height, width }, setDimensions] = useState({\r\n        height: 60,\r\n        width: 0\r\n    })\r\n    useEffect(() => {\r\n        if (ref.current) {\r\n            setDimensions({\r\n                height: ref.current.offsetHeight,\r\n                width: ref.current.offsetWidth,\r\n            })\r\n        }\r\n    }, [ref, viewport])\r\n\r\n    return (\r\n        { height, width }\r\n    )\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\components\\Multioption.js",["682","683","684"],"import { Chip, ClickAwayListener, FormControl, Input, InputLabel, makeStyles, MenuItem, Select, useTheme } from '@material-ui/core'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport DoneIcon from '@material-ui/icons/Done';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n        maxWidth: 300,\r\n    },\r\n    chips: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    chip: {\r\n        margin: 2,\r\n    },\r\n    noLabel: {\r\n        marginTop: theme.spacing(3),\r\n    },\r\n}));\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n    PaperProps: {\r\n        style: {\r\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n            width: 250,\r\n        },\r\n    },\r\n};\r\n\r\n\r\nexport const Multioption = ({ fields, setChosenFields, chosenFields }) => {\r\n    const [selections, setSelections] = useState(chosenFields)\r\n    const classes = useStyles()\r\n    const multiselector = useRef(null)\r\n    const theme = useTheme()\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    useEffect(()=>{\r\n        const closeMultiselector =(e)=>{\r\n            if(!multiselector.current.contains(e.target)){\r\n                setIsOpen(false)\r\n            }\r\n        }\r\n        window.addEventListener(\"click\", closeMultiselector)\r\n        return ()=>{\r\n            window.removeEventListener(\"click\", closeMultiselector)\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        setChosenFields(selections)\r\n    }, [selections])\r\n\r\n    const handleChipDelete =(val)=>{\r\n        setSelections(prev=>prev.filter(item=>item!==val))\r\n    }\r\n\r\n    return (\r\n        \r\n        <FormControl className={classes.formControl}\r\n        ref={multiselector}\r\n        >\r\n            <InputLabel id=\"demo-mutiple-chip-label\">Chip</InputLabel>\r\n            \r\n            <Select\r\n                labelId=\"demo-mutiple-chip-label\"\r\n                id=\"demo-mutiple-chip\"\r\n                open={isOpen}\r\n                onClick={(e)=>{ !isOpen && setIsOpen(true)}}\r\n                multiple\r\n                value={selections}\r\n                onChange={(e) => { setSelections(e.target.value) }}\r\n                input={<Input id=\"select-multiple-chip\" />}\r\n                renderValue={(selected) => (\r\n                    <div className={classes.chips}>\r\n                        {selected.map((value) => (\r\n                            <Chip\r\n                                key={value}\r\n                                label={value}\r\n                                className={classes.chip}\r\n                                clickable\r\n                                onDelete={()=>{handleChipDelete(value)}}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                )}\r\n                MenuProps={MenuProps}\r\n            >\r\n                {Object.keys(fields).map((name) => (\r\n                    <MenuItem key={name} value={name} style={getStyles(name, fields, theme)}>\r\n                        {name}\r\n                    </MenuItem>\r\n                ))}\r\n            </Select>\r\n        </FormControl>\r\n            \r\n   \r\n    )\r\n}\r\n\r\nfunction getStyles(name, fields, theme) {\r\n    return {\r\n        fontWeight:\r\n            Object.keys(fields).indexOf(name) === -1\r\n                ? theme.typography.fontWeightRegular\r\n                : theme.typography.fontWeightMedium,\r\n    };\r\n}","C:\\Users\\gonza\\finance-app\\src\\utils\\useMountApproval.js",["685","686"],"import React, { useEffect } from 'react'\r\nimport { useUILayer } from '../ContextUI'\r\n\r\nexport const useMountApproval = () => {\r\n    const { setMountApproval } = useUILayer()\r\n    useEffect(() => {\r\n        setMountApproval(false)\r\n\r\n    }, [])\r\n\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\views\\company\\FinancialOptions.js",["687","688","689"],"C:\\Users\\gonza\\finance-app\\src\\views\\company\\PeersSquare.js",["690","691","692","693","694","695","696","697"],"C:\\Users\\gonza\\finance-app\\src\\views\\covid\\Sliders.js",["698","699","700"],"import { FormControlLabel, makeStyles, Radio, RadioGroup, Slider } from '@material-ui/core'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: \"flex\",\r\n        height: \"100%\"\r\n    },\r\n    slider: {\r\n        margin: \"0 1.5rem\",\r\n    },\r\n    valueLabel: {\r\n        transform: \"scale(1)\",\r\n        top: 0,\r\n        left: \"1.5rem\"\r\n    }\r\n})\r\n\r\nexport const Sliders = ({ setDate, setMode }) => {\r\n\r\n    const [day, setDays] = useState(25)\r\n    const [month, setMonth] = useState(2)\r\n    const [year, setYear] = useState(2020)\r\n    const lastChosenYear = useRef(2020)\r\n    const sliderDay = useRef(null)\r\n    const [value, setValue] = useState(\"relative\")\r\n    // const monthName = useRef(\"Jan\")\r\n\r\n    const handleDaySlider = (e, newVal) => {\r\n        setDays(newVal)\r\n    }\r\n    const handleMonthSlider = (e, newVal) => {\r\n        setMonth(newVal)\r\n    }\r\n    const handleYearSlider = (e, newVal) => {\r\n        setYear(newVal)\r\n    }\r\n    const childnum = useRef(0)\r\n    const recursivadorStyle = (item) => {\r\n        childnum.current++\r\n        console.log(childnum.current)\r\n        try {\r\n            Array.from(item.children).forEach(itam => {\r\n                if (!itam.classList.contains(\"MuiSlider-valueLabel\")) {\r\n                    if (childnum.current === 1) {\r\n                        itam.style.transform = \"rotate(45deg)\"\r\n                    }\r\n                    else if (childnum.current === 2) {\r\n                        itam.style.transform = \"rotate(-45deg)\"\r\n                    }\r\n                }\r\n                recursivadorStyle(itam)\r\n            })\r\n        }\r\n        catch (err) {\r\n            console.log(\"child without descendants, lets\")\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (sliderDay.current) {\r\n            Array.from(sliderDay.current.children).forEach(item => {\r\n                if (item.classList.contains(\"MuiSlider-thumb\")) {\r\n                    Array.from(item.children).forEach(item => {\r\n                        recursivadorStyle(item)\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    }, [sliderDay])\r\n\r\n    useEffect(() => {\r\n        if (value) {\r\n            setMode(value)\r\n        }\r\n    }, [value])\r\n\r\n    const dateBuider = (month, day, year) => {\r\n        let dayc = day.toString().length < 2 ? `0${day.toString()}` : day.toString()\r\n        let monthc = month.toString().length < 2 ? `0${month.toString()}` : month.toString()\r\n\r\n        return `${year}-${monthc}-${dayc}`\r\n    }\r\n\r\n  \r\n    useEffect(() => {\r\n        if(year === lastChosenYear.current){\r\n            setDate(dateBuider(month, day, year))\r\n        }else{\r\n            setDays(1)\r\n            setMonth(1)\r\n        }\r\n        lastChosenYear.current = year\r\n    }, [month, day, year])\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <>\r\n        <div className=\"dates\">\r\n            <Slider\r\n                ref={sliderDay}\r\n                orientation=\"vertical\"\r\n                //getAriaValueText={valuetext}\r\n                value={day}\r\n                min={1}\r\n                max={marks[month - 1].days}\r\n                onChange={handleDaySlider}\r\n                valueLabelDisplay=\"on\"\r\n                defaultValue={30}\r\n                aria-labelledby=\"vertical-slider\"\r\n                marks\r\n                classes={{ root: classes.slider, valueLabel: classes.valueLabel }}\r\n            />\r\n            <Slider\r\n\r\n                orientation=\"vertical\"\r\n                min={1}\r\n                max={12}\r\n                value={month}\r\n                marks={marks}\r\n                onChange={handleMonthSlider}\r\n                valueLabelDisplay=\"off\"\r\n                defaultValue={30}\r\n                aria-labelledby=\"vertical-slider\"\r\n                classes={{ root: classes.slider }}\r\n            />\r\n            <Slider\r\n            style={{height: \"50%\"}}\r\n                orientation=\"vertical\"\r\n                min={2020}\r\n                max={2021}\r\n                value={year}\r\n                marks={marksYear}\r\n                onChange={handleYearSlider}\r\n                valueLabelDisplay=\"off\"\r\n                defaultValue={30}\r\n                aria-labelledby=\"vertical-slider\"\r\n                classes={{ root: classes.slider }}\r\n            />\r\n            </div>\r\n            <RadioGroup aria-label=\"gender\" name=\"gender1\" value={value} onChange={(e) => { setValue(e.target.value) }} style={{flexDirection: \"row\"}}>\r\n                <FormControlLabel value=\"absolute\" control={<Radio />} label=\"absolute\" />\r\n                <FormControlLabel value=\"relative\" control={<Radio />} label=\"relative\" />\r\n            </RadioGroup>\r\n        </>\r\n    )\r\n}\r\n\r\nconst marksYear = [\r\n    {\r\n        label: 2020,\r\n        value: 2020\r\n    },\r\n    {\r\n        label: 2021,\r\n        value: 2021\r\n    }\r\n]\r\nconst marks = [\r\n    {\r\n        name: \"January\",\r\n        label: \"Jan\",\r\n        value: 1,\r\n        days: 31,\r\n    },\r\n    {\r\n        name: \"February\",\r\n        label: \"Feb\",\r\n        value: 2,\r\n        days: 28\r\n    },\r\n    {\r\n        name: \"March\",\r\n        label: \"Mar\",\r\n        value: 3,\r\n        days: 31\r\n    },\r\n    {\r\n        name: \"April\",\r\n        label: \"Apr\",\r\n        value: 4,\r\n        days: 30\r\n    },\r\n    {\r\n        name: \"May\",\r\n        label: \"May\",\r\n        value: 5,\r\n        days: 31\r\n    },\r\n    {\r\n        name: \"June\",\r\n        label: \"Jun\",\r\n        value: 6,\r\n        days: 30\r\n    },\r\n    {\r\n        name: \"July\",\r\n        label: \"Jul\",\r\n        value: 7,\r\n        days: 31\r\n    },\r\n    {\r\n        name: \"August\",\r\n        label: \"Aug\",\r\n        value: 8,\r\n        days: 31\r\n    },\r\n    {\r\n        name: \"September\",\r\n        label: \"Sep\",\r\n        value: 9,\r\n        days: 30\r\n    },\r\n    {\r\n        name: \"October\",\r\n        label: \"Oct\",\r\n        value: 10,\r\n        days: 31\r\n    },\r\n    {\r\n        name: \"November\",\r\n        label: \"Nov\",\r\n        value: 11,\r\n        days: 30\r\n    },\r\n    {\r\n        name: \"December\",\r\n        label: \"Dec\",\r\n        value: 12,\r\n        days: 31\r\n    }\r\n]","C:\\Users\\gonza\\finance-app\\src\\components\\Searcher.js",["701","702","703","704","705","706"],"import { Button, Chip, TextField } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { useDataLayer } from \"../Context\";\r\n\r\n\r\nexport const Searcher = ({ setSelection }) => {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [{ data, loading, error }, setRequest] = useState({\r\n    data: [],\r\n    loading: false,\r\n    error: \"\",\r\n  });\r\n\r\n  const { state, dispatch } = useDataLayer()\r\n  const fetchar = async (query) => {\r\n    try {\r\n      setRequest((prev) => ({ ...prev, loading: true }));\r\n      const rawData = await fetch(`http://localhost:8001/search/${query}`);\r\n      const { data } = await rawData.json();\r\n      const dataOnlyStocks = data.filter(item => item.assetType === \"Stock\")\r\n      setRequest((prev) => ({ ...prev, data: dataOnlyStocks, loading: false }));\r\n    } catch (err) {\r\n      setRequest((prev) => ({\r\n        ...prev,\r\n        loading: false,\r\n        error: err.message,\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleSearch = () => {\r\n    if (query) {\r\n      fetchar(query);\r\n    }\r\n  };\r\n\r\n  const handleAutocomplete = (e) => {\r\n    console.log(e.key, \"va o que\");\r\n    // if (query && e.key === \" \")\r\n    if (query) fetchar(query.slice(0, query.length - 1));\r\n  };\r\n\r\n  const handleSelection = (value, reason) => {\r\n    if (reason === \"select-option\") {\r\n      console.log(value, \"valueeee\")\r\n      setSelection(value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"search-section\">\r\n        {loading && <p>cargando...</p>}\r\n        {data && data.map((item) => <p>{item.name}</p>)}\r\n        {error && <p>{error}</p>}\r\n        {/* <Chip\r\n        size=\"medium\"\r\n        label={<h3>Search for company</h3>}\r\n    style={{marginBottom: \"0.5rem\"}}\r\n      /> */}\r\n      <h2>Search company data</h2>\r\n        <Autocomplete\r\n          id=\"asynchronous-demo\"\r\n          style={{ width: 300 }}\r\n          open={open}\r\n          onOpen={() => {\r\n            setOpen(true);\r\n          }}\r\n          onClose={() => {\r\n            setOpen(false);\r\n          }}\r\n          noOptionsText\r\n          // getOptionSelected={(option, value) => {\r\n          //   console.log(value.name, option.name, \"hooolabeeeeeeee\");\r\n          //   return (value.name = option.name);\r\n          // }}\r\n          getOptionLabel={(option) => option.name}\r\n          options={data}\r\n          loading={loading}\r\n          filterOptions={(options) => query && options}\r\n          onChange={(e, value, reason) => {\r\n            handleSelection(value, reason);\r\n          }}\r\n          renderInput={(params) => (\r\n            <TextField\r\n              {...params}\r\n              label=\"by ticker, by name..\"\r\n              variant=\"outlined\"\r\n              onKeyUp={handleAutocomplete}\r\n              onChange={(e) => {\r\n                setQuery(e.target.value);\r\n              }}\r\n              value={query}\r\n              InputProps={{\r\n                ...params.InputProps,\r\n                endAdornment: (\r\n                  <React.Fragment>\r\n                    {loading ? (\r\n                      <CircularProgress color=\"inherit\" size={20} />\r\n                    ) : null}\r\n                    {params.InputProps.endAdornment}\r\n                  </React.Fragment>\r\n                ),\r\n              }}\r\n            />\r\n          )}\r\n        />\r\n      </div>\r\n      {/* {selection && JSON.stringify(selection, null, 2)} */}\r\n\r\n    </>\r\n  );\r\n};\r\n","C:\\Users\\gonza\\finance-app\\src\\utils\\numFormatter.js",[],"C:\\Users\\gonza\\finance-app\\src\\dashboard\\Marcador2.js",[],"C:\\Users\\gonza\\finance-app\\src\\views\\indexes\\SP500.js",[],"C:\\Users\\gonza\\finance-app\\src\\views\\seguidores\\TextEditor.js",["707","708"],"import React from \"react\";\r\nimport Draft from \"draft-js\";\r\nimport { Button, ButtonGroup, withStyles } from \"@material-ui/core\";\r\nimport FormatBoldIcon from '@material-ui/icons/FormatBold';\r\nimport FormatItalicIcon from '@material-ui/icons/FormatItalic';\r\nimport FormatUnderlinedIcon from '@material-ui/icons/FormatUnderlined';\r\nimport FormatListBulletedIcon from '@material-ui/icons/FormatListBulleted';\r\nimport FormatListNumberedIcon from '@material-ui/icons/FormatListNumbered';\r\nimport FormatQuoteIcon from '@material-ui/icons/FormatQuote';\r\nconst { Editor, EditorState, RichUtils, getDefaultKeyBinding } = Draft;\r\n\r\n\r\n\r\nexport class TextEditor extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { editorState: EditorState.createEmpty() };\r\n        this.editor = React.createRef()\r\n        this.focus = () => this.editor.current.focus();\r\n        this.onChange = editorState => this.setState({ editorState });\r\n        this.handleKeyCommand = this._handleKeyCommand.bind(this);\r\n        this.mapKeyToEditorCommand = this._mapKeyToEditorCommand.bind(this);\r\n        this.toggleBlockType = this._toggleBlockType.bind(this);\r\n        this.toggleInlineStyle = this._toggleInlineStyle.bind(this);\r\n    }\r\n\r\n    reply = () => {\r\n        alert(this.state.editorState.getCurrentContent().getPlainText('\\u0001'))\r\n        const replyBody = this.state.editorState.getCurrentContent().getPlainText('\\u0001')\r\n        switch (this.props.type) {\r\n            case \"reply\":\r\n                this.props.handleReply(replyBody, this.props.parentId, this.props.ancestorId)\r\n                return\r\n            case \"post\":\r\n                this.props.handleNewPost(replyBody, this.props.parentId)\r\n                return\r\n            default:\r\n                return\r\n        }\r\n    }\r\n    _handleKeyCommand(command, editorState) {\r\n        const newState = RichUtils.handleKeyCommand(editorState, command);\r\n        if (newState) {\r\n            this.onChange(newState);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    _mapKeyToEditorCommand(e) {\r\n        if (e.keyCode === 9 /* TAB */) {\r\n            const newEditorState = RichUtils.onTab(\r\n                e,\r\n                this.state.editorState,\r\n                4 /* maxDepth */\r\n            );\r\n            if (newEditorState !== this.state.editorState) {\r\n                this.onChange(newEditorState);\r\n            }\r\n            return;\r\n        }\r\n        return getDefaultKeyBinding(e);\r\n    }\r\n    _toggleBlockType(blockType) {\r\n        this.onChange(RichUtils.toggleBlockType(this.state.editorState, blockType));\r\n    }\r\n    _toggleInlineStyle(inlineStyle) {\r\n        this.onChange(\r\n            RichUtils.toggleInlineStyle(this.state.editorState, inlineStyle)\r\n        );\r\n    }\r\n    render() {\r\n        const { editorState } = this.state;\r\n        // If the user changes block type before entering any text, we can\r\n        // either style the placeholder or hide it. Let's just hide it now.\r\n        let className = \"RichEditor-editor\";\r\n        var contentState = editorState.getCurrentContent();\r\n        if (!contentState.hasText()) {\r\n            if (\r\n                contentState\r\n                    .getBlockMap()\r\n                    .first()\r\n                    .getType() !== \"unstyled\"\r\n            ) {\r\n                className += \" RichEditor-hidePlaceholder\";\r\n            }\r\n        }\r\n        return (\r\n            <div className=\"RichEditor-root\">\r\n                <div className=\"RichEditor-editor\" onClick={this.focus}>\r\n                    <Editor\r\n                        blockStyleFn={getBlockStyle}\r\n                        customStyleMap={styleMap}\r\n                        editorState={editorState}\r\n                        handleKeyCommand={this.handleKeyCommand}\r\n                        keyBindingFn={this.mapKeyToEditorCommand}\r\n                        onChange={this.onChange}\r\n                        ref={this.editor}\r\n                        spellCheck={true}\r\n                    />\r\n                </div>\r\n                <div style={{ display: \"flex\" }}>\r\n                    <InlineStyleControls\r\n                        editorState={editorState}\r\n                        onToggle={this.toggleInlineStyle}\r\n                    />\r\n                    <BlockStyleControls\r\n                        editorState={editorState}\r\n                        onToggle={this.toggleBlockType}\r\n                    />\r\n                    <Button onClick={this.reply}>Reply</Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n// Custom overrides for \"code\" style.\r\nconst styleMap = {\r\n    CODE: {\r\n        backgroundColor: \"rgba(0, 0, 0, 0.05)\",\r\n        fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\r\n        fontSize: 16,\r\n        padding: 2\r\n    }\r\n};\r\nfunction getBlockStyle(block) {\r\n    switch (block.getType()) {\r\n        case \"blockquote\":\r\n            return \"RichEditor-blockquote\";\r\n        default:\r\n            return null;\r\n    }\r\n}\r\nconst styles = {\r\n    root: { minWidth: \"40px\" }\r\n}\r\nfunction PowererButton(props) {\r\n    const { classes, children } = props\r\n    return <Button classes={{ root: classes.root }} {...props}>\r\n        {children}\r\n    </Button>\r\n}\r\n\r\nconst CustomButton = withStyles(styles)(PowererButton)\r\nclass StyleButton extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.onToggle = e => {\r\n            e.preventDefault();\r\n            this.props.onToggle(this.props.style);\r\n        };\r\n    }\r\n    render() {\r\n        const { classes } = this.props\r\n        let className = \"RichEditor-styleButton\";\r\n        if (this.props.active) {\r\n            className += \" RichEditor-activeButton\";\r\n        }\r\n        return (\r\n            <CustomButton className={className} onClick={this.onToggle}\r\n\r\n            >\r\n                {this.props.label}\r\n            </CustomButton>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst BLOCK_TYPES = [\r\n    { label: \"H1\", style: \"header-one\" },\r\n    { label: \"H2\", style: \"header-two\" },\r\n    { label: \"H3\", style: \"header-three\" },\r\n    { label: \"H4\", style: \"header-four\" },\r\n    { label: \"H5\", style: \"header-five\" },\r\n    { label: \"H6\", style: \"header-six\" },\r\n    { label: <FormatQuoteIcon />, style: \"blockquote\" },\r\n    { label: <FormatListNumberedIcon />, style: \"unordered-list-item\" },\r\n    { label: <FormatListBulletedIcon />, style: \"ordered-list-item\" },\r\n\r\n];\r\nconst BlockStyleControls = props => {\r\n    const { editorState } = props;\r\n    const selection = editorState.getSelection();\r\n    const blockType = editorState\r\n        .getCurrentContent()\r\n        .getBlockForKey(selection.getStartKey())\r\n        .getType();\r\n    return (\r\n        <div className=\"RichEditor-controls\">\r\n\r\n            {BLOCK_TYPES.map((type, index) => (\r\n                <StyleButton\r\n                    key={index}\r\n                    active={type.style === blockType}\r\n                    label={type.label}\r\n                    onToggle={props.onToggle}\r\n                    style={type.style}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\nvar INLINE_STYLES = [\r\n    { label: <FormatBoldIcon />, style: \"BOLD\" },\r\n    { label: <FormatItalicIcon />, style: \"ITALIC\" },\r\n    { label: <FormatUnderlinedIcon />, style: \"UNDERLINE\" },\r\n];\r\nconst InlineStyleControls = props => {\r\n    const currentStyle = props.editorState.getCurrentInlineStyle();\r\n\r\n    return (\r\n        <div className=\"RichEditor-controls\">\r\n            <ButtonGroup size=\"small\" aria-label=\"small outlined button group\">\r\n                {INLINE_STYLES.map((type, index) => (\r\n                    <StyleButton\r\n                        key={index}\r\n                        active={currentStyle.has(type.style)}\r\n                        label={type.label}\r\n                        onToggle={props.onToggle}\r\n                        style={type.style}\r\n                    />\r\n                ))}\r\n            </ButtonGroup>\r\n        </div>\r\n    );\r\n};\r\n","C:\\Users\\gonza\\finance-app\\src\\dashboard\\SearcherPositions.js",[],"C:\\Users\\gonza\\finance-app\\src\\views\\principal\\elements\\GainersCarousel.js",["709","710"],"C:\\Users\\gonza\\finance-app\\src\\charts\\StackedColumn.js",["711","712","713","714"],"import React, { useState, useEffect, useReducer } from 'react'\r\nimport Highcharts from \"highcharts\"\r\nimport HighchartsReact from \"highcharts-react-official\";\r\n\r\nconst initialState = {\r\n    data: \"\",\r\n    loading: false,\r\n    error: \"\"\r\n}\r\nconst dataReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"REQUEST_LOADING\":\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n            }\r\n        case \"REQUEST_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                data: action.payload\r\n            }\r\n        case \"REQUEST_ERROR\":\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const StackedColumn = ({ ticker }) => {\r\n    const [{ data, loading, error }, dispatch] = useReducer(dataReducer, initialState)\r\n    const fetchData = () => {\r\n        dispatch({ type: \"REQUEST_LOADING\" })\r\n        fetch(`https://finnhub.io/api/v1/stock/recommendation?symbol=${ticker}&token=btm6dp748v6ud360stcg`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                const dataCurrentYear = getCurrentYear(res)\r\n                if (dataCurrentYear.length) {\r\n                    dispatch({ type: \"REQUEST_SUCCESS\", payload: dataCurrentYear.reverse() })\r\n                } else {\r\n                    dispatch({ type: \"REQUEST_ERROR\", payload: \"No data available\" })\r\n                }\r\n            })\r\n\r\n    }\r\n    const getCurrentYear = (arr) => {\r\n        return arr.filter(item => item.period.split(\"-\")[0] === \"2020\")\r\n    }\r\n    useEffect(() => {\r\n        fetchData()\r\n    }, [])\r\n\r\n    const options = {\r\n        chart: {\r\n            type: 'column'\r\n        },\r\n        title: {\r\n            text: 'Stacked column chart'\r\n        },\r\n        xAxis: {\r\n            categories: data && data.map(item => item.period)\r\n        },\r\n        yAxis: {\r\n            min: 0,\r\n            title: {\r\n                text: 'stock recommendations'\r\n            },\r\n            stackLabels: {\r\n                enabled: true,\r\n                style: {\r\n                    fontWeight: 'bold',\r\n                    color: ( // theme\r\n                        Highcharts.defaultOptions.title.style &&\r\n                        Highcharts.defaultOptions.title.style.color\r\n                    ) || 'gray'\r\n                }\r\n            }\r\n        },\r\n        legend: {\r\n            align: 'right',\r\n            x: -30,\r\n            verticalAlign: 'top',\r\n            y: 25,\r\n            floating: true,\r\n            backgroundColor:\r\n                Highcharts.defaultOptions.legend.backgroundColor || 'white',\r\n            borderColor: '#CCC',\r\n            borderWidth: 1,\r\n            shadow: false\r\n        },\r\n        tooltip: {\r\n            headerFormat: '<b>{point.x}</b><br/>',\r\n            pointFormat: '{series.name}: {point.y}<br/>Total: {point.stackTotal}'\r\n        },\r\n        plotOptions: {\r\n            column: {\r\n                stacking: 'normal',\r\n                dataLabels: {\r\n                    enabled: true\r\n                }\r\n            }\r\n        },\r\n        // series: [{\r\n        //     name: 'John',\r\n        //     data: [5, 3, 4, 7, 2]\r\n        // }, {\r\n        //     name: 'Jane',\r\n        //     data: [2, 2, 3, 2, 1]\r\n        // }, {\r\n        //     name: 'Joe',\r\n        //     data: [3, 4, 4, 2, 5]\r\n        // }]\r\n        series:\r\n            data &&\r\n            Object.keys(data[0])\r\n                .filter(item => item !== \"period\")\r\n                .map(field => (\r\n                    {\r\n                        name: field,\r\n                        data: data.map(item => item[field])\r\n                    }\r\n                ))\r\n\r\n    }\r\n    return (\r\n        <>\r\n            {\r\n                data && <HighchartsReact\r\n                    highcharts={Highcharts}\r\n                    options={options}\r\n                />}\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\views\\covid\\CovidSection2.js",["715","716","717","718","719","720","721"],"C:\\Users\\gonza\\finance-app\\src\\utils\\useDebounce.js",["722","723"],"import React, { useEffect, useState } from 'react'\r\n\r\nexport const useDebounce = (searchTerm, fieldChanging, debounceTime) => {\r\n    const [debouncedQuery, setDebouncedQuery] = useState({ username: \"\", email: \"\" })\r\n    useEffect(() => {\r\n        const timeout = setTimeout(() => {\r\n            if (fieldChanging && searchTerm[fieldChanging] !== \"\") {\r\n                setDebouncedQuery(searchTerm)\r\n            }\r\n        }, debounceTime)\r\n\r\n        return () => clearTimeout(timeout)\r\n    }, [searchTerm])\r\n    return { debouncedQuery }\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\views\\indexes\\IndexesGeneral.js",["724","725","726","727","728","729","730","731","732"],"C:\\Users\\gonza\\finance-app\\src\\utils\\useChartReflow.js",["733","734","735"],"import React, { useEffect } from 'react'\r\nimport { useUILayer } from '../ContextUI'\r\nimport { useViewport } from './useViewport'\r\n\r\nexport const useChartReflow = (chartInstance) => {\r\n    const { sidebarOpen } = useUILayer()\r\n    //const {viewport} = useViewport()\r\n    useEffect(() => {\r\n\r\n        if (chartInstance && Object.keys(chartInstance).length > 0) {\r\n            console.log(chartInstance, \"popo\")\r\n            setTimeout(() => {\r\n                console.log(\"reflowwww\")\r\n                chartInstance.reflow()\r\n            }, 200)\r\n        }\r\n    }, [sidebarOpen])\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\views\\company\\PeerCarousel.js",["736","737"],"C:\\Users\\gonza\\finance-app\\src\\views\\principal\\elements\\Indices.js",["738"],"import React from 'react'\r\nimport { useFetch } from '../../../utils/useFetch'\r\nimport { useFetchWithCors } from '../../../utils/useFetchWithCors'\r\n\r\n\r\nexport const Indices = () => {\r\n    const category = \"indexes\"\r\n    const subCategory = \"index-list\"\r\n    const options = { explicitUrl: true }\r\n    const url = \"https://financialmodelingprep.com/api/v3/quotes/index?apikey=651d720ba0c42b094186aa9906e307b4\"\r\n    const { datos, loading, error } = useFetch(url, subCategory, category, options)\r\n\r\n    return (\r\n        <>\r\n            {loading && <p>loading...</p>}\r\n            {error && <p>{error}</p>}\r\n            {datos.length > 0 && datos.map(item =>\r\n                <li>\r\n                    <div>{item.name}</div>\r\n                    <div>{item.changesPercentage} %</div>\r\n                </li>)}\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\Personas\\PersonasList.tsx",["739"],"import React, { useEffect, useReducer } from 'react'\r\nimport { UserMain } from '../dashboard/UserMain'\r\nimport { PeopleItem } from './interfaces'\r\nimport { UserItem } from './UserItem'\r\n\r\ninterface userMain {\r\n    data: PeopleItem[] | null\r\n    loading: boolean\r\n    error: string\r\n}\r\ntype State = { type: \"fetching\", payload: boolean }\r\n    | { type: \"success\", payload: PeopleItem[] }\r\n    | { type: \"error\", payload: string }\r\n\r\nconst reducer = (state: userMain, action: State) => {\r\n    switch (action.type) {\r\n        case \"fetching\":\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        case \"success\":\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                data: action.payload\r\n            }\r\n        case \"error\":\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const PersonasList = () => {\r\n\r\n    const [state, dispatch] = useReducer(reducer, { data: null, loading: false, error: \"\" })\r\n\r\n    const { data, loading, error } = state\r\n    const getPeople = () => {\r\n        return fetch(\"http://localhost:8001/api/v1/people/main\")\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                return res.map((item: any) => {\r\n                    const { portfolio } = item\r\n                    const parsedPortfolio = JSON.parse(portfolio)\r\n                    return { ...item, portfolio: parsedPortfolio }\r\n                })\r\n            })\r\n            .then(res => { dispatch({ type: \"success\", payload: res }) })\r\n            .catch(err => { dispatch({ type: \"error\", payload: err.message }) })\r\n    }\r\n    useEffect(() => {\r\n        console.log(data, \"doooto\")\r\n    }, [data])\r\n    const divStilos: React.CSSProperties = {\r\n        display: \"flex\",\r\n        justifyContent: \"space-around\",\r\n        flexWrap: \"wrap\"\r\n    }\r\n\r\n    useEffect(() => {\r\n        getPeople()\r\n    }, [])\r\n    return (\r\n        <div style={divStilos}>\r\n            {loading ? <p>Loading ...</p>\r\n                : error ? <p>{error}</p>\r\n                    : data && data.map((person) => {\r\n                        return <UserItem {...{ person }} />\r\n                    })}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//const UserItem =()=>null",["740","741"],"C:\\Users\\gonza\\finance-app\\src\\components\\Searcher4.js",["742","743","744","745","746","747","748","749","750","751","752","753","754","755","756","757","758","759","760","761","762"],"C:\\Users\\gonza\\finance-app\\src\\portfolio\\CurrentPriceRP.js",[],"C:\\Users\\gonza\\finance-app\\src\\charts\\GeneralIndexDispatcher.js",["763"],"import React, { useState, useEffect } from 'react'\r\nimport { IndexesChart2 } from './indexesChart2'\r\nimport { MiniatureChart } from './MiniatureChartIndex'\r\nimport { TransitionComponent } from \"../components/TransitionComponent\"\r\nexport const GeneralIndexDispatcher = ({ datos, setChartSelected, chartSelected }) => {\r\n    const [openChartModal, setOpenChartModal] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (chartSelected === datos.symbol) {\r\n            setOpenChartModal(true)\r\n            console.log(datos.symbol, \"siimbol\")\r\n        } else {\r\n            setOpenChartModal(false)\r\n        }\r\n    }, [chartSelected])\r\n\r\n    return (\r\n        <div\r\n            onClick={() => { setChartSelected(datos.symbol) }}\r\n        >\r\n            {\r\n                openChartModal ?\r\n                    <TransitionComponent\r\n                    open={openChartModal}\r\n                    setOpenChartModal={setOpenChartModal}\r\n                    >\r\n                        <IndexesChart2\r\n                            datos={datos}\r\n                        />\r\n                    </TransitionComponent>\r\n                    :\r\n\r\n                    <MiniatureChart datos={datos} />\r\n\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\utils\\datesUtils.js",["764","765"],"C:\\Users\\gonza\\finance-app\\src\\views\\company\\CompanySection.js",["766","767","768"],"C:\\Users\\gonza\\finance-app\\src\\dashboard\\StockDispatcher.js",["769","770","771"],"import React, { useEffect, useState } from 'react'\r\nimport { CustomAreaChart } from '../charts/CustomAreaChart'\r\nimport { useDataLayer } from '../Context'\r\nimport { convertHumanToUnix } from '../utils/datesUtils'\r\n\r\nexport const StockDispatcher = ({ ticker }) => {\r\n\r\n    const { state, dispatch } = useDataLayer()\r\n    const [datos, setDatos] = useState(\"\")\r\n\r\n    const prepareDataRange = (data) => {\r\n        const readyData = data.map(register => {\r\n            //    console.log(register, \"que conxuu\")\r\n            return [register[0], register[1]]\r\n        })\r\n        //ojo con esto, \r\n        // dispatch({\r\n        //     type: \"STORE_GENERAL_DATA\", payload: {\r\n        //         field: \"prices\",\r\n        //         ticker,\r\n        //         value: readyData\r\n        //     }\r\n        // })\r\n        setDatos(readyData)\r\n    }\r\n\r\n    useEffect(() => {\r\n        const companyHistorical = state.portfolioHistoryByCompany[ticker]\r\n        if (companyHistorical) {\r\n            prepareDataRange(companyHistorical)\r\n        }\r\n    }, [])\r\n\r\n    console.log(datos, \"los putos datos\")\r\n    return (\r\n        <>\r\n            {datos &&\r\n                <CustomAreaChart\r\n                    ticker={ticker}\r\n                    {...{ datos }}\r\n                />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n// const prepareDataRange = (data) => {\r\n//     console.log(\"maricoona\")\r\n//     let start = false\r\n//     let finish = false\r\n//     let readyData = []\r\n//     Object.keys(data).forEach((date, index) => {\r\n//         if (ticker === \"TEF\") {\r\n//             console.log(date, \"puto indice\")\r\n//         }\r\n//         if (date === startDate) {\r\n//             start = true\r\n//             if (ticker === \"TEF\") {\r\n//                 console.log(ticker, \"start\", start, finish, readyData, date)\r\n//             }\r\n//         }\r\n//         if (date === endDate && start === true) {\r\n//             finish = true\r\n//             if (ticker === \"TEF\") {\r\n//                 console.log(ticker, \"start\", start, finish, readyData, date)\r\n//             }\r\n//         }\r\n//         if (start && !finish) {\r\n//             const dateInfoStock = data[date][ticker]\r\n//             readyData = [...readyData,\r\n//             [convertHumanToUnix(date),\r\n//             dateInfoStock.close]\r\n//             ]\r\n//         }\r\n//     })\r\n//     dispatch({\r\n//         type: \"STORE_GENERAL_DATA\", payload: {\r\n//             field: \"prices\",\r\n//             ticker,\r\n//             value: readyData\r\n//         }\r\n//     })\r\n//     setDatos(readyData)\r\n// }","C:\\Users\\gonza\\finance-app\\src\\views\\indexes\\BigIndex.js",["772","773"],"C:\\Users\\gonza\\finance-app\\src\\portfolio\\PurchaseDialog.js",[],"C:\\Users\\gonza\\finance-app\\src\\views\\company\\Financials.js",["774"],"C:\\Users\\gonza\\finance-app\\src\\charts\\CustomAreaChart.js",["775","776"],"C:\\Users\\gonza\\finance-app\\src\\charts\\IndexesChart.js",["777","778","779","780","781"],"C:\\Users\\gonza\\finance-app\\src\\charts\\MiniatureChartIndex.js",[],{"ruleId":"782","severity":1,"message":"783","line":1,"column":21,"nodeType":"784","messageId":"785","endLine":1,"endColumn":27},{"ruleId":"782","severity":1,"message":"786","line":3,"column":34,"nodeType":"784","messageId":"785","endLine":3,"endColumn":59},{"ruleId":"782","severity":1,"message":"787","line":4,"column":10,"nodeType":"784","messageId":"785","endLine":4,"endColumn":31},{"ruleId":"782","severity":1,"message":"788","line":195,"column":11,"nodeType":"784","messageId":"785","endLine":195,"endColumn":35},{"ruleId":"782","severity":1,"message":"789","line":468,"column":17,"nodeType":"784","messageId":"785","endLine":468,"endColumn":21},{"ruleId":"790","severity":1,"message":"791","line":513,"column":8,"nodeType":"792","endLine":513,"endColumn":53,"suggestions":"793"},{"ruleId":"794","replacedBy":"795"},{"ruleId":"796","replacedBy":"797"},{"ruleId":"798","severity":1,"message":"799","line":19,"column":11,"nodeType":"784","messageId":"785","endLine":19,"endColumn":20},{"ruleId":"794","replacedBy":"800"},{"ruleId":"796","replacedBy":"801"},{"ruleId":"794","replacedBy":"802"},{"ruleId":"796","replacedBy":"803"},{"ruleId":"790","severity":1,"message":"804","line":98,"column":6,"nodeType":"792","endLine":98,"endColumn":17,"suggestions":"805"},{"ruleId":"794","replacedBy":"806"},{"ruleId":"796","replacedBy":"807"},{"ruleId":"782","severity":1,"message":"808","line":5,"column":8,"nodeType":"784","messageId":"785","endLine":5,"endColumn":15},{"ruleId":"790","severity":1,"message":"809","line":120,"column":8,"nodeType":"792","endLine":120,"endColumn":42,"suggestions":"810"},{"ruleId":"782","severity":1,"message":"811","line":1,"column":16,"nodeType":"784","messageId":"785","endLine":1,"endColumn":20},{"ruleId":"782","severity":1,"message":"812","line":1,"column":22,"nodeType":"784","messageId":"785","endLine":1,"endColumn":30},{"ruleId":"782","severity":1,"message":"813","line":1,"column":32,"nodeType":"784","messageId":"785","endLine":1,"endColumn":44},{"ruleId":"782","severity":1,"message":"814","line":14,"column":10,"nodeType":"784","messageId":"785","endLine":14,"endColumn":15},{"ruleId":"782","severity":1,"message":"815","line":15,"column":10,"nodeType":"784","messageId":"785","endLine":15,"endColumn":17},{"ruleId":"790","severity":1,"message":"816","line":35,"column":10,"nodeType":"792","endLine":35,"endColumn":17,"suggestions":"817"},{"ruleId":"790","severity":1,"message":"818","line":40,"column":10,"nodeType":"792","endLine":40,"endColumn":16,"suggestions":"819"},{"ruleId":"790","severity":1,"message":"820","line":47,"column":8,"nodeType":"792","endLine":47,"endColumn":14,"suggestions":"821"},{"ruleId":"822","severity":1,"message":"823","line":26,"column":31,"nodeType":"824","messageId":"825","endLine":26,"endColumn":67,"fix":"826"},{"ruleId":"790","severity":1,"message":"827","line":52,"column":8,"nodeType":"792","endLine":52,"endColumn":46,"suggestions":"828"},{"ruleId":"829","severity":1,"message":"830","line":30,"column":13,"nodeType":"831","messageId":"832","endLine":30,"endColumn":28},{"ruleId":"782","severity":1,"message":"813","line":5,"column":8,"nodeType":"784","messageId":"785","endLine":5,"endColumn":20},{"ruleId":"782","severity":1,"message":"812","line":6,"column":8,"nodeType":"784","messageId":"785","endLine":6,"endColumn":16},{"ruleId":"782","severity":1,"message":"811","line":7,"column":8,"nodeType":"784","messageId":"785","endLine":7,"endColumn":12},{"ruleId":"782","severity":1,"message":"833","line":8,"column":8,"nodeType":"784","messageId":"785","endLine":8,"endColumn":15},{"ruleId":"782","severity":1,"message":"834","line":34,"column":9,"nodeType":"784","messageId":"785","endLine":34,"endColumn":24},{"ruleId":"794","replacedBy":"835"},{"ruleId":"796","replacedBy":"836"},{"ruleId":"790","severity":1,"message":"837","line":46,"column":8,"nodeType":"792","endLine":46,"endColumn":30,"suggestions":"838"},{"ruleId":"790","severity":1,"message":"839","line":71,"column":8,"nodeType":"792","endLine":71,"endColumn":33,"suggestions":"840"},{"ruleId":"782","severity":1,"message":"841","line":1,"column":8,"nodeType":"784","messageId":"785","endLine":1,"endColumn":13},{"ruleId":"782","severity":1,"message":"842","line":7,"column":24,"nodeType":"784","messageId":"785","endLine":7,"endColumn":36},{"ruleId":"790","severity":1,"message":"843","line":26,"column":8,"nodeType":"792","endLine":26,"endColumn":10,"suggestions":"844"},{"ruleId":"782","severity":1,"message":"815","line":30,"column":12,"nodeType":"784","messageId":"785","endLine":30,"endColumn":19},{"ruleId":"790","severity":1,"message":"845","line":67,"column":8,"nodeType":"792","endLine":67,"endColumn":10,"suggestions":"846"},{"ruleId":"794","replacedBy":"800"},{"ruleId":"796","replacedBy":"801"},{"ruleId":"782","severity":1,"message":"847","line":1,"column":10,"nodeType":"784","messageId":"785","endLine":1,"endColumn":15},{"ruleId":"782","severity":1,"message":"848","line":2,"column":17,"nodeType":"784","messageId":"785","endLine":2,"endColumn":26},{"ruleId":"782","severity":1,"message":"849","line":10,"column":10,"nodeType":"784","messageId":"785","endLine":10,"endColumn":24},{"ruleId":"782","severity":1,"message":"850","line":11,"column":10,"nodeType":"784","messageId":"785","endLine":11,"endColumn":19},{"ruleId":"782","severity":1,"message":"851","line":19,"column":11,"nodeType":"784","messageId":"785","endLine":19,"endColumn":20},{"ruleId":"782","severity":1,"message":"852","line":21,"column":35,"nodeType":"784","messageId":"785","endLine":21,"endColumn":47},{"ruleId":"782","severity":1,"message":"853","line":23,"column":12,"nodeType":"784","messageId":"785","endLine":23,"endColumn":21},{"ruleId":"782","severity":1,"message":"854","line":23,"column":23,"nodeType":"784","messageId":"785","endLine":23,"endColumn":35},{"ruleId":"782","severity":1,"message":"855","line":24,"column":12,"nodeType":"784","messageId":"785","endLine":24,"endColumn":18},{"ruleId":"782","severity":1,"message":"856","line":24,"column":20,"nodeType":"784","messageId":"785","endLine":24,"endColumn":29},{"ruleId":"782","severity":1,"message":"783","line":1,"column":38,"nodeType":"784","messageId":"785","endLine":1,"endColumn":44},{"ruleId":"782","severity":1,"message":"857","line":13,"column":10,"nodeType":"784","messageId":"785","endLine":13,"endColumn":25},{"ruleId":"782","severity":1,"message":"858","line":16,"column":10,"nodeType":"784","messageId":"785","endLine":16,"endColumn":20},{"ruleId":"782","severity":1,"message":"859","line":18,"column":10,"nodeType":"784","messageId":"785","endLine":18,"endColumn":24},{"ruleId":"782","severity":1,"message":"860","line":24,"column":10,"nodeType":"784","messageId":"785","endLine":24,"endColumn":21},{"ruleId":"782","severity":1,"message":"861","line":25,"column":10,"nodeType":"784","messageId":"785","endLine":25,"endColumn":32},{"ruleId":"782","severity":1,"message":"808","line":26,"column":8,"nodeType":"784","messageId":"785","endLine":26,"endColumn":15},{"ruleId":"782","severity":1,"message":"862","line":32,"column":10,"nodeType":"784","messageId":"785","endLine":32,"endColumn":22},{"ruleId":"790","severity":1,"message":"863","line":123,"column":6,"nodeType":"792","endLine":123,"endColumn":33,"suggestions":"864"},{"ruleId":"782","severity":1,"message":"865","line":136,"column":10,"nodeType":"784","messageId":"785","endLine":136,"endColumn":14},{"ruleId":"782","severity":1,"message":"866","line":143,"column":10,"nodeType":"784","messageId":"785","endLine":143,"endColumn":15},{"ruleId":"782","severity":1,"message":"867","line":143,"column":17,"nodeType":"784","messageId":"785","endLine":143,"endColumn":25},{"ruleId":"790","severity":1,"message":"868","line":165,"column":6,"nodeType":"792","endLine":165,"endColumn":17,"suggestions":"869"},{"ruleId":"790","severity":1,"message":"870","line":177,"column":6,"nodeType":"792","endLine":177,"endColumn":28,"suggestions":"871"},{"ruleId":"782","severity":1,"message":"872","line":10,"column":10,"nodeType":"784","messageId":"785","endLine":10,"endColumn":14},{"ruleId":"782","severity":1,"message":"873","line":10,"column":16,"nodeType":"784","messageId":"785","endLine":10,"endColumn":19},{"ruleId":"782","severity":1,"message":"874","line":10,"column":21,"nodeType":"784","messageId":"785","endLine":10,"endColumn":25},{"ruleId":"782","severity":1,"message":"875","line":10,"column":27,"nodeType":"784","messageId":"785","endLine":10,"endColumn":35},{"ruleId":"782","severity":1,"message":"876","line":14,"column":10,"nodeType":"784","messageId":"785","endLine":14,"endColumn":19},{"ruleId":"782","severity":1,"message":"877","line":15,"column":10,"nodeType":"784","messageId":"785","endLine":15,"endColumn":19},{"ruleId":"782","severity":1,"message":"878","line":16,"column":10,"nodeType":"784","messageId":"785","endLine":16,"endColumn":20},{"ruleId":"782","severity":1,"message":"860","line":18,"column":10,"nodeType":"784","messageId":"785","endLine":18,"endColumn":21},{"ruleId":"782","severity":1,"message":"841","line":1,"column":8,"nodeType":"784","messageId":"785","endLine":1,"endColumn":13},{"ruleId":"782","severity":1,"message":"879","line":1,"column":36,"nodeType":"784","messageId":"785","endLine":1,"endColumn":44},{"ruleId":"782","severity":1,"message":"880","line":4,"column":10,"nodeType":"784","messageId":"785","endLine":4,"endColumn":28},{"ruleId":"782","severity":1,"message":"881","line":10,"column":11,"nodeType":"784","messageId":"785","endLine":10,"endColumn":24},{"ruleId":"782","severity":1,"message":"882","line":24,"column":11,"nodeType":"784","messageId":"785","endLine":24,"endColumn":28},{"ruleId":"782","severity":1,"message":"883","line":173,"column":11,"nodeType":"784","messageId":"785","endLine":173,"endColumn":23},{"ruleId":"782","severity":1,"message":"884","line":178,"column":13,"nodeType":"784","messageId":"785","endLine":178,"endColumn":19},{"ruleId":"782","severity":1,"message":"885","line":178,"column":21,"nodeType":"784","messageId":"785","endLine":178,"endColumn":29},{"ruleId":"782","severity":1,"message":"886","line":178,"column":31,"nodeType":"784","messageId":"785","endLine":178,"endColumn":41},{"ruleId":"782","severity":1,"message":"887","line":276,"column":11,"nodeType":"784","messageId":"785","endLine":276,"endColumn":27},{"ruleId":"782","severity":1,"message":"888","line":297,"column":11,"nodeType":"784","messageId":"785","endLine":297,"endColumn":19},{"ruleId":"790","severity":1,"message":"889","line":321,"column":8,"nodeType":"792","endLine":321,"endColumn":20,"suggestions":"890"},{"ruleId":"790","severity":1,"message":"891","line":345,"column":8,"nodeType":"792","endLine":345,"endColumn":71,"suggestions":"892"},{"ruleId":"782","severity":1,"message":"893","line":5,"column":8,"nodeType":"784","messageId":"785","endLine":5,"endColumn":11},{"ruleId":"782","severity":1,"message":"894","line":7,"column":25,"nodeType":"784","messageId":"785","endLine":7,"endColumn":30},{"ruleId":"895","severity":1,"message":"896","line":29,"column":1,"nodeType":"897","messageId":"898","endLine":29,"endColumn":20},{"ruleId":"782","severity":1,"message":"841","line":1,"column":8,"nodeType":"784","messageId":"785","endLine":1,"endColumn":13},{"ruleId":"782","severity":1,"message":"899","line":8,"column":11,"nodeType":"784","messageId":"785","endLine":8,"endColumn":20},{"ruleId":"790","severity":1,"message":"870","line":33,"column":8,"nodeType":"792","endLine":33,"endColumn":28,"suggestions":"900"},{"ruleId":"782","severity":1,"message":"841","line":2,"column":8,"nodeType":"784","messageId":"785","endLine":2,"endColumn":13},{"ruleId":"782","severity":1,"message":"879","line":2,"column":17,"nodeType":"784","messageId":"785","endLine":2,"endColumn":25},{"ruleId":"790","severity":1,"message":"901","line":23,"column":6,"nodeType":"792","endLine":23,"endColumn":30,"suggestions":"902"},{"ruleId":"782","severity":1,"message":"903","line":1,"column":17,"nodeType":"784","messageId":"785","endLine":1,"endColumn":27},{"ruleId":"782","severity":1,"message":"904","line":2,"column":10,"nodeType":"784","messageId":"785","endLine":2,"endColumn":17},{"ruleId":"782","severity":1,"message":"905","line":78,"column":11,"nodeType":"784","messageId":"785","endLine":78,"endColumn":24},{"ruleId":"782","severity":1,"message":"783","line":1,"column":28,"nodeType":"784","messageId":"785","endLine":1,"endColumn":34},{"ruleId":"782","severity":1,"message":"848","line":1,"column":17,"nodeType":"784","messageId":"785","endLine":1,"endColumn":26},{"ruleId":"794","replacedBy":"906"},{"ruleId":"796","replacedBy":"907"},{"ruleId":"782","severity":1,"message":"908","line":5,"column":10,"nodeType":"784","messageId":"785","endLine":5,"endColumn":16},{"ruleId":"782","severity":1,"message":"909","line":6,"column":10,"nodeType":"784","messageId":"785","endLine":6,"endColumn":15},{"ruleId":"794","replacedBy":"910"},{"ruleId":"796","replacedBy":"911"},{"ruleId":"782","severity":1,"message":"912","line":1,"column":10,"nodeType":"784","messageId":"785","endLine":1,"endColumn":18},{"ruleId":"790","severity":1,"message":"913","line":32,"column":8,"nodeType":"792","endLine":32,"endColumn":22,"suggestions":"914"},{"ruleId":"782","severity":1,"message":"841","line":1,"column":8,"nodeType":"784","messageId":"785","endLine":1,"endColumn":13},{"ruleId":"782","severity":1,"message":"915","line":2,"column":22,"nodeType":"784","messageId":"785","endLine":2,"endColumn":27},{"ruleId":"782","severity":1,"message":"880","line":7,"column":10,"nodeType":"784","messageId":"785","endLine":7,"endColumn":28},{"ruleId":"790","severity":1,"message":"916","line":72,"column":8,"nodeType":"792","endLine":72,"endColumn":15,"suggestions":"917"},{"ruleId":"782","severity":1,"message":"815","line":10,"column":39,"nodeType":"784","messageId":"785","endLine":10,"endColumn":46},{"ruleId":"782","severity":1,"message":"918","line":101,"column":19,"nodeType":"784","messageId":"785","endLine":101,"endColumn":29},{"ruleId":"782","severity":1,"message":"879","line":1,"column":17,"nodeType":"784","messageId":"785","endLine":1,"endColumn":25},{"ruleId":"782","severity":1,"message":"848","line":1,"column":27,"nodeType":"784","messageId":"785","endLine":1,"endColumn":36},{"ruleId":"782","severity":1,"message":"919","line":1,"column":46,"nodeType":"784","messageId":"785","endLine":1,"endColumn":61},{"ruleId":"782","severity":1,"message":"920","line":4,"column":10,"nodeType":"784","messageId":"785","endLine":4,"endColumn":20},{"ruleId":"790","severity":1,"message":"921","line":23,"column":8,"nodeType":"792","endLine":23,"endColumn":15,"suggestions":"922"},{"ruleId":"782","severity":1,"message":"923","line":45,"column":13,"nodeType":"784","messageId":"785","endLine":45,"endColumn":18},{"ruleId":"782","severity":1,"message":"924","line":46,"column":13,"nodeType":"784","messageId":"785","endLine":46,"endColumn":19},{"ruleId":"782","severity":1,"message":"841","line":1,"column":8,"nodeType":"784","messageId":"785","endLine":1,"endColumn":13},{"ruleId":"790","severity":1,"message":"925","line":53,"column":6,"nodeType":"792","endLine":53,"endColumn":13,"suggestions":"926"},{"ruleId":"790","severity":1,"message":"927","line":73,"column":6,"nodeType":"792","endLine":73,"endColumn":21,"suggestions":"928"},{"ruleId":"782","severity":1,"message":"929","line":8,"column":5,"nodeType":"784","messageId":"785","endLine":8,"endColumn":19},{"ruleId":"782","severity":1,"message":"930","line":9,"column":5,"nodeType":"784","messageId":"785","endLine":9,"endColumn":14},{"ruleId":"782","severity":1,"message":"848","line":13,"column":17,"nodeType":"784","messageId":"785","endLine":13,"endColumn":26},{"ruleId":"782","severity":1,"message":"783","line":13,"column":28,"nodeType":"784","messageId":"785","endLine":13,"endColumn":34},{"ruleId":"782","severity":1,"message":"879","line":1,"column":36,"nodeType":"784","messageId":"785","endLine":1,"endColumn":44},{"ruleId":"931","severity":1,"message":"932","line":10,"column":5,"nodeType":"933","messageId":"934","endLine":12,"endColumn":6},{"ruleId":"895","severity":1,"message":"935","line":115,"column":9,"nodeType":"897","messageId":"936","endLine":115,"endColumn":71},{"ruleId":"790","severity":1,"message":"937","line":208,"column":8,"nodeType":"792","endLine":208,"endColumn":10,"suggestions":"938"},{"ruleId":"782","severity":1,"message":"939","line":248,"column":7,"nodeType":"784","messageId":"785","endLine":248,"endColumn":11},{"ruleId":"782","severity":1,"message":"848","line":1,"column":17,"nodeType":"784","messageId":"785","endLine":1,"endColumn":26},{"ruleId":"782","severity":1,"message":"920","line":3,"column":10,"nodeType":"784","messageId":"785","endLine":3,"endColumn":20},{"ruleId":"782","severity":1,"message":"841","line":1,"column":8,"nodeType":"784","messageId":"785","endLine":1,"endColumn":13},{"ruleId":"782","severity":1,"message":"783","line":1,"column":28,"nodeType":"784","messageId":"785","endLine":1,"endColumn":34},{"ruleId":"782","severity":1,"message":"879","line":1,"column":36,"nodeType":"784","messageId":"785","endLine":1,"endColumn":44},{"ruleId":"782","severity":1,"message":"940","line":3,"column":10,"nodeType":"784","messageId":"785","endLine":3,"endColumn":32},{"ruleId":"782","severity":1,"message":"941","line":18,"column":13,"nodeType":"784","messageId":"785","endLine":18,"endColumn":26},{"ruleId":"790","severity":1,"message":"942","line":152,"column":8,"nodeType":"792","endLine":152,"endColumn":30,"suggestions":"943"},{"ruleId":"782","severity":1,"message":"940","line":5,"column":10,"nodeType":"784","messageId":"785","endLine":5,"endColumn":32},{"ruleId":"782","severity":1,"message":"880","line":5,"column":34,"nodeType":"784","messageId":"785","endLine":5,"endColumn":52},{"ruleId":"782","severity":1,"message":"944","line":5,"column":54,"nodeType":"784","messageId":"785","endLine":5,"endColumn":72},{"ruleId":"782","severity":1,"message":"945","line":6,"column":10,"nodeType":"784","messageId":"785","endLine":6,"endColumn":17},{"ruleId":"782","severity":1,"message":"946","line":12,"column":20,"nodeType":"784","messageId":"785","endLine":12,"endColumn":28},{"ruleId":"782","severity":1,"message":"947","line":14,"column":11,"nodeType":"784","messageId":"785","endLine":14,"endColumn":16},{"ruleId":"782","severity":1,"message":"948","line":15,"column":11,"nodeType":"784","messageId":"785","endLine":15,"endColumn":16},{"ruleId":"790","severity":1,"message":"949","line":42,"column":8,"nodeType":"792","endLine":42,"endColumn":19,"suggestions":"950"},{"ruleId":"782","severity":1,"message":"783","line":1,"column":38,"nodeType":"784","messageId":"785","endLine":1,"endColumn":44},{"ruleId":"782","severity":1,"message":"880","line":5,"column":34,"nodeType":"784","messageId":"785","endLine":5,"endColumn":52},{"ruleId":"782","severity":1,"message":"944","line":5,"column":54,"nodeType":"784","messageId":"785","endLine":5,"endColumn":72},{"ruleId":"790","severity":1,"message":"951","line":82,"column":8,"nodeType":"792","endLine":82,"endColumn":48,"suggestions":"952"},{"ruleId":"782","severity":1,"message":"953","line":4,"column":38,"nodeType":"784","messageId":"785","endLine":4,"endColumn":47},{"ruleId":"782","severity":1,"message":"954","line":6,"column":10,"nodeType":"784","messageId":"785","endLine":6,"endColumn":16},{"ruleId":"782","severity":1,"message":"955","line":9,"column":10,"nodeType":"784","messageId":"785","endLine":9,"endColumn":18},{"ruleId":"782","severity":1,"message":"814","line":44,"column":21,"nodeType":"784","messageId":"785","endLine":44,"endColumn":26},{"ruleId":"790","severity":1,"message":"956","line":92,"column":8,"nodeType":"792","endLine":92,"endColumn":46,"suggestions":"957"},{"ruleId":"782","severity":1,"message":"958","line":124,"column":11,"nodeType":"784","messageId":"785","endLine":124,"endColumn":24},{"ruleId":"790","severity":1,"message":"959","line":164,"column":8,"nodeType":"792","endLine":164,"endColumn":15,"suggestions":"960"},{"ruleId":"782","severity":1,"message":"961","line":8,"column":7,"nodeType":"784","messageId":"785","endLine":8,"endColumn":16},{"ruleId":"782","severity":1,"message":"962","line":14,"column":12,"nodeType":"784","messageId":"785","endLine":14,"endColumn":20},{"ruleId":"963","severity":1,"message":"964","line":46,"column":38,"nodeType":"965","endLine":46,"endColumn":91},{"ruleId":"782","severity":1,"message":"966","line":136,"column":7,"nodeType":"784","messageId":"785","endLine":136,"endColumn":16},{"ruleId":"794","replacedBy":"802"},{"ruleId":"796","replacedBy":"803"},{"ruleId":"782","severity":1,"message":"967","line":3,"column":10,"nodeType":"784","messageId":"785","endLine":3,"endColumn":18},{"ruleId":"790","severity":1,"message":"968","line":18,"column":8,"nodeType":"792","endLine":18,"endColumn":38,"suggestions":"969"},{"ruleId":"782","severity":1,"message":"970","line":3,"column":10,"nodeType":"784","messageId":"785","endLine":3,"endColumn":26},{"ruleId":"782","severity":1,"message":"971","line":5,"column":37,"nodeType":"784","messageId":"785","endLine":5,"endColumn":49},{"ruleId":"782","severity":1,"message":"972","line":7,"column":10,"nodeType":"784","messageId":"785","endLine":7,"endColumn":36},{"ruleId":"782","severity":1,"message":"973","line":29,"column":11,"nodeType":"784","messageId":"785","endLine":29,"endColumn":24},{"ruleId":"782","severity":1,"message":"974","line":50,"column":12,"nodeType":"784","messageId":"785","endLine":50,"endColumn":28},{"ruleId":"782","severity":1,"message":"975","line":50,"column":30,"nodeType":"784","messageId":"785","endLine":50,"endColumn":48},{"ruleId":"790","severity":1,"message":"976","line":57,"column":29,"nodeType":"977","endLine":60,"endColumn":20},{"ruleId":"782","severity":1,"message":"919","line":1,"column":46,"nodeType":"784","messageId":"785","endLine":1,"endColumn":61},{"ruleId":"782","severity":1,"message":"876","line":5,"column":10,"nodeType":"784","messageId":"785","endLine":5,"endColumn":19},{"ruleId":"782","severity":1,"message":"978","line":6,"column":10,"nodeType":"784","messageId":"785","endLine":6,"endColumn":26},{"ruleId":"782","severity":1,"message":"979","line":6,"column":28,"nodeType":"784","messageId":"785","endLine":6,"endColumn":42},{"ruleId":"782","severity":1,"message":"847","line":6,"column":44,"nodeType":"784","messageId":"785","endLine":6,"endColumn":49},{"ruleId":"782","severity":1,"message":"980","line":6,"column":51,"nodeType":"784","messageId":"785","endLine":6,"endColumn":61},{"ruleId":"782","severity":1,"message":"981","line":7,"column":10,"nodeType":"784","messageId":"785","endLine":7,"endColumn":17},{"ruleId":"782","severity":1,"message":"982","line":8,"column":10,"nodeType":"784","messageId":"785","endLine":8,"endColumn":20},{"ruleId":"782","severity":1,"message":"983","line":18,"column":13,"nodeType":"784","messageId":"785","endLine":18,"endColumn":18},{"ruleId":"782","severity":1,"message":"946","line":18,"column":20,"nodeType":"784","messageId":"785","endLine":18,"endColumn":28},{"ruleId":"782","severity":1,"message":"984","line":21,"column":12,"nodeType":"784","messageId":"785","endLine":21,"endColumn":22},{"ruleId":"782","severity":1,"message":"814","line":26,"column":29,"nodeType":"784","messageId":"785","endLine":26,"endColumn":34},{"ruleId":"782","severity":1,"message":"924","line":66,"column":13,"nodeType":"784","messageId":"785","endLine":66,"endColumn":19},{"ruleId":"782","severity":1,"message":"946","line":9,"column":20,"nodeType":"784","messageId":"785","endLine":9,"endColumn":28},{"ruleId":"782","severity":1,"message":"985","line":14,"column":13,"nodeType":"784","messageId":"785","endLine":14,"endColumn":18},{"ruleId":"782","severity":1,"message":"986","line":15,"column":11,"nodeType":"784","messageId":"785","endLine":15,"endColumn":23},{"ruleId":"782","severity":1,"message":"955","line":4,"column":10,"nodeType":"784","messageId":"785","endLine":4,"endColumn":18},{"ruleId":"782","severity":1,"message":"987","line":5,"column":10,"nodeType":"784","messageId":"785","endLine":5,"endColumn":19},{"ruleId":"782","severity":1,"message":"988","line":6,"column":10,"nodeType":"784","messageId":"785","endLine":6,"endColumn":25},{"ruleId":"782","severity":1,"message":"989","line":7,"column":10,"nodeType":"784","messageId":"785","endLine":7,"endColumn":17},{"ruleId":"782","severity":1,"message":"990","line":8,"column":10,"nodeType":"784","messageId":"785","endLine":8,"endColumn":14},{"ruleId":"782","severity":1,"message":"991","line":3,"column":5,"nodeType":"784","messageId":"785","endLine":3,"endColumn":13},{"ruleId":"782","severity":1,"message":"992","line":4,"column":5,"nodeType":"784","messageId":"785","endLine":4,"endColumn":15},{"ruleId":"782","severity":1,"message":"993","line":7,"column":5,"nodeType":"784","messageId":"785","endLine":7,"endColumn":14},{"ruleId":"782","severity":1,"message":"994","line":12,"column":5,"nodeType":"784","messageId":"785","endLine":12,"endColumn":15},{"ruleId":"782","severity":1,"message":"995","line":14,"column":61,"nodeType":"784","messageId":"785","endLine":14,"endColumn":82},{"ruleId":"798","severity":1,"message":"996","line":2,"column":8,"nodeType":"784","messageId":"785","endLine":2,"endColumn":22},{"ruleId":"798","severity":1,"message":"997","line":3,"column":8,"nodeType":"784","messageId":"785","endLine":3,"endColumn":24},{"ruleId":"794","replacedBy":"906"},{"ruleId":"796","replacedBy":"907"},{"ruleId":"790","severity":1,"message":"816","line":40,"column":6,"nodeType":"792","endLine":40,"endColumn":13,"suggestions":"998"},{"ruleId":"790","severity":1,"message":"818","line":46,"column":6,"nodeType":"792","endLine":46,"endColumn":12,"suggestions":"999"},{"ruleId":"782","severity":1,"message":"841","line":1,"column":8,"nodeType":"784","messageId":"785","endLine":1,"endColumn":13},{"ruleId":"790","severity":1,"message":"1000","line":101,"column":8,"nodeType":"792","endLine":101,"endColumn":61,"suggestions":"1001"},{"ruleId":"790","severity":1,"message":"1002","line":121,"column":8,"nodeType":"792","endLine":121,"endColumn":49,"suggestions":"1003"},{"ruleId":"782","severity":1,"message":"1004","line":4,"column":3,"nodeType":"784","messageId":"785","endLine":4,"endColumn":6},{"ruleId":"782","severity":1,"message":"848","line":14,"column":17,"nodeType":"784","messageId":"785","endLine":14,"endColumn":26},{"ruleId":"782","severity":1,"message":"1005","line":20,"column":8,"nodeType":"784","messageId":"785","endLine":20,"endColumn":17},{"ruleId":"782","severity":1,"message":"1006","line":22,"column":10,"nodeType":"784","messageId":"785","endLine":22,"endColumn":18},{"ruleId":"782","severity":1,"message":"1007","line":6,"column":10,"nodeType":"784","messageId":"785","endLine":6,"endColumn":23},{"ruleId":"782","severity":1,"message":"990","line":7,"column":10,"nodeType":"784","messageId":"785","endLine":7,"endColumn":14},{"ruleId":"782","severity":1,"message":"841","line":1,"column":8,"nodeType":"784","messageId":"785","endLine":1,"endColumn":13},{"ruleId":"782","severity":1,"message":"1008","line":1,"column":16,"nodeType":"784","messageId":"785","endLine":1,"endColumn":33},{"ruleId":"782","severity":1,"message":"1009","line":3,"column":8,"nodeType":"784","messageId":"785","endLine":3,"endColumn":16},{"ruleId":"790","severity":1,"message":"1010","line":57,"column":8,"nodeType":"792","endLine":57,"endColumn":20,"suggestions":"1011"},{"ruleId":"782","severity":1,"message":"841","line":1,"column":8,"nodeType":"784","messageId":"785","endLine":1,"endColumn":13},{"ruleId":"790","severity":1,"message":"1012","line":9,"column":8,"nodeType":"792","endLine":9,"endColumn":10,"suggestions":"1013"},{"ruleId":"782","severity":1,"message":"1014","line":1,"column":10,"nodeType":"784","messageId":"785","endLine":1,"endColumn":16},{"ruleId":"790","severity":1,"message":"1015","line":52,"column":8,"nodeType":"792","endLine":52,"endColumn":15,"suggestions":"1016"},{"ruleId":"895","severity":1,"message":"896","line":82,"column":1,"nodeType":"897","messageId":"898","endLine":94,"endColumn":11},{"ruleId":"782","severity":1,"message":"1017","line":1,"column":10,"nodeType":"784","messageId":"785","endLine":1,"endColumn":18},{"ruleId":"782","severity":1,"message":"1018","line":3,"column":10,"nodeType":"784","messageId":"785","endLine":3,"endColumn":32},{"ruleId":"782","severity":1,"message":"1019","line":10,"column":27,"nodeType":"784","messageId":"785","endLine":10,"endColumn":35},{"ruleId":"782","severity":1,"message":"814","line":10,"column":37,"nodeType":"784","messageId":"785","endLine":10,"endColumn":42},{"ruleId":"782","severity":1,"message":"1020","line":11,"column":25,"nodeType":"784","messageId":"785","endLine":11,"endColumn":34},{"ruleId":"782","severity":1,"message":"1021","line":11,"column":36,"nodeType":"784","messageId":"785","endLine":11,"endColumn":42},{"ruleId":"790","severity":1,"message":"1022","line":41,"column":8,"nodeType":"792","endLine":41,"endColumn":10,"suggestions":"1023"},{"ruleId":"790","severity":1,"message":"1024","line":73,"column":8,"nodeType":"792","endLine":73,"endColumn":21,"suggestions":"1025"},{"ruleId":"790","severity":1,"message":"1026","line":70,"column":8,"nodeType":"792","endLine":70,"endColumn":19,"suggestions":"1027"},{"ruleId":"790","severity":1,"message":"1028","line":76,"column":8,"nodeType":"792","endLine":76,"endColumn":15,"suggestions":"1029"},{"ruleId":"790","severity":1,"message":"1030","line":94,"column":8,"nodeType":"792","endLine":94,"endColumn":26,"suggestions":"1031"},{"ruleId":"782","severity":1,"message":"1014","line":1,"column":10,"nodeType":"784","messageId":"785","endLine":1,"endColumn":16},{"ruleId":"782","severity":1,"message":"872","line":1,"column":18,"nodeType":"784","messageId":"785","endLine":1,"endColumn":22},{"ruleId":"782","severity":1,"message":"848","line":2,"column":17,"nodeType":"784","messageId":"785","endLine":2,"endColumn":26},{"ruleId":"782","severity":1,"message":"983","line":19,"column":11,"nodeType":"784","messageId":"785","endLine":19,"endColumn":16},{"ruleId":"782","severity":1,"message":"946","line":19,"column":18,"nodeType":"784","messageId":"785","endLine":19,"endColumn":26},{"ruleId":"782","severity":1,"message":"1032","line":36,"column":9,"nodeType":"784","messageId":"785","endLine":36,"endColumn":21},{"ruleId":"782","severity":1,"message":"1033","line":84,"column":17,"nodeType":"784","messageId":"785","endLine":84,"endColumn":26},{"ruleId":"782","severity":1,"message":"1034","line":153,"column":17,"nodeType":"784","messageId":"785","endLine":153,"endColumn":24},{"ruleId":"782","severity":1,"message":"1035","line":8,"column":7,"nodeType":"784","messageId":"785","endLine":8,"endColumn":17},{"ruleId":"782","severity":1,"message":"1036","line":17,"column":9,"nodeType":"784","messageId":"785","endLine":17,"endColumn":16},{"ruleId":"782","severity":1,"message":"879","line":1,"column":17,"nodeType":"784","messageId":"785","endLine":1,"endColumn":25},{"ruleId":"782","severity":1,"message":"815","line":34,"column":20,"nodeType":"784","messageId":"785","endLine":34,"endColumn":27},{"ruleId":"782","severity":1,"message":"814","line":34,"column":29,"nodeType":"784","messageId":"785","endLine":34,"endColumn":34},{"ruleId":"790","severity":1,"message":"1037","line":54,"column":8,"nodeType":"792","endLine":54,"endColumn":10,"suggestions":"1038"},{"ruleId":"782","severity":1,"message":"1039","line":1,"column":10,"nodeType":"784","messageId":"785","endLine":1,"endColumn":20},{"ruleId":"782","severity":1,"message":"1040","line":1,"column":22,"nodeType":"784","messageId":"785","endLine":1,"endColumn":28},{"ruleId":"782","severity":1,"message":"980","line":1,"column":30,"nodeType":"784","messageId":"785","endLine":1,"endColumn":40},{"ruleId":"782","severity":1,"message":"1018","line":5,"column":10,"nodeType":"784","messageId":"785","endLine":5,"endColumn":32},{"ruleId":"782","severity":1,"message":"1041","line":21,"column":11,"nodeType":"784","messageId":"785","endLine":21,"endColumn":33},{"ruleId":"782","severity":1,"message":"1042","line":59,"column":31,"nodeType":"784","messageId":"785","endLine":59,"endColumn":41},{"ruleId":"790","severity":1,"message":"1043","line":102,"column":8,"nodeType":"792","endLine":102,"endColumn":37,"suggestions":"1044"},{"ruleId":"782","severity":1,"message":"841","line":1,"column":8,"nodeType":"784","messageId":"785","endLine":1,"endColumn":13},{"ruleId":"790","severity":1,"message":"1045","line":13,"column":8,"nodeType":"792","endLine":13,"endColumn":20,"suggestions":"1046"},{"ruleId":"782","severity":1,"message":"1047","line":4,"column":10,"nodeType":"784","messageId":"785","endLine":4,"endColumn":23},{"ruleId":"782","severity":1,"message":"1048","line":5,"column":10,"nodeType":"784","messageId":"785","endLine":5,"endColumn":24},{"ruleId":"782","severity":1,"message":"1018","line":6,"column":10,"nodeType":"784","messageId":"785","endLine":6,"endColumn":32},{"ruleId":"782","severity":1,"message":"1049","line":7,"column":10,"nodeType":"784","messageId":"785","endLine":7,"endColumn":18},{"ruleId":"782","severity":1,"message":"1050","line":11,"column":11,"nodeType":"784","messageId":"785","endLine":11,"endColumn":19},{"ruleId":"782","severity":1,"message":"1051","line":12,"column":11,"nodeType":"784","messageId":"785","endLine":12,"endColumn":22},{"ruleId":"782","severity":1,"message":"1052","line":13,"column":11,"nodeType":"784","messageId":"785","endLine":13,"endColumn":18},{"ruleId":"782","severity":1,"message":"1053","line":17,"column":29,"nodeType":"784","messageId":"785","endLine":17,"endColumn":37},{"ruleId":"782","severity":1,"message":"1054","line":17,"column":39,"nodeType":"784","messageId":"785","endLine":17,"endColumn":45},{"ruleId":"782","severity":1,"message":"841","line":1,"column":8,"nodeType":"784","messageId":"785","endLine":1,"endColumn":13},{"ruleId":"782","severity":1,"message":"1055","line":3,"column":10,"nodeType":"784","messageId":"785","endLine":3,"endColumn":21},{"ruleId":"790","severity":1,"message":"1056","line":17,"column":8,"nodeType":"792","endLine":17,"endColumn":21,"suggestions":"1057"},{"ruleId":"782","severity":1,"message":"1058","line":19,"column":31,"nodeType":"784","messageId":"785","endLine":19,"endColumn":48},{"ruleId":"782","severity":1,"message":"1059","line":19,"column":50,"nodeType":"784","messageId":"785","endLine":19,"endColumn":55},{"ruleId":"782","severity":1,"message":"970","line":3,"column":10,"nodeType":"784","messageId":"785","endLine":3,"endColumn":26},{"ruleId":"798","severity":1,"message":"1060","line":2,"column":10,"nodeType":"784","messageId":"785","endLine":2,"endColumn":18},{"ruleId":"794","replacedBy":"795"},{"ruleId":"796","replacedBy":"797"},{"ruleId":"782","severity":1,"message":"1014","line":1,"column":10,"nodeType":"784","messageId":"785","endLine":1,"endColumn":16},{"ruleId":"782","severity":1,"message":"872","line":1,"column":18,"nodeType":"784","messageId":"785","endLine":1,"endColumn":22},{"ruleId":"782","severity":1,"message":"812","line":1,"column":39,"nodeType":"784","messageId":"785","endLine":1,"endColumn":47},{"ruleId":"782","severity":1,"message":"953","line":1,"column":63,"nodeType":"784","messageId":"785","endLine":1,"endColumn":72},{"ruleId":"782","severity":1,"message":"1061","line":4,"column":8,"nodeType":"784","messageId":"785","endLine":4,"endColumn":20},{"ruleId":"782","severity":1,"message":"978","line":5,"column":8,"nodeType":"784","messageId":"785","endLine":5,"endColumn":24},{"ruleId":"782","severity":1,"message":"1062","line":11,"column":10,"nodeType":"784","messageId":"785","endLine":11,"endColumn":39},{"ruleId":"782","severity":1,"message":"1063","line":16,"column":12,"nodeType":"784","messageId":"785","endLine":16,"endColumn":17},{"ruleId":"782","severity":1,"message":"1064","line":16,"column":19,"nodeType":"784","messageId":"785","endLine":16,"endColumn":27},{"ruleId":"782","severity":1,"message":"865","line":17,"column":12,"nodeType":"784","messageId":"785","endLine":17,"endColumn":16},{"ruleId":"782","severity":1,"message":"1065","line":17,"column":18,"nodeType":"784","messageId":"785","endLine":17,"endColumn":25},{"ruleId":"782","severity":1,"message":"814","line":21,"column":29,"nodeType":"784","messageId":"785","endLine":21,"endColumn":34},{"ruleId":"782","severity":1,"message":"983","line":27,"column":13,"nodeType":"784","messageId":"785","endLine":27,"endColumn":18},{"ruleId":"782","severity":1,"message":"946","line":27,"column":20,"nodeType":"784","messageId":"785","endLine":27,"endColumn":28},{"ruleId":"782","severity":1,"message":"1066","line":45,"column":11,"nodeType":"784","messageId":"785","endLine":45,"endColumn":26},{"ruleId":"782","severity":1,"message":"1067","line":58,"column":12,"nodeType":"784","messageId":"785","endLine":58,"endColumn":22},{"ruleId":"782","severity":1,"message":"1068","line":60,"column":12,"nodeType":"784","messageId":"785","endLine":60,"endColumn":17},{"ruleId":"782","severity":1,"message":"1069","line":63,"column":11,"nodeType":"784","messageId":"785","endLine":63,"endColumn":21},{"ruleId":"790","severity":1,"message":"1070","line":84,"column":8,"nodeType":"792","endLine":84,"endColumn":14,"suggestions":"1071"},{"ruleId":"895","severity":1,"message":"935","line":224,"column":5,"nodeType":"897","messageId":"936","endLine":224,"endColumn":63},{"ruleId":"1072","severity":1,"message":"1073","line":224,"column":5,"nodeType":"897","messageId":"1074","endLine":224,"endColumn":63},{"ruleId":"790","severity":1,"message":"1075","line":15,"column":8,"nodeType":"792","endLine":15,"endColumn":23,"suggestions":"1076"},{"ruleId":"1077","severity":1,"message":"1078","line":80,"column":17,"nodeType":"1079","messageId":"832","endLine":80,"endColumn":19},{"ruleId":"1080","severity":1,"message":"1081","line":90,"column":12,"nodeType":"1082","messageId":"1083","endLine":90,"endColumn":38},{"ruleId":"790","severity":1,"message":"1084","line":28,"column":6,"nodeType":"792","endLine":28,"endColumn":8,"suggestions":"1085"},{"ruleId":"790","severity":1,"message":"1086","line":35,"column":6,"nodeType":"792","endLine":35,"endColumn":14,"suggestions":"1087"},{"ruleId":"790","severity":1,"message":"1088","line":40,"column":6,"nodeType":"792","endLine":40,"endColumn":29,"suggestions":"1089"},{"ruleId":"782","severity":1,"message":"1090","line":4,"column":10,"nodeType":"784","messageId":"785","endLine":4,"endColumn":28},{"ruleId":"782","severity":1,"message":"946","line":8,"column":20,"nodeType":"784","messageId":"785","endLine":8,"endColumn":28},{"ruleId":"790","severity":1,"message":"1091","line":32,"column":8,"nodeType":"792","endLine":32,"endColumn":10,"suggestions":"1092"},{"ruleId":"782","severity":1,"message":"848","line":2,"column":17,"nodeType":"784","messageId":"785","endLine":2,"endColumn":26},{"ruleId":"782","severity":1,"message":"1093","line":7,"column":11,"nodeType":"784","messageId":"785","endLine":7,"endColumn":14},{"ruleId":"790","severity":1,"message":"1094","line":25,"column":8,"nodeType":"792","endLine":25,"endColumn":14,"suggestions":"1095"},{"ruleId":"782","severity":1,"message":"983","line":11,"column":12,"nodeType":"784","messageId":"785","endLine":11,"endColumn":17},{"ruleId":"782","severity":1,"message":"946","line":11,"column":19,"nodeType":"784","messageId":"785","endLine":11,"endColumn":27},{"ruleId":"782","severity":1,"message":"919","line":1,"column":46,"nodeType":"784","messageId":"785","endLine":1,"endColumn":61},{"ruleId":"782","severity":1,"message":"920","line":4,"column":10,"nodeType":"784","messageId":"785","endLine":4,"endColumn":20},{"ruleId":"790","severity":1,"message":"921","line":21,"column":8,"nodeType":"792","endLine":21,"endColumn":15,"suggestions":"1096"},{"ruleId":"782","severity":1,"message":"923","line":43,"column":13,"nodeType":"784","messageId":"785","endLine":43,"endColumn":18},{"ruleId":"782","severity":1,"message":"924","line":44,"column":13,"nodeType":"784","messageId":"785","endLine":44,"endColumn":19},"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'convertHumanToUnixInitial' is defined but never used.","'usePortfolioGenerator' is defined but never used.","'generateSerieFromBeginin' is assigned a value but never used.","'koko' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'state.userActivity'. Either include them or remove the dependency array.","ArrayExpression",["1097"],"no-native-reassign",["1098"],"no-negated-in-lhs",["1099"],"@typescript-eslint/no-unused-vars","'StyledDiv' is assigned a value but never used.",["1098"],["1099"],["1098"],["1099"],"React Hook useEffect has a missing dependency: 'currentCompany.ticker'. Either include it or remove the dependency array.",["1100"],["1098"],["1099"],"'useAuth' is defined but never used.","React Hook useEffect has a missing dependency: 'modalOpen'. Either include it or remove the dependency array.",["1101"],"'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'error' is assigned a value but never used.","'loading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'ticker'. Either include it or remove the dependency array. If 'setData' needs the current value of 'ticker', you can also switch to useReducer instead of useState and read 'ticker' in the reducer.",["1102"],"React Hook useEffect has missing dependencies: 'dispatch', 'state.keymetrics', and 'ticker'. Either include them or remove the dependency array.",["1103"],"React Hook useEffect has a missing dependency: 'setListHeight'. Either include it or remove the dependency array. If 'setListHeight' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1104"],"no-whitespace-before-property","Unexpected whitespace before property find.","MemberExpression","unexpectedWhitespace",{"range":"1105","text":"1106"},"React Hook useEffect has a missing dependency: 'getMarketValueByStock'. Either include it or remove the dependency array.",["1107"],"no-dupe-keys","Duplicate key 'plotBorderWidth'.","ObjectExpression","unexpected","'Divider' is defined but never used.","'handleClickOpen' is assigned a value but never used.",["1098"],["1099"],"React Hook useEffect has a missing dependency: 'email'. Either include it or remove the dependency array.",["1108"],"React Hook useEffect has a missing dependency: 'username'. Either include it or remove the dependency array.",["1109"],"'React' is defined but never used.","'userDispatch' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userState.token'. Either include it or remove the dependency array.",["1110"],"React Hook useEffect has missing dependencies: 'userDispatch' and 'userState.token'. Either include them or remove the dependency array.",["1111"],"'Paper' is defined but never used.","'useEffect' is defined but never used.","'LateralSection' is defined but never used.","'Marcador2' is defined but never used.","'Component' is assigned a value but never used.","'stockLibrary' is assigned a value but never used.","'dataReady' is assigned a value but never used.","'setDataReady' is assigned a value but never used.","'quotes' is assigned a value but never used.","'setQuotes' is assigned a value but never used.","'KeymetricsChart' is defined but never used.","'Financials' is defined but never used.","'CompanySection' is defined but never used.","'useOktaAuth' is defined but never used.","'useTemporaryPossesions' is defined but never used.","'PersonasList' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'userState'. Either include them or remove the dependency array.",["1112"],"'open' is assigned a value but never used.","'width' is assigned a value but never used.","'setWidth' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.",["1113"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["1114"],"'Chip' is defined but never used.","'Tab' is defined but never used.","'Tabs' is defined but never used.","'useTheme' is defined but never used.","'useParams' is defined but never used.","'useMesure' is defined but never used.","'Transition' is defined but never used.","'useState' is defined but never used.","'convertUnixToHuman' is defined but never used.","'userRefreshed' is assigned a value but never used.","'getLastValidPrice' is assigned a value but never used.","'generateSeri' is assigned a value but never used.","'change' is defined but never used.","'lastDate' is defined but never used.","'lastIncome' is defined but never used.","'storePortfolioDB' is assigned a value but never used.","'asynquer' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'addFirstSerie', 'dispatch', and 'generateSerie'. Either include them or remove the dependency array.",["1115"],"React Hook useEffect has missing dependencies: 'addFirstSerie', 'dispatch', 'generateSerie', and 'handleSimulatedSeries'. Either include them or remove the dependency array.",["1116"],"'App' is defined but never used.","'Route' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'iteration' is assigned a value but never used.",["1117"],"React Hook useEffect has a missing dependency: 'userDispatch'. Either include it or remove the dependency array.",["1118"],"'useContext' is defined but never used.","'Context' is defined but never used.","'handleSubmita' is assigned a value but never used.",["1098"],["1099"],"'Nasdaq' is defined but never used.","'SP500' is defined but never used.",["1098"],["1099"],"'debounce' is defined but never used.","React Hook useEffect has missing dependencies: 'chunkCount', 'currentChunk', and 'isDataReadyScroll'. Either include them or remove the dependency array.",["1119"],"'chart' is defined but never used.","React Hook useEffect has missing dependencies: 'addFirstSerie', 'prepareData', and 'simulateSerie'. Either include them or remove the dependency array.",["1120"],"'created_at' is assigned a value but never used.","'useLayoutEffect' is defined but never used.","'useUILayer' is defined but never used.","React Hook useEffect has a missing dependency: 'prepareData'. Either include it or remove the dependency array.",["1121"],"'ohlNA' is assigned a value but never used.","'volume' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'datos', 'dispatch', 'isInState', 'options.explicitUrl', 'state.indexes', 'ticker', and 'url'. Either include them or remove the dependency array. If 'setRequest' needs the current value of 'ticker', you can also switch to useReducer instead of useState and read 'ticker' in the reducer.",["1122"],"React Hook useEffect has missing dependencies: 'field', 'state', and 'ticker'. Either include them or remove the dependency array. If 'setRequest' needs the current value of 'field', you can also switch to useReducer instead of useState and read 'field' in the reducer.",["1123"],"'TableContainer' is defined but never used.","'TableHead' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","Nested block is redundant.","redundantNestedBlock","React Hook useEffect has a missing dependency: 'timeline'. Either include it or remove the dependency array.",["1124"],"'Koko' is assigned a value but never used.","'convertHumanToUnixInit' is defined but never used.","'missingTicker' is assigned a value but never used.","React Hook useEffect has a missing dependency: '__init'. Either include it or remove the dependency array.",["1125"],"'milisencondsInADay' is defined but never used.","'rounder' is defined but never used.","'dispatch' is assigned a value but never used.","'data1' is assigned a value but never used.","'data2' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'companiesChange' and 'loading'. Either include them or remove the dependency array.",["1126"],"React Hook useEffect has a missing dependency: 'prepareDataset'. Either include it or remove the dependency array.",["1127"],"'TextField' is defined but never used.","'Search' is defined but never used.","'Searcher' is defined but never used.","React Hook useEffect has missing dependencies: 'getCompanyChange', 'logos', and 'state.currentPossesions.stocks'. Either include them or remove the dependency array.",["1128"],"'backToInitial' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'readyState'. Either include it or remove the dependency array.",["1129"],"'Container' is assigned a value but never used.","'response' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'FormGroup' is assigned a value but never used.","'Marcador' is defined but never used.","React Hook useEffect has a missing dependency: 'state.currentPossesions'. Either include it or remove the dependency array.",["1130"],"'useFetchWithCors' is defined but never used.","'NewsItemOver' is defined but never used.","'CompassCalibrationOutlined' is defined but never used.","'isLoadingImgs' is assigned a value but never used.","'showingSkeletong' is assigned a value but never used.","'setShowingSkeleton' is assigned a value but never used.","Assignments to the 'debounceTimer' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","'CircularProgress' is defined but never used.","'LinearProgress' is defined but never used.","'Typography' is defined but never used.","'TableUI' is defined but never used.","'KeyMetrics' is defined but never used.","'state' is assigned a value but never used.","'isBuilding' is assigned a value but never used.","'datos' is assigned a value but never used.","'readyTickers' is assigned a value but never used.","'Searcher2' is defined but never used.","'GainersCarousel' is defined but never used.","'Indices' is defined but never used.","'News' is defined but never used.","'Collapse' is defined but never used.","'IconButton' is defined but never used.","'TableBody' is defined but never used.","'withStyles' is defined but never used.","'TableSubSubtitleChunk' is defined but never used.","'ThumbUpAltIcon' is defined but never used.","'ThumbDownAltIcon' is defined but never used.",["1131"],["1132"],"React Hook useEffect has missing dependencies: 'addFirstSerie', 'dispatch', and 'simulateSeries'. Either include them or remove the dependency array.",["1133"],"React Hook useEffect has missing dependencies: 'addFirstSerie', 'dispatch', 'generateSeries', and 'portfolioHistory'. Either include them or remove the dependency array.",["1134"],"'Box' is defined but never used.","'InboxIcon' is defined but never used.","'TreeItem' is defined but never used.","'CovidSection2' is defined but never used.","'ClickAwayListener' is defined but never used.","'DoneIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'setChosenFields'. Either include it or remove the dependency array. If 'setChosenFields' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1135"],"React Hook useEffect has a missing dependency: 'setMountApproval'. Either include it or remove the dependency array.",["1136"],"'Button' is defined but never used.","React Hook useEffect has a missing dependency: 'handleGetFieldData'. Either include it or remove the dependency array.",["1137"],"'arrayMin' is defined but never used.","'CustomCircularProgress' is defined but never used.","'fetching' is assigned a value but never used.","'pfetching' is assigned a value but never used.","'perror' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'state.peers' and 'ticker'. Either include them or remove the dependency array. If 'setPeersData' needs the current value of 'ticker', you can also switch to useReducer instead of useState and read 'ticker' in the reducer.",["1138"],"React Hook useEffect has missing dependencies: 'dispatch', 'state.peers', and 'ticker'. Either include them or remove the dependency array.",["1139"],"React Hook useEffect has a missing dependency: 'recursivadorStyle'. Either include it or remove the dependency array.",["1140"],"React Hook useEffect has a missing dependency: 'setMode'. Either include it or remove the dependency array. If 'setMode' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1141"],"React Hook useEffect has a missing dependency: 'setDate'. Either include it or remove the dependency array. If 'setDate' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1142"],"'handleSearch' is assigned a value but never used.","'className' is assigned a value but never used.","'classes' is assigned a value but never used.","'responsive' is assigned a value but never used.","'allData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["1143"],"'makeStyles' is defined but never used.","'Slider' is defined but never used.","'absolutePopulationData' is assigned a value but never used.","'population' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'blackList', 'findPopulation', and 'loadingHuge'. Either include them or remove the dependency array.",["1144"],"React Hook useEffect has missing dependencies: 'debounceTime' and 'fieldChanging'. Either include them or remove the dependency array.",["1145"],"'IndexesChart2' is defined but never used.","'MiniatureChart' is defined but never used.","'useFetch' is defined but never used.","'category' is assigned a value but never used.","'subCategory' is assigned a value but never used.","'options' is assigned a value but never used.","'loading2' is assigned a value but never used.","'error2' is assigned a value but never used.","'useViewport' is defined but never used.","React Hook useEffect has a missing dependency: 'chartInstance'. Either include it or remove the dependency array.",["1146"],"'changesPercentage' is assigned a value but never used.","'price' is assigned a value but never used.","'UserMain' is defined but never used.","'Autocomplete' is defined but never used.","'SettingsSystemDaydreamTwoTone' is defined but never used.","'query' is assigned a value but never used.","'setQuery' is assigned a value but never used.","'setOpen' is assigned a value but never used.","'handleSelection' is assigned a value but never used.","'dimensions' is assigned a value but never used.","'upper' is assigned a value but never used.","'handleBlur' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'opened', 'setShowOverlay', and 'setTickerMove'. Either include them or remove the dependency array.",["1147"],"no-unreachable","Unreachable code.","unreachableCode","React Hook useEffect has a missing dependency: 'datos.symbol'. Either include it or remove the dependency array.",["1148"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","React Hook useEffect has missing dependencies: 'location', 'params', and 'tickar'. Either include them or remove the dependency array.",["1149"],"React Hook useEffect has missing dependencies: 'dispatch' and 'ticker'. Either include them or remove the dependency array.",["1150"],"React Hook useEffect has an unnecessary dependency: 'keyMetricsRef.current'. Either exclude it or remove the dependency array. Mutable values like 'keyMetricsRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["1151"],"'convertHumanToUnix' is defined but never used.","React Hook useEffect has missing dependencies: 'state.portfolioHistoryByCompany' and 'ticker'. Either include them or remove the dependency array.",["1152"],"'url' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'company', 'dispatch', and 'state.financials'. Either include them or remove the dependency array.",["1153"],["1154"],{"desc":"1155","fix":"1156"},"no-global-assign","no-unsafe-negation",{"desc":"1157","fix":"1158"},{"desc":"1159","fix":"1160"},{"desc":"1161","fix":"1162"},{"desc":"1163","fix":"1164"},{"desc":"1165","fix":"1166"},[1254,1256],".",{"desc":"1167","fix":"1168"},{"desc":"1169","fix":"1170"},{"desc":"1171","fix":"1172"},{"desc":"1173","fix":"1174"},{"desc":"1175","fix":"1176"},{"desc":"1177","fix":"1178"},{"desc":"1179","fix":"1180"},{"desc":"1181","fix":"1182"},{"desc":"1183","fix":"1184"},{"desc":"1185","fix":"1186"},{"desc":"1187","fix":"1188"},{"desc":"1189","fix":"1190"},{"desc":"1191","fix":"1192"},{"desc":"1193","fix":"1194"},{"desc":"1195","fix":"1196"},{"desc":"1197","fix":"1198"},{"desc":"1199","fix":"1200"},{"desc":"1201","fix":"1202"},{"desc":"1203","fix":"1204"},{"desc":"1205","fix":"1206"},{"desc":"1207","fix":"1208"},{"desc":"1209","fix":"1210"},{"desc":"1211","fix":"1212"},{"desc":"1213","fix":"1214"},{"desc":"1161","fix":"1215"},{"desc":"1163","fix":"1216"},{"desc":"1217","fix":"1218"},{"desc":"1219","fix":"1220"},{"desc":"1221","fix":"1222"},{"desc":"1223","fix":"1224"},{"desc":"1225","fix":"1226"},{"desc":"1227","fix":"1228"},{"desc":"1229","fix":"1230"},{"desc":"1231","fix":"1232"},{"desc":"1233","fix":"1234"},{"desc":"1235","fix":"1236"},{"desc":"1237","fix":"1238"},{"desc":"1239","fix":"1240"},{"desc":"1241","fix":"1242"},{"desc":"1243","fix":"1244"},{"desc":"1245","fix":"1246"},{"desc":"1247","fix":"1248"},{"desc":"1249","fix":"1250"},{"desc":"1251","fix":"1252"},{"desc":"1253","fix":"1254"},{"desc":"1255","fix":"1256"},{"desc":"1257","fix":"1258"},{"desc":"1195","fix":"1259"},"Update the dependencies array to be: [state.setPruebaReady, state.generatedSeries, state.userActivity, dispatch]",{"range":"1260","text":"1261"},"Update the dependencies array to be: [currentCompany.ticker, following]",{"range":"1262","text":"1263"},"Update the dependencies array to be: [modalOpen, state.currentPossesions.userCash]",{"range":"1264","text":"1265"},"Update the dependencies array to be: [state, ticker]",{"range":"1266","text":"1267"},"Update the dependencies array to be: [data, dispatch, state.keymetrics, ticker]",{"range":"1268","text":"1269"},"Update the dependencies array to be: [data, setListHeight]",{"range":"1270","text":"1271"},"Update the dependencies array to be: [stocks, state.areHistoricPricesReady, getMarketValueByStock]",{"range":"1272","text":"1273"},"Update the dependencies array to be: [debouncedQuery.email, email]",{"range":"1274","text":"1275"},"Update the dependencies array to be: [debouncedQuery.username, username]",{"range":"1276","text":"1277"},"Update the dependencies array to be: [userState.token]",{"range":"1278","text":"1279"},"Update the dependencies array to be: [userDispatch, userState.token]",{"range":"1280","text":"1281"},"Update the dependencies array to be: [dispatch, userState, userState.isAuthenticated]",{"range":"1282","text":"1283"},"Update the dependencies array to be: [dispatch, history, selection]",{"range":"1284","text":"1285"},"Update the dependencies array to be: [dispatch, state.currentCompany]",{"range":"1286","text":"1287"},"Update the dependencies array to be: [addFirstSerie, dispatch, generateSerie, simulation]",{"range":"1288","text":"1289"},"Update the dependencies array to be: [generatedSeries, areHistoricPricesReady, portfolioSeriesReady, addFirstSerie, handleSimulatedSeries, generateSerie, dispatch]",{"range":"1290","text":"1291"},"Update the dependencies array to be: [dispatch, state.userActivity]",{"range":"1292","text":"1293"},"Update the dependencies array to be: [authState, authService, userDispatch]",{"range":"1294","text":"1295"},"Update the dependencies array to be: [chunkCount, currentChunk, intersection, isDataReadyScroll]",{"range":"1296","text":"1297"},"Update the dependencies array to be: [addFirstSerie, datos, prepareData, simulateSerie]",{"range":"1298","text":"1299"},"Update the dependencies array to be: [datos, prepareData]",{"range":"1300","text":"1301"},"Update the dependencies array to be: [datos, dispatch, field, isInState, options.explicitUrl, state.indexes, ticker, url]",{"range":"1302","text":"1303"},"Update the dependencies array to be: [field, state, state.indexes, ticker]",{"range":"1304","text":"1305"},"Update the dependencies array to be: [timeline]",{"range":"1306","text":"1307"},"Update the dependencies array to be: [__init, state.setPruebaReady]",{"range":"1308","text":"1309"},"Update the dependencies array to be: [available, companiesChange, loading]",{"range":"1310","text":"1311"},"Update the dependencies array to be: [state.companiesImpact, generatedSeries, prepareDataset]",{"range":"1312","text":"1313"},"Update the dependencies array to be: [successLogo, quotes, companiesChange, state.currentPossesions.stocks, getCompanyChange, logos]",{"range":"1314","text":"1315"},"Update the dependencies array to be: [query, readyState]",{"range":"1316","text":"1317"},"Update the dependencies array to be: [state.areHistoricPricesReady, state.currentPossesions]",{"range":"1318","text":"1319"},{"range":"1320","text":"1267"},{"range":"1321","text":"1269"},"Update the dependencies array to be: [addFirstSerie, areHistoricPricesReady, dispatch, generatedSeries, simulateSeries, simulation]",{"range":"1322","text":"1323"},"Update the dependencies array to be: [addFirstSerie, areHistoricPricesReady, dispatch, generateSeries, generatedSeries, portfolioHistory]",{"range":"1324","text":"1325"},"Update the dependencies array to be: [selections, setChosenFields]",{"range":"1326","text":"1327"},"Update the dependencies array to be: [setMountApproval]",{"range":"1328","text":"1329"},"Update the dependencies array to be: [field, handleGetFieldData]",{"range":"1330","text":"1331"},"Update the dependencies array to be: [state.peers, ticker]",{"range":"1332","text":"1333"},"Update the dependencies array to be: [dispatch, peerTickers, state.peers, ticker]",{"range":"1334","text":"1335"},"Update the dependencies array to be: [recursivadorStyle, sliderDay]",{"range":"1336","text":"1337"},"Update the dependencies array to be: [setMode, value]",{"range":"1338","text":"1339"},"Update the dependencies array to be: [month, day, year, setDate]",{"range":"1340","text":"1341"},"Update the dependencies array to be: [fetchData]",{"range":"1342","text":"1343"},"Update the dependencies array to be: [blackList, date, findPopulation, loadingHuge, mode, population.data]",{"range":"1344","text":"1345"},"Update the dependencies array to be: [debounceTime, fieldChanging, searchTerm]",{"range":"1346","text":"1347"},"Update the dependencies array to be: [chartInstance, sidebarOpen]",{"range":"1348","text":"1349"},"Update the dependencies array to be: [data, opened, setShowOverlay, setTickerMove]",{"range":"1350","text":"1351"},"Update the dependencies array to be: [chartSelected, datos.symbol]",{"range":"1352","text":"1353"},"Update the dependencies array to be: [location, params, tickar]",{"range":"1354","text":"1355"},"Update the dependencies array to be: [dispatch, tickar, ticker]",{"range":"1356","text":"1357"},"Update the dependencies array to be: []",{"range":"1358","text":"1359"},"Update the dependencies array to be: [state.portfolioHistoryByCompany, ticker]",{"range":"1360","text":"1361"},"Update the dependencies array to be: [company, data, dispatch, state.financials]",{"range":"1362","text":"1363"},{"range":"1364","text":"1301"},[25851,25896],"[state.setPruebaReady, state.generatedSeries, state.userActivity, dispatch]",[2944,2955],"[currentCompany.ticker, following]",[4566,4600],"[modalOpen, state.currentPossesions.userCash]",[1296,1303],"[state, ticker]",[1503,1509],"[data, dispatch, state.keymetrics, ticker]",[1740,1746],"[data, setListHeight]",[2161,2199],"[stocks, state.areHistoricPricesReady, getMarketValueByStock]",[1694,1716],"[debouncedQuery.email, email]",[2550,2575],"[debouncedQuery.username, username]",[937,939],"[userState.token]",[2615,2617],"[userDispatch, userState.token]",[4727,4754],"[dispatch, userState, userState.isAuthenticated]",[6014,6025],"[dispatch, history, selection]",[6268,6290],"[dispatch, state.currentCompany]",[14274,14286],"[addFirstSerie, dispatch, generateSerie, simulation]",[15157,15220],"[generatedSeries, areHistoricPricesReady, portfolioSeriesReady, addFirstSerie, handleSimulatedSeries, generateSerie, dispatch]",[1228,1248],"[dispatch, state.userActivity]",[729,753],"[authState, authService, userDispatch]",[1246,1260],"[chunkCount, currentChunk, intersection, isDataReadyScroll]",[2454,2461],"[addFirstSerie, datos, prepareData, simulateSerie]",[828,835],"[datos, prepareData]",[1422,1429],"[datos, dispatch, field, isInState, options.explicitUrl, state.indexes, ticker, url]",[1938,1953],"[field, state, state.indexes, ticker]",[7429,7431],"[timeline]",[6285,6307],"[__init, state.setPruebaReady]",[1540,1551],"[available, companiesChange, loading]",[3114,3154],"[state.companiesImpact, generatedSeries, prepareDataset]",[3645,3683],"[successLogo, quotes, companiesChange, state.currentPossesions.stocks, getCompanyChange, logos]",[6049,6056],"[query, readyState]",[762,792],"[state.areHistoricPricesReady, state.currentPossesions]",[1466,1473],[1655,1661],[4234,4287],"[addFirstSerie, areHistoricPricesReady, dispatch, generatedSeries, simulateSeries, simulation]",[4934,4975],"[addFirstSerie, areHistoricPricesReady, dispatch, generateSeries, generatedSeries, portfolioHistory]",[1533,1545],"[selections, setChosenFields]",[240,242],"[setMountApproval]",[1894,1901],"[field, handleGetFieldData]",[1658,1660],"[state.peers, ticker]",[3168,3181],"[dispatch, peerTickers, state.peers, ticker]",[2150,2161],"[recursivadorStyle, sliderDay]",[2257,2264],"[setMode, value]",[2798,2816],"[month, day, year, setDate]",[1747,1749],"[fetchData]",[4494,4523],"[blackList, date, findPopulation, loadingHuge, mode, population.data]",[494,506],"[debounceTime, fieldChanging, searchTerm]",[563,576],"[chartInstance, sidebarOpen]",[2833,2839],"[data, opened, setShowOverlay, setTickerMove]",[617,632],"[chartSelected, datos.symbol]",[1073,1075],"[location, params, tickar]",[1272,1280],"[dispatch, tickar, ticker]",[1418,1441],"[]",[1044,1046],"[state.portfolioHistoryByCompany, ticker]",[1089,1095],"[company, data, dispatch, state.financials]",[778,785]]