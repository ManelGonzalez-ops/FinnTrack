[{"C:\\Users\\gonza\\finance-app\\src\\components\\Navbar.js":"1","C:\\Users\\gonza\\finance-app\\src\\App.js":"2","C:\\Users\\gonza\\finance-app\\src\\serviceWorker.ts":"3","C:\\Users\\gonza\\finance-app\\src\\components\\Searcher.js":"4","C:\\Users\\gonza\\finance-app\\src\\charts\\KeymetricsChart.js":"5","C:\\Users\\gonza\\finance-app\\src\\views\\company\\CompanySection.js":"6","C:\\Users\\gonza\\finance-app\\src\\views\\indexes\\IndexesController.js":"7","C:\\Users\\gonza\\finance-app\\src\\dashboard\\Marcador.js":"8","C:\\Users\\gonza\\finance-app\\src\\dashboard\\AssetStructure.js":"9","C:\\Users\\gonza\\finance-app\\src\\views\\company\\BottomSection.js":"10","C:\\Users\\gonza\\finance-app\\src\\components\\NewsItem.js":"11","C:\\Users\\gonza\\finance-app\\src\\views\\company\\TableUI.js":"12","C:\\Users\\gonza\\finance-app\\src\\components\\Searcher2.js":"13","C:\\Users\\gonza\\finance-app\\src\\dashboard\\Sorter.js":"14","C:\\Users\\gonza\\finance-app\\src\\utils\\Pipes.js":"15","C:\\Users\\gonza\\finance-app\\src\\components\\Cell.js":"16","C:\\Users\\gonza\\finance-app\\src\\components\\TransitionComponent.js":"17","C:\\Users\\gonza\\finance-app\\src\\SignIn2.js":"18","C:\\Users\\gonza\\finance-app\\src\\views\\principal\\elements\\News.js":"19","C:\\Users\\gonza\\finance-app\\src\\AppWithRouterAccess.js":"20","C:\\Users\\gonza\\finance-app\\src\\portfolio\\portfolioGenerator.js":"21","C:\\Users\\gonza\\finance-app\\src\\utils\\useFetchWithCors.js":"22","C:\\Users\\gonza\\finance-app\\src\\views\\indexes\\BigIndex.js":"23","C:\\Users\\gonza\\finance-app\\src\\components\\Searcher4.js":"24","C:\\Users\\gonza\\finance-app\\src\\charts\\CustomAreaChart.js":"25","C:\\Users\\gonza\\finance-app\\src\\views\\company\\DetailsSquare.js":"26","C:\\Users\\gonza\\finance-app\\src\\charts\\IndexesChart.js":"27","C:\\Users\\gonza\\finance-app\\src\\views\\company\\Financials.js":"28","C:\\Users\\gonza\\finance-app\\src\\views\\company\\FinancialOptions.js":"29","C:\\Users\\gonza\\finance-app\\src\\index.js":"30","C:\\Users\\gonza\\finance-app\\src\\SignIn.js":"31","C:\\Users\\gonza\\finance-app\\src\\RegistrationForm.js":"32","C:\\Users\\gonza\\finance-app\\src\\useAuth.js":"33","C:\\Users\\gonza\\finance-app\\src\\useTemporaryPossesions.js":"34","C:\\Users\\gonza\\finance-app\\src\\components\\Sidebar.js":"35","C:\\Users\\gonza\\finance-app\\src\\charts\\StackedColumn.js":"36","C:\\Users\\gonza\\finance-app\\src\\dashboard\\Middleware2.js":"37","C:\\Users\\gonza\\finance-app\\src\\views\\company\\ControllerCompany.js":"38","C:\\Users\\gonza\\finance-app\\src\\portfolio\\PortfolioPriceChart.js":"39","C:\\Users\\gonza\\finance-app\\src\\dashboard\\Positions.js":"40","C:\\Users\\gonza\\finance-app\\src\\utils\\useFetch.js":"41","C:\\Users\\gonza\\finance-app\\src\\views\\principal\\elements\\Sectors.js":"42","C:\\Users\\gonza\\finance-app\\src\\views\\indexes\\IndexesGeneral.js":"43","C:\\Users\\gonza\\finance-app\\src\\portfolio\\portfolioGenerator2.js":"44","C:\\Users\\gonza\\finance-app\\src\\charts\\linechart.js":"45","C:\\Users\\gonza\\finance-app\\src\\components\\Overlay.js":"46","C:\\Users\\gonza\\finance-app\\src\\portfolio\\logicPruebas.js":"47","C:\\Users\\gonza\\finance-app\\src\\dashboard\\PerformanceStructureB.js":"48","C:\\Users\\gonza\\finance-app\\src\\utils\\datesUtils.js":"49","C:\\Users\\gonza\\finance-app\\src\\views\\indexes\\Nasdaq.js":"50","C:\\Users\\gonza\\finance-app\\src\\components\\components\\CustomCircularProgress.js":"51","C:\\Users\\gonza\\finance-app\\src\\views\\principal\\elements\\TickerBar2.js":"52","C:\\Users\\gonza\\finance-app\\src\\utils\\useChartReflow.js":"53","C:\\Users\\gonza\\finance-app\\src\\portfolio\\Engine.js":"54","C:\\Users\\gonza\\finance-app\\src\\views\\covid\\CovidSection2.js":"55","C:\\Users\\gonza\\finance-app\\src\\components\\Multioption.js":"56","C:\\Users\\gonza\\finance-app\\src\\dashboard\\LateralSection.js":"57","C:\\Users\\gonza\\finance-app\\src\\dashboard\\StockDispatcher.js":"58","C:\\Users\\gonza\\finance-app\\src\\portfolio\\StockShop.js":"59","C:\\Users\\gonza\\finance-app\\src\\views\\company\\PeersSquare.js":"60","C:\\Users\\gonza\\finance-app\\src\\views\\principal\\principal.js":"61","C:\\Users\\gonza\\finance-app\\src\\utils\\numFormatter.js":"62","C:\\Users\\gonza\\finance-app\\src\\views\\company\\KeyMetrics.js":"63","C:\\Users\\gonza\\finance-app\\src\\views\\indexes\\Constituents.js":"64","C:\\Users\\gonza\\finance-app\\src\\views\\company\\Rows.js":"65","C:\\Users\\gonza\\finance-app\\src\\ContextUI.js":"66","C:\\Users\\gonza\\finance-app\\src\\utils\\useViewport.js":"67","C:\\Users\\gonza\\finance-app\\src\\views\\principal\\elements\\GainersCarousel.js":"68","C:\\Users\\gonza\\finance-app\\src\\views\\company\\CompanyChart.js":"69","C:\\Users\\gonza\\finance-app\\src\\views\\company\\FinancialStatements\\IncomeStatement.js":"70","C:\\Users\\gonza\\finance-app\\src\\views\\company\\FinancialStatements\\TableUI2.js":"71","C:\\Users\\gonza\\finance-app\\src\\views\\company\\FinancialStatements\\CashFlow.js":"72","C:\\Users\\gonza\\finance-app\\src\\Context.js":"73","C:\\Users\\gonza\\finance-app\\src\\components\\components\\treeItem.js":"74","C:\\Users\\gonza\\finance-app\\src\\UserContext.js":"75","C:\\Users\\gonza\\finance-app\\src\\dashboard\\Marcador2.js":"76","C:\\Users\\gonza\\finance-app\\src\\views\\principal\\elements\\Indices.js":"77","C:\\Users\\gonza\\finance-app\\src\\utils\\useMountApproval.js":"78","C:\\Users\\gonza\\finance-app\\src\\charts\\CovidMap.js":"79","C:\\Users\\gonza\\finance-app\\src\\views\\company\\PeerCarousel.js":"80","C:\\Users\\gonza\\finance-app\\src\\views\\indexes\\SP500.js":"81","C:\\Users\\gonza\\finance-app\\src\\charts\\DonutChart.js":"82","C:\\Users\\gonza\\finance-app\\src\\dashboard\\UserMain.js":"83","C:\\Users\\gonza\\finance-app\\src\\dashboard\\PerformanceStructure.js":"84","C:\\Users\\gonza\\finance-app\\src\\views\\indexes\\ChartIndex.js":"85","C:\\Users\\gonza\\finance-app\\src\\charts\\MiniatureChartIndex.js":"86","C:\\Users\\gonza\\finance-app\\src\\views\\covid\\Sliders.js":"87","C:\\Users\\gonza\\finance-app\\src\\dashboard\\SearcherPositions.js":"88","C:\\Users\\gonza\\finance-app\\src\\SignInForm.js":"89","C:\\Users\\gonza\\finance-app\\src\\utils\\useFatch.js":"90","C:\\Users\\gonza\\finance-app\\src\\charts\\GeneralIndexDispatcher.js":"91"},{"size":6463,"mtime":1610905336637,"results":"92","hashOfConfig":"93"},{"size":6910,"mtime":1610835686145,"results":"94","hashOfConfig":"93"},{"size":5295,"mtime":1595505397461,"results":"95","hashOfConfig":"93"},{"size":3564,"mtime":1609877616942,"results":"96","hashOfConfig":"93"},{"size":4724,"mtime":1611333256765,"results":"97","hashOfConfig":"93"},{"size":2339,"mtime":1610115033421,"results":"98","hashOfConfig":"93"},{"size":628,"mtime":1605723505412,"results":"99","hashOfConfig":"93"},{"size":637,"mtime":1608646319792,"results":"100","hashOfConfig":"93"},{"size":1809,"mtime":1609520004803,"results":"101","hashOfConfig":"93"},{"size":821,"mtime":1608559552609,"results":"102","hashOfConfig":"93"},{"size":2707,"mtime":1610903187173,"results":"103","hashOfConfig":"93"},{"size":2841,"mtime":1610197491777,"results":"104","hashOfConfig":"93"},{"size":1735,"mtime":1609867251793,"results":"105","hashOfConfig":"93"},{"size":1627,"mtime":1609599133591,"results":"106","hashOfConfig":"93"},{"size":90,"mtime":1608554488394,"results":"107","hashOfConfig":"93"},{"size":363,"mtime":1610195822613,"results":"108","hashOfConfig":"93"},{"size":1989,"mtime":1607005895516,"results":"109","hashOfConfig":"93"},{"size":5522,"mtime":1610907455690,"results":"110","hashOfConfig":"93"},{"size":3784,"mtime":1610903015009,"results":"111","hashOfConfig":"93"},{"size":1214,"mtime":1608063725566,"results":"112","hashOfConfig":"93"},{"size":8889,"mtime":1608756910643,"results":"113","hashOfConfig":"93"},{"size":2778,"mtime":1606487634588,"results":"114","hashOfConfig":"93"},{"size":1317,"mtime":1605805839078,"results":"115","hashOfConfig":"93"},{"size":7570,"mtime":1610902510402,"results":"116","hashOfConfig":"93"},{"size":3947,"mtime":1610830287030,"results":"117","hashOfConfig":"93"},{"size":2164,"mtime":1605640036088,"results":"118","hashOfConfig":"93"},{"size":4147,"mtime":1605804791338,"results":"119","hashOfConfig":"93"},{"size":3601,"mtime":1610472464262,"results":"120","hashOfConfig":"93"},{"size":3154,"mtime":1610389738949,"results":"121","hashOfConfig":"93"},{"size":1040,"mtime":1608322106668,"results":"122","hashOfConfig":"93"},{"size":455,"mtime":1608059587651,"results":"123","hashOfConfig":"93"},{"size":3797,"mtime":1608333306481,"results":"124","hashOfConfig":"93"},{"size":664,"mtime":1608381337718,"results":"125","hashOfConfig":"93"},{"size":1562,"mtime":1608225605796,"results":"126","hashOfConfig":"93"},{"size":7729,"mtime":1610833114196,"results":"127","hashOfConfig":"93"},{"size":4047,"mtime":1610105316100,"results":"128","hashOfConfig":"93"},{"size":2181,"mtime":1609520112517,"results":"129","hashOfConfig":"93"},{"size":1562,"mtime":1610108918469,"results":"130","hashOfConfig":"93"},{"size":3229,"mtime":1609609828436,"results":"131","hashOfConfig":"93"},{"size":8047,"mtime":1609600130004,"results":"132","hashOfConfig":"93"},{"size":2305,"mtime":1606484616583,"results":"133","hashOfConfig":"93"},{"size":913,"mtime":1608298615713,"results":"134","hashOfConfig":"93"},{"size":4807,"mtime":1607003068471,"results":"135","hashOfConfig":"93"},{"size":10867,"mtime":1609366098034,"results":"136","hashOfConfig":"93"},{"size":2531,"mtime":1606594527518,"results":"137","hashOfConfig":"93"},{"size":987,"mtime":1610830507450,"results":"138","hashOfConfig":"93"},{"size":20620,"mtime":1608756866047,"results":"139","hashOfConfig":"93"},{"size":3769,"mtime":1609520004793,"results":"140","hashOfConfig":"93"},{"size":1460,"mtime":1609266928969,"results":"141","hashOfConfig":"93"},{"size":156,"mtime":1605711412858,"results":"142","hashOfConfig":"93"},{"size":1618,"mtime":1610291129685,"results":"143","hashOfConfig":"93"},{"size":1573,"mtime":1610029179719,"results":"144","hashOfConfig":"93"},{"size":582,"mtime":1607016487231,"results":"145","hashOfConfig":"93"},{"size":7800,"mtime":1611571586432,"results":"146","hashOfConfig":"93"},{"size":6203,"mtime":1611078525493,"results":"147","hashOfConfig":"93"},{"size":3436,"mtime":1605208003831,"results":"148","hashOfConfig":"93"},{"size":308,"mtime":1608661645022,"results":"149","hashOfConfig":"93"},{"size":2551,"mtime":1607890229872,"results":"150","hashOfConfig":"93"},{"size":5931,"mtime":1611569626784,"results":"151","hashOfConfig":"93"},{"size":3456,"mtime":1605707127753,"results":"152","hashOfConfig":"93"},{"size":1943,"mtime":1610808659123,"results":"153","hashOfConfig":"93"},{"size":462,"mtime":1609432515779,"results":"154","hashOfConfig":"93"},{"size":2334,"mtime":1608561129906,"results":"155","hashOfConfig":"93"},{"size":4156,"mtime":1605891857388,"results":"156","hashOfConfig":"93"},{"size":7221,"mtime":1610571434742,"results":"157","hashOfConfig":"93"},{"size":1218,"mtime":1610109061855,"results":"158","hashOfConfig":"93"},{"size":463,"mtime":1606078800550,"results":"159","hashOfConfig":"93"},{"size":1986,"mtime":1611077821043,"results":"160","hashOfConfig":"93"},{"size":5559,"mtime":1609434787599,"results":"161","hashOfConfig":"93"},{"size":11693,"mtime":1610570701731,"results":"162","hashOfConfig":"93"},{"size":9512,"mtime":1610571976615,"results":"163","hashOfConfig":"93"},{"size":6428,"mtime":1610570742567,"results":"164","hashOfConfig":"93"},{"size":11322,"mtime":1611530974339,"results":"165","hashOfConfig":"93"},{"size":3729,"mtime":1605538518198,"results":"166","hashOfConfig":"93"},{"size":928,"mtime":1608381337718,"results":"167","hashOfConfig":"93"},{"size":684,"mtime":1608646651594,"results":"168","hashOfConfig":"93"},{"size":830,"mtime":1605811574797,"results":"169","hashOfConfig":"93"},{"size":250,"mtime":1610108918469,"results":"170","hashOfConfig":"93"},{"size":3486,"mtime":1611080662033,"results":"171","hashOfConfig":"93"},{"size":656,"mtime":1605708915429,"results":"172","hashOfConfig":"93"},{"size":154,"mtime":1605711412858,"results":"173","hashOfConfig":"93"},{"size":1234,"mtime":1609248574030,"results":"174","hashOfConfig":"93"},{"size":2255,"mtime":1608643927125,"results":"175","hashOfConfig":"93"},{"size":6341,"mtime":1609592560481,"results":"176","hashOfConfig":"93"},{"size":897,"mtime":1605786156851,"results":"177","hashOfConfig":"93"},{"size":2696,"mtime":1610829944153,"results":"178","hashOfConfig":"93"},{"size":6094,"mtime":1610832840362,"results":"179","hashOfConfig":"93"},{"size":270,"mtime":1609515992314,"results":"180","hashOfConfig":"93"},{"size":1868,"mtime":1608404101490,"results":"181","hashOfConfig":"93"},{"size":2424,"mtime":1605785592357,"results":"182","hashOfConfig":"93"},{"size":1235,"mtime":1607005895515,"results":"183","hashOfConfig":"93"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"tz5z4e",{"filePath":"186","messages":"187","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"193"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"196","messages":"197","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"199"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"203"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"209"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"193"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"203"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"193"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"203"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"193"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"242"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"203"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"248","messages":"249","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"219"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"219"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"242"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"262","messages":"263","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"228"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"268"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"268"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"268"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"268"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"242"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"203"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"203"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"203"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"291"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"268"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"228"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"268"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"308"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"193"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"314","messages":"315","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"242"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"268"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"330","messages":"331","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"332","messages":"333","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"334","messages":"335","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"199"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"209"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"344","messages":"345","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346","usedDeprecatedRules":"219"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"351","messages":"352","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"209"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356","usedDeprecatedRules":"199"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"219"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362","usedDeprecatedRules":"219"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365","usedDeprecatedRules":"209"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"368","messages":"369","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370","usedDeprecatedRules":"193"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"373","messages":"374","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"375","usedDeprecatedRules":"219"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"203"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"381","messages":"382","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"203"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"390","usedDeprecatedRules":"193"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"393","usedDeprecatedRules":"219"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"396","messages":"397","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"402","messages":"403","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"404","messages":"405","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"410","messages":"411","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"416","messages":"417","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"418","messages":"419","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\gonza\\finance-app\\src\\components\\Navbar.js",["420","421"],"C:\\Users\\gonza\\finance-app\\src\\App.js",["422","423","424","425","426","427","428","429","430","431","432","433","434"],"C:\\Users\\gonza\\finance-app\\src\\serviceWorker.ts",[],"C:\\Users\\gonza\\finance-app\\src\\components\\Searcher.js",["435","436","437","438","439","440"],"import { Button, Chip, TextField } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { useDataLayer } from \"../Context\";\r\n\r\n\r\nexport const Searcher = ({ setSelection }) => {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [{ data, loading, error }, setRequest] = useState({\r\n    data: [],\r\n    loading: false,\r\n    error: \"\",\r\n  });\r\n\r\n  const { state, dispatch } = useDataLayer()\r\n  const fetchar = async (query) => {\r\n    try {\r\n      setRequest((prev) => ({ ...prev, loading: true }));\r\n      const rawData = await fetch(`http://localhost:8001/search/${query}`);\r\n      const { data } = await rawData.json();\r\n      const dataOnlyStocks = data.filter(item => item.assetType === \"Stock\")\r\n      setRequest((prev) => ({ ...prev, data: dataOnlyStocks, loading: false }));\r\n    } catch (err) {\r\n      setRequest((prev) => ({\r\n        ...prev,\r\n        loading: false,\r\n        error: err.message,\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleSearch = () => {\r\n    if (query) {\r\n      fetchar(query);\r\n    }\r\n  };\r\n\r\n  const handleAutocomplete = (e) => {\r\n    console.log(e.key, \"va o que\");\r\n    // if (query && e.key === \" \")\r\n    if (query) fetchar(query.slice(0, query.length - 1));\r\n  };\r\n\r\n  const handleSelection = (value, reason) => {\r\n    if (reason === \"select-option\") {\r\n      console.log(value, \"valueeee\")\r\n      setSelection(value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"search-section\">\r\n        {loading && <p>cargando...</p>}\r\n        {data && data.map((item) => <p>{item.name}</p>)}\r\n        {error && <p>{error}</p>}\r\n        {/* <Chip\r\n        size=\"medium\"\r\n        label={<h3>Search for company</h3>}\r\n    style={{marginBottom: \"0.5rem\"}}\r\n      /> */}\r\n      <h2>Search company data</h2>\r\n        <Autocomplete\r\n          id=\"asynchronous-demo\"\r\n          style={{ width: 300 }}\r\n          open={open}\r\n          onOpen={() => {\r\n            setOpen(true);\r\n          }}\r\n          onClose={() => {\r\n            setOpen(false);\r\n          }}\r\n          noOptionsText\r\n          // getOptionSelected={(option, value) => {\r\n          //   console.log(value.name, option.name, \"hooolabeeeeeeee\");\r\n          //   return (value.name = option.name);\r\n          // }}\r\n          getOptionLabel={(option) => option.name}\r\n          options={data}\r\n          loading={loading}\r\n          filterOptions={(options) => query && options}\r\n          onChange={(e, value, reason) => {\r\n            handleSelection(value, reason);\r\n          }}\r\n          renderInput={(params) => (\r\n            <TextField\r\n              {...params}\r\n              label=\"by ticker, by name..\"\r\n              variant=\"outlined\"\r\n              onKeyUp={handleAutocomplete}\r\n              onChange={(e) => {\r\n                setQuery(e.target.value);\r\n              }}\r\n              value={query}\r\n              InputProps={{\r\n                ...params.InputProps,\r\n                endAdornment: (\r\n                  <React.Fragment>\r\n                    {loading ? (\r\n                      <CircularProgress color=\"inherit\" size={20} />\r\n                    ) : null}\r\n                    {params.InputProps.endAdornment}\r\n                  </React.Fragment>\r\n                ),\r\n              }}\r\n            />\r\n          )}\r\n        />\r\n      </div>\r\n      {/* {selection && JSON.stringify(selection, null, 2)} */}\r\n\r\n    </>\r\n  );\r\n};\r\n",["441","442"],"C:\\Users\\gonza\\finance-app\\src\\charts\\KeymetricsChart.js",["443"],"C:\\Users\\gonza\\finance-app\\src\\views\\company\\CompanySection.js",["444","445","446"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useParams, useLocation } from \"react-router-dom\";\r\nimport { BottomSection } from \"./BottomSection\";\r\nimport { Paper } from \"@material-ui/core\";\r\nimport { KeyMetrics } from \"./KeyMetrics\";\r\nimport { CompanyChart } from \"./CompanyChart\";\r\nimport { useDataLayer } from \"../../Context\";\r\nimport { StockShop } from \"../../portfolio/StockShop\";\r\n\r\n\r\nexport const CompanySection = React.forwardRef((props, ref) => {\r\n\r\n  const { state, dispatch } = useDataLayer()\r\n  const { ticker } = state.currentCompany\r\n  const [clasi, setClasi] = useState(false)\r\n  const [tickar, setTicker] = useState(ticker)\r\n  const params = useParams()\r\n  const location = useLocation()\r\n  const keyMetricsRef = useRef(null)\r\n  const [listHeight, setListHeight] = useState(0)\r\n  useEffect(() => {\r\n    if (!tickar) {\r\n      console.log(params, \"los params\", location, \"location\")\r\n      const { company } = params\r\n      setTicker(company.toUpperCase())\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    //polifill if the user browse directly without search\r\n    if (tickar && !ticker) {\r\n      dispatch({ type: \"SET_COMPANY\", payload: { ticker: tickar } })\r\n    }\r\n  }, [tickar])\r\n  useEffect(() => {\r\n    if (keyMetricsRef.current) {\r\n      console.log(keyMetricsRef.current.offsetHeight, \"hhhhhight\")\r\n    }\r\n  }, [keyMetricsRef.current])\r\n\r\n\r\n  return (\r\n    <>\r\n      {tickar &&\r\n        <>\r\n\r\n\r\n\r\n          <div className=\"grida\" style={{ width: \"100%\" }}>\r\n            <Paper\r\n              className=\"chart\"\r\n            >\r\n              <CompanyChart ref={ref} ticker={tickar} />\r\n            </Paper>\r\n            <Paper\r\n              className=\"stock-shop\">\r\n              <StockShop ticker={tickar} />\r\n            </Paper>\r\n            <Paper\r\n              className={clasi ? \"general overflown\" : \"general\"}\r\n              style={clasi ? { height: `${listHeight + 30}px` } : {height: \"100%\"}}\r\n              ref={keyMetricsRef}\r\n            >\r\n              <button onClick={() => { setClasi(prev => !prev) }}>change view</button>\r\n              <KeyMetrics\r\n                setListHeight={setListHeight}\r\n                ticker={tickar}\r\n              />\r\n            </Paper>\r\n            <BottomSection ticker={tickar} />\r\n          </div>\r\n        </>\r\n      }\r\n    </>\r\n  );\r\n});\r\n\r\n",["447","448"],"C:\\Users\\gonza\\finance-app\\src\\views\\indexes\\IndexesController.js",["449","450"],"import React from 'react'\r\nimport { useParams } from \"react-router-dom\"\r\nimport { BigIndex } from './BigIndex'\r\nimport { IndexesGeneral } from './IndexesGeneral'\r\nimport { Nasdaq } from './Nasdaq'\r\nimport { SP500 } from './SP500'\r\n\r\n//queda pendiente poner el registro completo con csv \r\nexport const IndexesController = () => {\r\n    const { field } = useParams()\r\n    const bigIndexes = [\"sp500\", \"nasdaq\", \"dowjones\"]\r\n    console.log(field, \"campu\")\r\n    return (\r\n        <>\r\n            {bigIndexes.includes(field) ?\r\n                <BigIndex index={field}/>\r\n                : <IndexesGeneral />}\r\n        </>\r\n    )\r\n}\r\n",["451","452"],"C:\\Users\\gonza\\finance-app\\src\\dashboard\\Marcador.js",[],"C:\\Users\\gonza\\finance-app\\src\\dashboard\\AssetStructure.js",["453"],"import { Paper } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { DonutChart } from '../charts/DonutChart'\r\nimport { useDataLayer } from '../Context'\r\n\r\nexport const AssetStructure = () => {\r\n    const { state } = useDataLayer()\r\n    const { stocks } = state.currentPossesions\r\n    const [readyData, setReadyData] = useState(\"\")\r\n    const getMarketValueByStock = () => {\r\n        let arrByCompany = []\r\n        let totalMarketVal = 0\r\n        console.log(stocks, \"staaacks\")\r\n        stocks.forEach(poss => {\r\n            console.log(state.portfolioHistoryByCompany)\r\n            const stockHistory = state.portfolioHistoryByCompany[poss.ticker]\r\n            console.log(stockHistory, \"hastory\")\r\n            const lastRegister = stockHistory[stockHistory.length - 1]\r\n            const lastRegisterClosePrice = lastRegister[2]\r\n            const marketVal = lastRegisterClosePrice * poss.amount\r\n            totalMarketVal += marketVal\r\n            arrByCompany = [...arrByCompany,\r\n            {\r\n                ticker: poss.ticker,\r\n                marketVal\r\n            }]\r\n        })\r\n        return arrByCompany.map(item => {\r\n            item[\"proportion\"] = (item.marketVal / totalMarketVal) * 100\r\n            return item\r\n        })\r\n    }\r\n    const prepareData =(data, cb)=>{\r\n        cb(data.map(item=>[item.ticker, item.proportion]))\r\n    }\r\n    useEffect(() => {\r\n        if (stocks.length > 0 && state.areHistoricPricesReady) {\r\n            const data = getMarketValueByStock()\r\n            prepareData(data, (result)=>{\r\n                setReadyData(result)\r\n            })\r\n        }\r\n    }, [stocks, state.areHistoricPricesReady])\r\n    return (\r\n        <Paper>\r\n       { readyData.length && <DonutChart data={readyData}/>}\r\n    </Paper>\r\n    )\r\n}\r\n",["454","455"],"C:\\Users\\gonza\\finance-app\\src\\views\\company\\BottomSection.js",["456","457","458","459","460","461","462","463","464","465"],"import {\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Paper,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { Linechart } from \"../../charts/linechart\";\r\nimport { StackedColumn } from \"../../charts/StackedColumn\";\r\nimport { useDataLayer } from \"../../Context\";\r\nimport { DetailsSquare } from \"./DetailsSquare\";\r\nimport { PeersSquare } from \"./PeersSquare\";\r\n\r\nexport const BottomSection = ({ ticker }) => {\r\n\r\n\r\n  return (\r\n    <>\r\n      <>\r\n        <Paper\r\n          className=\"detail1\"\r\n        >\r\n          <StackedColumn\r\n          ticker={ticker}\r\n          />\r\n        </Paper>\r\n        <div\r\n          className=\"detail3\"\r\n        >\r\n          <PeersSquare\r\n            ticker={ticker}\r\n          />\r\n        </div>\r\n      </>\r\n\r\n\r\n    </>\r\n  );\r\n};\r\n","C:\\Users\\gonza\\finance-app\\src\\components\\NewsItem.js",[],"C:\\Users\\gonza\\finance-app\\src\\views\\company\\TableUI.js",["466"],"C:\\Users\\gonza\\finance-app\\src\\components\\Searcher2.js",[],["467","468"],"C:\\Users\\gonza\\finance-app\\src\\dashboard\\Sorter.js",["469","470","471"],"import { Button, Menu, MenuItem, withStyles } from '@material-ui/core';\r\nimport React, {useState, useEffect, useRef} from 'react'\r\n\r\nexport const Sorter = ({ openSorter, setOpenSorter, handleSorting, handleSelected, selected}) => {\r\n\r\n  const firstRender = useRef(true)\r\n  useEffect(()=>{\r\n    if(selected && !firstRender.current){\r\n      handleSorting(selected)\r\n    }\r\n    firstRender.current = false\r\n  },[selected])\r\n\r\n  const StyledMenuItem = withStyles({\r\n    root: {\r\n      '&:hover': {\r\n        backgroundColor: 'transparent',\r\n      },\r\n    },\r\n  })(MenuItem);\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Menu\r\n        id=\"simple-menu\"\r\n        anchorEl={openSorter}\r\n        keepMounted\r\n        open={Boolean(openSorter)}\r\n        onClose={() => { setOpenSorter(null) }}\r\n        disableScrollLock={true}\r\n        anchorOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'right',\r\n        }}\r\n        transformOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'right',\r\n        }}\r\n      >\r\n        <StyledMenuItem>Sort By:</StyledMenuItem>\r\n        <MenuItem onClick={() => { handleSelected(\"alphabetical\") }}\r\n        className={selected === \"alphabetical\" ? \"menu-item--selected\": null}\r\n        >Alphabetical</MenuItem>\r\n        <MenuItem onClick={() => { handleSelected(\"Relevance\") }}\r\n        className={selected === \"Relevance\" ? \"menu-item--selected\": null}\r\n        >Relevance</MenuItem>\r\n        <MenuItem onClick={() => { handleSelected(\"change\") }}\r\n        className={selected === \"change\" ? \"menu-item--selected\": null}\r\n        >Change %</MenuItem>\r\n      </Menu>\r\n    </div>\r\n  );\r\n}\r\n\r\n","C:\\Users\\gonza\\finance-app\\src\\utils\\Pipes.js",[],["472","473"],"C:\\Users\\gonza\\finance-app\\src\\components\\Cell.js",[],["474","475"],"C:\\Users\\gonza\\finance-app\\src\\components\\TransitionComponent.js",["476","477","478","479","480"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    position: 'relative',\r\n  },\r\n  title: {\r\n    marginLeft: theme.spacing(2),\r\n    flex: 1,\r\n  },\r\n}));\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport function TransitionComponent({children, open, setOpenChartModal}) {\r\n  const classes = useStyles();\r\n  //const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n      return\r\n    //setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n      return\r\n    //setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\r\n        <AppBar className={classes.appBar}>\r\n          <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" onClick={()=>{setOpenChartModal(false)}} aria-label=\"close\">\r\n              <CloseIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              Sound\r\n            </Typography>\r\n            <Button autoFocus color=\"inherit\" onClick={handleClose}>\r\n              save\r\n            </Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n        {children}\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","C:\\Users\\gonza\\finance-app\\src\\SignIn2.js",["481","482","483"],"import React, { useContext, useRef, useState } from 'react'\r\nimport { Context } from \"./Context\"\r\nimport { Formik, useField, Form } from \"formik\"\r\nimport { TextField, Button, Paper, makeStyles } from \"@material-ui/core\"\r\nimport * as yup from 'yup';\r\nimport { OktaAuth } from '@okta/okta-auth-js';\r\nimport { useOktaAuth } from '@okta/okta-react';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: \"100%\",\r\n        marginBottom: \"1.5rem\"\r\n    }\r\n})\r\nexport default function Formm({ issuer }) {\r\n    const { authService } = useOktaAuth();\r\n    const [sessionToken, setSessionToken] = useState();\r\n    const userData = useRef(\"\")\r\n    const classes = useStyles()\r\n    const CustomTextField = ({ label, ...props }) => {\r\n\r\n        const [field, meta] = useField(props)\r\n        const errorText = meta.error && meta.touched ? meta.error : \"\";\r\n        return (<TextField\r\n            label={label}\r\n            {...field}\r\n            {...props}\r\n            helperText={errorText}\r\n            error={!!errorText}\r\n            variant=\"outlined\"\r\n            classes={{ root: classes.root }}\r\n            autoComplete=\"off\"\r\n\r\n        />)\r\n    }\r\n\r\n    const validationSchema = yup.object({\r\n        username: yup\r\n            .string()\r\n            .required()\r\n            .max(100),\r\n        email: yup\r\n            .string()\r\n            .email()\r\n            .required()\r\n            .max(100),\r\n        apellido: yup\r\n            .string()\r\n            .required()\r\n            .max(100),\r\n        password: yup\r\n            .string()\r\n            .required()\r\n            .max(10000),\r\n    });\r\n\r\n    console.log(validationSchema, \"validacion\")\r\n    const handleSubmit = (values) => {\r\n        const { email, password } = values\r\n\r\n        const oktaAuth = new OktaAuth({\r\n            // If your app is configured to use the Implicit Flow\r\n            // instead of the Authorization Code with Proof of Code Key Exchange (PKCE)\r\n            // you will need to uncomment the below line:\r\n            // pkce: false,\r\n            issuer: issuer\r\n        });\r\n        oktaAuth.signIn({ username: email, password })\r\n            .then(res => {\r\n                const sessionToken = res.sessionToken;\r\n                setSessionToken(sessionToken);\r\n                // sessionToken is a one-use token, so make sure this is only called once\r\n                authService.redirect({ sessionToken });\r\n            })\r\n            .catch(err => console.log('Found an error', err));\r\n    };\r\n\r\n    const handleSubmita = (e) => {\r\n        console.log(e.value, \"suuumitao\")\r\n    }\r\n    console.log(userData.current, \"userData\")\r\n\r\n\r\n\r\n    if (sessionToken) {\r\n        // Hide form while sessionToken is converted into id/access tokens\r\n        return null;\r\n    }\r\n\r\n\r\n    return (\r\n        <div >\r\n\r\n            <Formik initialValues={{\r\n                username: \"\",\r\n                email: \"\",\r\n                password: \"\"\r\n            }}\r\n\r\n                validationSchema={validationSchema}\r\n                validateOnChange={true}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    console.log(\"trolaos maricon\")\r\n                    setTimeout(() => {\r\n                        handleSubmit(values)\r\n                        setSubmitting(false);\r\n                    }, 400);\r\n                }}\r\n            >\r\n\r\n                {(({ values, handleChange, handleBlur, handleSubmit, errors }) => {\r\n                    return (\r\n                        <Paper\r\n                            elevation={3}\r\n                            className=\"form-wrap\"\r\n                        >\r\n                            <h1 className=\"header-form\">Contact Me!</h1>\r\n                            <Form\r\n                                style={{ textAlign: \"left\", padding: \"1.5rem\" }}\r\n                            >\r\n                                <input type=\"hidden\" name=\"form-name\" value=\"form1\" />\r\n                                <div className=\"wrap-input\">\r\n                                    <CustomTextField\r\n                                        required\r\n                                        name=\"username\"\r\n                                        label=\"username\"\r\n                                    />\r\n                                </div>\r\n                                <div className=\"wrap-input\">\r\n                                    <CustomTextField\r\n                                        required\r\n                                        name=\"email\"\r\n                                        label=\"email\"\r\n                                    />\r\n                                </div>\r\n                                <div className=\"wrap-input\">\r\n                                    <CustomTextField\r\n                                        required\r\n                                        name=\"password\"\r\n                                        label=\"password\"\r\n                                    />\r\n                                </div>\r\n                                <Button type=\"submit\"\r\n                                    color=\"primary\"\r\n                                    size=\"large\"\r\n                                    variant=\"contained\"\r\n                                    disabled={Object.keys(errors).length > 0}\r\n                                >Submit</Button>\r\n                            </Form>\r\n                        </Paper>\r\n                    )\r\n                })}\r\n            </Formik>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\views\\principal\\elements\\News.js",["484","485","486","487","488","489","490"],"C:\\Users\\gonza\\finance-app\\src\\AppWithRouterAccess.js",[],"C:\\Users\\gonza\\finance-app\\src\\portfolio\\portfolioGenerator.js",["491","492","493"],"import React, { useEffect, useRef, useState } from 'react'\r\nimport { useDataLayer } from '../Context'\r\nimport { convertUnixToHuman } from '../utils/datesUtils'\r\n\r\nexport const usePortfolioGenerator = () => {\r\n\r\n    const { state, dispatch } = useDataLayer()\r\n    const userRefreshed = useRef(true)\r\n    const [rendi, setRendi] = useState()\r\n    const validDates = useRef([])\r\n    //option 1 : save masterSerie as a object\r\n    //option 2 : save masterSerie as a array\r\n\r\n    //generated series has dates that portfolioHistory dont have (weekends stock market is close)\r\n\r\n    //we need to update today's income, so we could remove last value and added it again with the correct info\r\n    //this is step2z\r\n    const milisencondsInADay = 24 * 60 * 60 * 1000\r\n    // const getLastGeneralDate = (date) => {\r\n    //     let duta = convertHumanToUnix(date);\r\n    //     while (true) {\r\n    //         duta -= milisencondsInADay\r\n    //         const dota = convertUnixToHuman(duta)\r\n    //         if (state.portfolioHistory[dota]) {\r\n    //             return dota\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    const getLastValidPrice = (ticker)=>{\r\n        let fecha\r\n        let register\r\n        for (let date of Object.keys(state.portfolioHistory).reverse()){\r\n            if (state.portfolioHistory[date][ticker]){\r\n                fecha = date\r\n                register = state.portfolioHistory[date][ticker]\r\n                break\r\n            }\r\n        }\r\n        return {fecha, register}\r\n    }\r\n\r\n    const updateSerie = (cb) => {\r\n        var lastDaySerieStep2;\r\n        let change, incomeDiff, liquidativeValue, dayBefore;\r\n        let lastIncome = 0\r\n        const seriesStep2 = state.portfolioSeries\r\n        // const today = Object.keys(seriesStep2)[Object.keys(seriesStep2).length - 1]\r\n        const today = convertUnixToHuman(Date.now())\r\n        console.log(today)\r\n        const currentSerieStep1 = state.generatedSeries.dates[today]\r\n        //const generatedSerieOfToday = state.generatedSeries\r\n        console.log(today, \"todaaaay\")\r\n        console.log(state.portfolioHistory, \"portfoliohistory\")\r\n        console.log(state.portfolioHistoryByCompany, \"portfoliohistoryByCompany\")\r\n        let portfolioCost = 0;\r\n        let portfolioValue = 0;\r\n        currentSerieStep1.positions.forEach(asset => {\r\n            portfolioCost += asset.amount * asset.unitaryCost\r\n            console.log(asset.ticker, \"ticko\")\r\n            const {register} = getLastValidPrice(asset.ticker)\r\n            const positionVal = register.close * asset.amount\r\n            portfolioValue += positionVal\r\n        })\r\n        if(validDates.current.length > 1){\r\n            dayBefore = validDates.current[validDates.current.length - 2]\r\n            lastDaySerieStep2 = state.portfolioSeries[dayBefore]\r\n            console.log(lastDaySerieStep2, dayBefore, \"tuntu\")\r\n            lastIncome = lastDaySerieStep2.accruedYield\r\n            incomeDiff = state.generatedSeries.dates[today].income - state.generatedSeries.dates[dayBefore].income\r\n        }else{\r\n            incomeDiff = state.generatedSeries.dates[today].income\r\n        }\r\n        console.log(lastDaySerieStep2, \"lolu\")\r\n        console.log(validDates.length)\r\n        const accruedIncome = validDates.current.length <= 1 ?\r\n         incomeDiff : incomeDiff + lastDaySerieStep2[\"accruedIncome\"] \r\n        const accruedYield = (portfolioValue + accruedIncome) / portfolioCost\r\n        if (validDates.current.length <= 1) { //handle first day\r\n            liquidativeValue = 1000\r\n            change = 0\r\n        }\r\n        else {\r\n            // no podemos hacer esto ya uqe estamos repercutiendo el coste a la rentsabilidad real.\r\n            //deberiamos calcular la rentabilidad a partir del change diario de las acciones del portfolioHistory, y multiplicar ese porcentaje por su peso relativo en cartera\r\n            change = (accruedYield - lastIncome) / lastIncome\r\n            liquidativeValue = lastDaySerieStep2.liquidativeValue * (1 + change)\r\n        }\r\n        // state.generatedSeries.dates[validDates[validDates.length - 1]].income\r\n\r\n\r\n        const seriesStep2Copy = { ...seriesStep2 }\r\n        seriesStep2Copy[today] = {\r\n            portfolioCost,\r\n            portfolioValue,\r\n            change,\r\n            accruedYield,\r\n            liquidativeValue,\r\n            accruedIncome,\r\n            incomeDiff\r\n        }\r\n        console.log(\"execuuuted\")\r\n        cb(seriesStep2Copy)\r\n    }\r\n\r\n\r\n    const generateSerie = (cb) => {\r\n        let masterSerie = {}\r\n        let liquidativeInitial = 1000\r\n        let accruedIncome = 0\r\n        let change, lastDate, lastIncome;\r\n        let wtf = []\r\n        console.log(state.generatedSeries, \"que puta pasaaa\")\r\n        const dateKeys = Object.keys(state.generatedSeries.dates)\r\n        dateKeys.forEach((date, index) => {\r\n            console.log(date, \"datuuus\")\r\n            if (state.portfolioHistory[date] !== undefined) {\r\n                let portfolioCost = 0\r\n                state.generatedSeries.dates[date].positions.forEach(asset => {\r\n                    portfolioCost += asset.amount * asset.unitaryCost\r\n                })\r\n\r\n                let portfolioValue = 0\r\n                state.generatedSeries.dates[date].positions.forEach(asset => {\r\n                    //console.log(asset.ticker, \"tika\")\r\n                    // console.log(date, asset.ticker, \"akuuu\")\r\n                    const stockClosePrice = state.portfolioHistory[date][asset.ticker.toUpperCase()].close\r\n                    const positionVal = stockClosePrice * asset.amount\r\n                    portfolioValue += positionVal\r\n                })                                            //poner lastPorfolioVal  \r\n                let incomeDiff\r\n\r\n                if (index === 0) {\r\n                    incomeDiff = state.generatedSeries.dates[date].income\r\n                } else {\r\n                    incomeDiff = state.generatedSeries.dates[date].income -\r\n                        state.generatedSeries.dates[validDates.current[validDates.current.length - 1]].income\r\n                }\r\n                accruedIncome += incomeDiff\r\n\r\n                const accruedYield = (portfolioValue + accruedIncome) / portfolioCost\r\n                if (index === 0) {\r\n                    change = 0\r\n                } else {\r\n                    lastDate = validDates.current[validDates.current.length - 1]\r\n                    lastIncome = masterSerie[lastDate].accruedYield\r\n                    change = (accruedYield - lastIncome) / lastIncome\r\n                    wtf = [...wtf, change]\r\n                }\r\n                console.log(lastIncome)\r\n                const liquidativeValue = liquidativeInitial * (1 + change)\r\n                liquidativeInitial = liquidativeValue\r\n                masterSerie = {\r\n                    ...masterSerie,\r\n                    [date]: {\r\n                        portfolioCost,\r\n                        portfolioValue,\r\n                        change,\r\n                        accruedYield,\r\n                        liquidativeValue,\r\n                        incomeDiff,\r\n                        accruedIncome\r\n                    }\r\n                }\r\n                //we should store this array in the context to acces easily in the updateSeries\r\n                validDates.current = [...validDates.current, date]\r\n            }\r\n            // else{\r\n            //     //quando falta fecha general, obviamente ningun otro ticker tendrá datos, ya que significa que es fin de semana \r\n            //     let lastValidDate = getLastGeneralDate(date)\r\n            //     if(state.portfolioHistory[lastValidDate]){\r\n            //         const lastStockPrice = getLastValidPrice(ticker)\r\n            //     }\r\n            // }\r\n        })\r\n        console.log(wtf)\r\n        setRendi(masterSerie)\r\n\r\n        cb(masterSerie)\r\n    }\r\n\r\n    console.log(rendi, \"rendiiiiii\")\r\n    console.log(state.generatedSeries, \"muuu\")\r\n\r\n    useEffect(() => {\r\n        console.log(state.areHistoricPricesReady, state.areGeneratedSeriesReady, \"que cohone\")\r\n        if (userRefreshed.current && state.areHistoricPricesReady && state.areGeneratedSeriesReady) {\r\n            generateSerie((result) => {\r\n                dispatch({ type: \"STORE_GENERATED_READY_SERIES\", payload: result })\r\n            })\r\n            userRefreshed.current = false\r\n        } else if (!userRefreshed.current && state.areHistoricPricesReady && state.areGeneratedSeriesReady) {\r\n            updateSerie((result) => {\r\n                dispatch({ type: \"STORE_GENERATED_READY_SERIES\", payload: result })\r\n            })\r\n        }\r\n        // if (state.areHistoricPricesReady && Object.keys(state.generatedSeries).length > 0) {\r\n        //     generateSerie()\r\n        // }\r\n    }, [state.generatedSeries, state.areHistoricPricesReady, state.areGeneratedSeriesReady])\r\n\r\n}",["494","495"],"C:\\Users\\gonza\\finance-app\\src\\utils\\useFetchWithCors.js",["496","497"],"import React, { useEffect, useState } from 'react'\r\nimport { useDataLayer } from '../Context'\r\n\r\n//esto es para fechar data general, (no por ticker)\r\n//tenemos ue renombrarlo a fetchGeneralData\r\nexport const useFetchWithCors = (url, topic, fromOwnServer = false) => {\r\n\r\n    const { state, dispatch } = useDataLayer()\r\n    const [{ data, loading, error }, setRequest] = useState({ data: [], loading: false, error: \"\" })\r\n\r\n    useEffect(() => {\r\n        const fetcharb = async (dir) => {\r\n            // const isInStore = isInLocalStorage(topic)\r\n            const isInStore = isInState(topic)\r\n            console.log(isInLocalStorage(topic), topic, \"esta o no\")\r\n            if (!isInStore) {\r\n                try {\r\n                    setRequest(prev => ({\r\n                        ...prev,\r\n                        loading: true\r\n                    }))\r\n                    console.log(dir, \"fetch start\")\r\n                    const rawdata = await fetch(dir)\r\n                    const data = await rawdata.json()\r\n                    console.log(data, \"fooooooooo\")\r\n                    console.log(dir, \"fetch finished\")\r\n                    setRequest(prev => ({\r\n                        ...prev,\r\n                        loading: false,\r\n                        data: fromOwnServer? data.data : data\r\n                    }))\r\n                    console.log(fromOwnServer, \"sevidor propi\")\r\n                    dispatch({ type: \"STORE_GENERAL_DATA\", payload: { field: topic, value: fromOwnServer? data.data : data } })\r\n                }\r\n                catch (err) {\r\n                    setRequest(prev => ({\r\n                        ...prev,\r\n                        loading: false,\r\n                        error: err.message\r\n                    }))\r\n                }\r\n            }\r\n        }\r\n        if (url) {\r\n            fetcharb(url)\r\n        }\r\n    }, [])\r\n\r\n    const isInState =(field)=>{\r\n        //here field will be inside generalData\r\n        if(state.generalData[field]){\r\n            setRequest(prev=>({\r\n                ...prev, \r\n                loading: false,\r\n                data: state.generalData[field]\r\n            }))\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n\r\n    const isInLocalStorage = (item) => {\r\n        //check if we have this data already in localStorage\r\n        if (localStorage.getItem(item)) {\r\n            setRequest(prev => ({\r\n                ...prev,\r\n                loading: false,\r\n                data: JSON.parse(localStorage.getItem(item))\r\n            }))\r\n            //we won't make additional request\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    return { data, loading, error }\r\n}\r\n\r\n//posible topics:{\r\n// sectors\r\n// index-overview\r\n// gainers\r\n//}","C:\\Users\\gonza\\finance-app\\src\\views\\indexes\\BigIndex.js",["498","499"],"C:\\Users\\gonza\\finance-app\\src\\components\\Searcher4.js",["500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519","520"],"import { Button, Chip, Divider, List, ListItem, ListItemText, TextField } from \"@material-ui/core\";\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\n\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { useDataLayer } from \"../Context\";\r\nimport { Transition } from \"react-transition-group\";\r\nimport { useUILayer } from \"../ContextUI\";\r\nimport { CustomCircularProgress } from \"./components/CustomCircularProgress\";\r\nimport clsx from \"clsx\";\r\nimport { SettingsSystemDaydreamTwoTone } from \"@material-ui/icons\";\r\n\r\n\r\n\r\nexport const Searcher4 = ({ setSelection }) => {\r\n    const [query, setQuery] = useState(\"\");\r\n    const [open, setOpen] = useState(false);\r\n    const [spinnerReady, setSpinnerReady] = useState(false)\r\n\r\n    const { setShowOverlay, setTickerMove } = useUILayer()\r\n    const [{ data, loading, error }, setRequest] = useState({\r\n        data: [],\r\n        loading: false,\r\n        error: \"\",\r\n    });\r\n\r\n    const { state, dispatch } = useDataLayer()\r\n    const fetchar = async (query) => {\r\n        try {\r\n            setRequest((prev) => ({ ...prev, loading: true }));\r\n            const rawData = await fetch(`http://localhost:8001/search/${query}`);\r\n            const { data } = await rawData.json();\r\n            const dataOnlyStocks = data.filter(item => item.assetType === \"Stock\")\r\n            setRequest((prev) => ({ ...prev, data: dataOnlyStocks, loading: false }));\r\n        } catch (err) {\r\n            setRequest((prev) => ({\r\n                ...prev,\r\n                loading: false,\r\n                error: err.message,\r\n            }));\r\n        }\r\n    };\r\n\r\n\r\n    const handleSelection = (value, reason) => {\r\n        if (reason === \"select-option\") {\r\n            console.log(value, \"valueeee\")\r\n            setSelection(value);\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    const [value, setValue] = useState(\"\");\r\n    const [opened, setOpened] = useState(false)\r\n    const [dimensions, setDimensions] = useState(1);\r\n    const isSelecting = useRef(false)\r\n    const [upper, setUpper] = useState(0);\r\n    const [hasExited, setHasExited] = useState(true)\r\n\r\n    const handleBlur = () => {\r\n        console.log(\"bluuuur\");\r\n        setRequest(prev => ({ ...prev, data: [] }))\r\n    };\r\n    useEffect(() => {\r\n        if (data.length > 0) {\r\n            setWrapperHeight(listItems.current.offsetHeight)\r\n            setOpened(true)\r\n            setTickerMove(false)\r\n            setDimensions(4);\r\n            setUpper(-40);\r\n            setShowOverlay(true)\r\n        } else {\r\n            if (opened) {\r\n                setUpper(0);\r\n                setDimensions(1);\r\n                setShowOverlay(false)\r\n                setWrapperHeight(0)\r\n                //setTickerMove(true)\r\n            }\r\n        }\r\n    }, [data])\r\n\r\n    useEffect(() => {\r\n        if (value) {\r\n            fetchar(value)\r\n        }\r\n    }, [value])\r\n\r\n    const listItems = useRef(null)\r\n    const [wrapperHeigh, setWrapperHeight] = useState(0)\r\n    const defaultStyles = {\r\n        opacity: 0,\r\n        transition: \"all 0.25s ease\"\r\n    }\r\n    const transitionStyles = {\r\n        entering: { opacity: 1 },\r\n        entered: { opacity: 1 },\r\n        exiting: { opacity: 0 },\r\n        exited: { opacity: 0 },\r\n    }\r\n    console.log(wrapperHeigh, \"hiiight\")\r\n    const cleanUp = () => {\r\n        console.log(\"bblurrring ejecutao\")\r\n        setOpened(false);\r\n        setDimensions(1);\r\n        setShowOverlay(false)\r\n        setWrapperHeight(0)\r\n        setTickerMove(true)\r\n    }\r\n    // const handleClose = () => {\r\n    //     if (!data.length) {\r\n    //         setTickerMove(true)\r\n    //     }\r\n    // }\r\n\r\n    const getStyles =()=> {\r\n        //in initial animation spinner waits for search to be expanded  \r\n        if(loading && data.length === 0) {\r\n            //setSpinnerReady(false)\r\n            return \"150px\"\r\n    }\r\n       return wrapperHeigh > 0 ?  wrapperHeigh + 40 + \"px\"  :  \"50px\" \r\n    }\r\n\r\n\r\n    return (\r\n\r\n        //we n\r\n        <div\r\n            style={{height: getStyles()}}\r\n            // style={{ height: wrapperHeigh + 40 + \"px\" }}\r\n            className={clsx(\"searcher4\", {\r\n                \"open\": opened\r\n            })}\r\n            onTransitionEnd={()=>{setSpinnerReady(true)}}\r\n        // style={listItems.current? {height: listItems.current.offsetHeight} : {height: \"40px\"}}\r\n        >\r\n            {/* {loading && <p>cargando...</p>}\r\n            {data && data.map((item) => <p>{item.name}</p>)}\r\n            {error && <p>{error}</p>} */}\r\n\r\n\r\n            <input\r\n                type=\"text\"\r\n                value={value}\r\n                onChange={(e) => {\r\n                    setValue(e.target.value);\r\n                }}\r\n                onBlur={(e) => {\r\n                    console.log(\"bblurrring\")\r\n                    setSpinnerReady(false)\r\n                    setRequest(prev=>({...prev, data: []}))\r\n                    !isSelecting.current && cleanUp()\r\n                }}\r\n            // style={{ transform: `translateY(${upper}px)` }}\r\n\r\n            />\r\n\r\n\r\n            <Transition\r\n                in={data.length > 0 && !loading}\r\n                timeout={300}\r\n                // mountOnEnter\r\n                // unmountOnExit\r\n                onEntered={() => { setHasExited(false) }}\r\n                onExited={() => { setHasExited(true) }}\r\n\r\n            >\r\n                {(state) => (\r\n                    <List\r\n\r\n                        className=\"lista-search\"\r\n                        // style={dimensions > 1 && !loading ? { opacity: 1 } : { opacity: 0 }}\r\n                        style={{ ...defaultStyles, ...transitionStyles[state] }}\r\n                        ref={listItems}\r\n                    //onClick={(e)=>{console.log(\"hellowww\")}}\r\n                    >\r\n\r\n                        {data.length > 0 && data.map((item, index) =>\r\n                            <>\r\n                               { index > 0 && <Divider />}\r\n                                <ListItemText\r\n                                    key={item.ticker}\r\n                                    style={{ cursor: \"pointer\" }}\r\n                                    onClick={() => {\r\n                                        console.log(\"estas clickando\")\r\n                                        setShowOverlay(false)\r\n                                        setSelection(item)\r\n                                    }}\r\n                                    onMouseOver={() => { isSelecting.current = true }}\r\n                                    onMouseOut={() => { isSelecting.current = false }}\r\n                                >\r\n                                    {item.name}\r\n                                </ListItemText>\r\n                            </>)}\r\n                    </List>\r\n                )}\r\n            </Transition>\r\n\r\n            {/* {loading && <CustomCircularProgress\r\n                adaptable={true} />} */}\r\n            <Transition\r\n                in={loading && hasExited && spinnerReady}\r\n            // timeout={{\r\n            //     appear: 1000,\r\n            //     enter: 1000,\r\n            //     exit: 300,\r\n            // }}\r\n            mountOnEnter\r\n            unmountOnExit\r\n            >\r\n                {state => (\r\n                    <CustomCircularProgress\r\n                        adaptable={true}\r\n                        animState={state} />\r\n                )}\r\n            </Transition>\r\n\r\n        </div>\r\n    )\r\n    {/* {selection && JSON.stringify(selection, null, 2)} */ }\r\n};\r\n","C:\\Users\\gonza\\finance-app\\src\\charts\\CustomAreaChart.js",["521","522"],"import React, { useEffect, useState } from \"react\";\r\n// Import Highcharts\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport { useDataLayer } from \"../Context\";\r\n\r\n\r\n//very similar to MiniatureChartIndex\r\n\r\nexport const CustomAreaChart = ({ datos, ticker }) => {\r\n    const {state, dispatch} = useDataLayer()\r\n    const [data, setData] = useState(\"\")\r\n    useEffect(() => {\r\n        if (datos.length > 0) {\r\n            // dispatch({type: \"ADD_READY_PORTFOLIO_COMPANY_HISTORICAL_PRICE\", payload: datos})\r\n            const shortDatos = handleDatasetLength(datos)\r\n            console.log(shortDatos, \"shortdatos\")\r\n            setData(shortDatos)\r\n        }\r\n    }, [datos])\r\n\r\n    console.log(data, \"dataaau\")\r\n\r\n    const handleDatasetLength = (dataset) => {\r\n        const sobras = dataset.length - 365\r\n        console.log(sobras, \"sobras\")\r\n        if (sobras <= 0) {\r\n            return dataset\r\n        }\r\n        return dataset.slice(dataset.length - 365, dataset.length)\r\n    }\r\n\r\n    const chartOptions = {\r\n        chart: {\r\n            margin: [0, 0, 0, 0],\r\n            height: '100%',\r\n            spacing: [0, 0, 0, 0],\r\n            borderWidth: 0,\r\n            crisp: false,\r\n            type: \"areaspline\",\r\n            animation: false\r\n            //width: 50 \r\n        },\r\n        title: {\r\n            //enabled: false,\r\n            text: ticker\r\n        },\r\n        series: [{\r\n            name: ticker,\r\n            //we display just the last year\r\n            data: data,\r\n            //color: 'linear-gradient(to top, #c6ffdd, #fbd786, #f7797d);',\r\n            color: {\r\n                linearGradient: { x1: 0, x2: 0, y1: 0, y2: 1 },\r\n                stops: [\r\n                    [0, '#FF0080'],\r\n                    [1, '#FFFFFF']\r\n                ]\r\n            }\r\n            \r\n        }],\r\n        xAxis: {\r\n\r\n            crosshair: false, //hover effect of column\r\n            lineWidth: 0, //removes axis line\r\n            gridLineWidth: 0, //removes charts background line\r\n            lineColor: 'transparent',\r\n            minorTickLength: 0, //removes minor axis ticks \r\n            tickLength: 0, //removes  axis ticks \r\n            \r\n            labels: {\r\n                enabled: false\r\n            },\r\n            //this remove little padding between highhcarts container and chart\r\n            minPadding: 0,\r\n            maxPadding: 0\r\n        },\r\n        yAxis: {\r\n            min: 0,\r\n            title: {\r\n                text: ''\r\n            },\r\n            lineWidth: 0,\r\n            gridLineWidth: 0,\r\n            lineColor: 'transparent',\r\n            minorTickLength: 0,\r\n            tickLength: 0,\r\n            labels: {\r\n                enabled: false\r\n            },\r\n            minPadding: 0,\r\n            maxPadding: 0\r\n            // endOnTick: false,\r\n            // startOnTick: false,\r\n            // visible: false\r\n        },\r\n        tooltip: {\r\n            enabled: false\r\n        },\r\n        credits: {\r\n            enabled: false\r\n        },\r\n        legend: {\r\n            enabled: false\r\n        },\r\n\r\n        plotOptions: {\r\n            column: {\r\n                pointPadding: 0.2,\r\n                borderWidth: 0\r\n            },\r\n            series: {\r\n                animation: false,\r\n                marker: {\r\n                    enabled: false,\r\n                    states: {\r\n                        hover: {\r\n                            enabled: false\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {\r\n                data &&\r\n                <HighchartsReact\r\n                    highcharts={Highcharts}\r\n                    constructorType=\"chart\"\r\n                    options={chartOptions}\r\n                    containerProps={{style:{overflow: \"hidden\"}}}\r\n                />\r\n            }\r\n        </>)\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\views\\company\\DetailsSquare.js",["523","524"],"import { List, ListItem, ListItemText } from '@material-ui/core';\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { useDataLayer } from '../../Context';\r\n\r\nexport const DetailsSquare = ({ticker}) => {\r\n    const {state, dispatch } = useDataLayer()\r\n  const url = \"https://www.alphavantage.co/query?function=OVERVIEW\";\r\n  \r\n  const apiKey = \"btm6dp748v6ud360stcg\";\r\n  const [data, setData] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n\r\n\r\n  const kaka = useRef(0)\r\n  kaka.current = kaka.current + 1\r\n  useEffect(() => {\r\n    console.log(\"vas\")\r\n    //we need to check what happends if we pass undefined,\r\n    if(!state.keymetrics[ticker] || !state.keymetrics[ticker] === undefined){\r\n      console.log(kaka.current, \"kaka\")\r\n      console.log(\"que coño\", state.keymetrics[ticker])\r\n      setLoading(true);\r\n      fetch(`${url}&symbol=${ticker}&apikey=${apiKey}`)\r\n        .then((data) => data.json())\r\n        .then((data) => {\r\n          setLoading(false);\r\n          setData(data);\r\n        })\r\n        .catch((err) => {\r\n          setError(err.message);\r\n        });\r\n    }else{\r\n      //we are updating data in localstorage to inicialice initial state of the reducer every time we start the app\r\n      setData(state.keymetrics[ticker])\r\n      //data is already saved into localstorage\r\n      //localStorage.setItem(\"keymetrics\", JSON.stringify(state.keymetrics))\r\n    }\r\n  }, [state]);\r\n\r\n  useEffect(() => {\r\n    if(!state.keymetrics[ticker]){\r\n      data && dispatch({type: \"STORE_DATA\", payload: {ticker: ticker, field: \"keymetrics\", value: data}})\r\n    }\r\n  }, [data])\r\n    return (\r\n        <>\r\n        {loading && <p>cargando..</p>}\r\n      {error && <p>{error}</p>}\r\n      {data && (\r\n        <List>\r\n            <ListItem>\r\n              <ListItemText>Sector</ListItemText>\r\n              <ListItemText>{data.Sector}</ListItemText>\r\n            </ListItem>\r\n            <ListItem>\r\n              <ListItemText>Industry</ListItemText>\r\n              <ListItemText>{data.Industry}</ListItemText>\r\n            </ListItem>\r\n          </List>)}\r\n          </>\r\n    )\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\charts\\IndexesChart.js",["525","526","527","528","529"],"import React, { useState, useEffect, useRef, useLayoutEffect } from \"react\";\r\nimport Highcharts from \"highcharts/highstock\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport { useUILayer } from \"../ContextUI\";\r\nimport { useChartReflow } from \"../utils/useChartReflow\";\r\n\r\n\r\nexport const IndexesChart = ({ datos }) => {\r\n    const chart = useRef(null)\r\n    const [dataset, setDataset] = useState(\"\")\r\n    useChartReflow(chart.current)\r\n    useEffect(() => {\r\n        console.log(\"manzana\", datos.historical)\r\n        if (datos.historical && datos.historical.length > 0) {\r\n            console.log(\"entra\")\r\n            prepareData(datos.historical)\r\n\r\n        } else {\r\n            console.log(\"algo pasa, nunca deberia ejecutarse este else\")\r\n        }\r\n    }, [datos])\r\n\r\n    const sanitizeDates = (datar) => {\r\n        const data = datar.slice(0).map(item => {\r\n            const dateArr = item.date.slice(0).split(\"-\").map(num => parseInt(num));\r\n            item.date = new Date(dateArr).getTime();\r\n            return item\r\n        })\r\n        return data\r\n    }\r\n    \r\n    const prepareData = (datab) => {\r\n        console.log(datab, \"koojones que pasa\")\r\n        let data = typeof datos.historical[0].date === \"string\"\r\n            ?\r\n            sanitizeDates(datab)\r\n            :\r\n            datab\r\n\r\n\r\n        console.log(\"hola\");\r\n        let ohl = [];\r\n        let ohlNA = [];\r\n        let volume = [];\r\n        data.forEach((record) => {\r\n            let cleanRecord = [\r\n                record[\"date\"],\r\n                record[\"close\"],\r\n                record[\"high\"],\r\n                record[\"low\"],\r\n                record[\"open\"],\r\n            ];\r\n            ohl = [...ohl, cleanRecord];\r\n        });\r\n        console.log(\"ooooohl\", ohl);\r\n\r\n        setDataset(ohl.reverse());\r\n    };\r\n\r\n    const options = {\r\n        chart: {\r\n            zoomType: \"x\",\r\n            events: {\r\n                selection: function (e) {\r\n                    e && console.log(e);\r\n                },\r\n                load: function () {\r\n                    chart.current = this\r\n                }\r\n                // load: function(){\r\n                //   setIsBuilding(false)\r\n                // }\r\n            },\r\n            //width,\r\n            id: \"chart-stock\",\r\n            animation: {\r\n                duration: 225,\r\n            },\r\n        },\r\n        plotOptions: {\r\n            candlestick: {\r\n                color: \"red\",\r\n                upColor: \"rgb(22,177,87)\",\r\n                lineColor: \"red\",\r\n                upLineColor: \"rgb(22,177,87)\",\r\n                pointPadding: 0.02,\r\n            },\r\n        },\r\n\r\n        title: {\r\n            text: \"My chart\",\r\n            zoomType: \"x\",\r\n        },\r\n        rangeSelector: {\r\n            allButtonsEnabled: true,\r\n        },\r\n        navigator: {},\r\n        series: [\r\n            {\r\n                type: \"candlestick\",\r\n                data: dataset,\r\n                dataGrouping: {\r\n                    units: [\r\n                        [\"day\", [1, 2, 3, 4, 5, 8, 16]],\r\n                        [\"week\", [1, 2, 3, 4]],\r\n                        [\"month\", [1, 2, 3, 4, 6]],\r\n                    ],\r\n                    smoothed: true,\r\n                },\r\n                // showInNavigator: true,\r\n            },\r\n        ],\r\n    };\r\n    console.log(dataset, \"jodio\")\r\n\r\n    return (\r\n        <>\r\n            {\r\n                dataset &&\r\n                <HighchartsReact\r\n                    highcharts={Highcharts}\r\n                    options={options}\r\n                    constructorType={\"stockChart\"}\r\n\r\n                />}\r\n            <div>kaak</div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n//  key info example\r\n//{\r\n//     \"date\" : \"2020-11-17\",\r\n//     \"open\" : 12030.269531,\r\n//     \"high\" : 12047.129883,\r\n//     \"low\" : 11964.200195,\r\n//     \"close\" : 11977.490234,\r\n//     \"adjClose\" : 11977.490234,\r\n//     \"volume\" : 4.12277E9,\r\n//     \"unadjustedVolume\" : 4.12277E9,\r\n//     \"change\" : -52.7793,\r\n//     \"changePercent\" : -0.439,\r\n//     \"vwap\" : 11996.27344,\r\n//     \"label\" : \"November 17, 20\",\r\n//     \"changeOverTime\" : -0.00439\r\n//   }","C:\\Users\\gonza\\finance-app\\src\\views\\company\\Financials.js",["530"],"C:\\Users\\gonza\\finance-app\\src\\views\\company\\FinancialOptions.js",["531","532","533"],"import { Button, FormControl, InputLabel, MenuItem, Select } from '@material-ui/core'\r\nimport { useDataLayer } from '../../Context'\r\nimport React, { useState, useEffect } from 'react'\r\n\r\nconst assignStatement = (field) => {\r\n    switch (field) {\r\n        case \"BALANCE_SHEET\":\r\n            return \"balance\"\r\n        case \"INCOME_STATEMENT\":\r\n            return \"income\"\r\n        case \"CASH_FLOW\":\r\n            return \"cashflow\"\r\n        default:\r\n            return \"\"\r\n    }\r\n}\r\n\r\nexport const FinancialOptions = ({ setField, field, setRequest, campo, company }) => {\r\n    const [open, setOpen] = useState(false)\r\n\r\n    const handleFieldChange = (e) => {\r\n        setRequest(prev => ({ ...prev, loading: true, data: \"\" }))\r\n        setField(e.target.value)\r\n    }\r\n\r\n    \r\n    const { state} = useDataLayer()\r\n   \r\n\r\n    const handleGetFieldData = (statement) => {\r\n        const lookUpField = assignStatement(statement)\r\n        console.log(lookUpField, \"lookUpField\")\r\n        campo.current = lookUpField\r\n        if (state.financials[lookUpField][company]) {\r\n            setRequest(prev => ({ ...prev, loading: false, data: state.financials[lookUpField][company] }))\r\n        } else {\r\n            //setRequest(prev => ({ ...prev, loading: true, data: \"\" }))\r\n            fetch(`https://www.alphavantage.co/query?function=${statement}&symbol=${company}&apikey=btm6dp748v6ud360stcg`)\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    if (Object.keys(res).length > 0) {\r\n                        return setRequest(prev => ({ ...prev, loading: false, data: res }))\r\n                    }\r\n                    throw new Error(\"no data\")\r\n                })\r\n                .catch(err => { setRequest(prev => ({ ...prev, loading: false, error: err.message })) })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        handleGetFieldData(field)\r\n    }, [field])\r\n\r\n    return (\r\n        <nav\r\n            className=\"navigation-right\"\r\n        >\r\n            <FormControl >\r\n                <InputLabel id=\"demo-controlled-open-select-label\">Campo</InputLabel>\r\n                <Select\r\n                    labelId=\"demo-controlled-open-select-label\"\r\n                    id=\"demo-controlled-open-select\"\r\n                    open={open}\r\n                    onClose={() => { setOpen(false) }}\r\n                    onOpen={() => { setOpen(true) }}\r\n                    value={field}\r\n                    onChange={handleFieldChange}\r\n                >\r\n                    <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                    </MenuItem>\r\n                    <MenuItem value={\"BALANCE_SHEET\"}>Balance</MenuItem>\r\n                    <MenuItem value={\"INCOME_STATEMENT\"}>Beneficios</MenuItem>\r\n                    <MenuItem value={\"CASH_FLOW\"}>Cash Flow</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n        </nav>\r\n    )\r\n}\r\n\r\n\r\n{/* <div\r\n    className=\"grid-financial-menu\"\r\n>\r\n    <div style={{ background: \"#403f4c\" }}>\r\n\r\n    </div>\r\n    <div style={{ background: \"#e84855\" }}>\r\n\r\n    </div>\r\n    <div style={{ background: \"#F9DC5C\" }}>\r\n\r\n    </div>\r\n</div> */}","C:\\Users\\gonza\\finance-app\\src\\index.js",["534","535","536"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"./styles/main.css\"\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport { ContextProvider } from './Context';\nimport { UIProvider } from './ContextUI';\nimport { AppWithRouterAccess } from './AppWithRouterAccess';\nimport { UserContext } from './UserContext';\n\n//hasrouter won't work with okta\nReactDOM.render(\n  <React.StrictMode>\n    <UserContext>\n      <ContextProvider>\n        <UIProvider>\n          <BrowserRouter>\n            <AppWithRouterAccess />\n          </BrowserRouter>\n        </UIProvider>\n      </ContextProvider>\n    </UserContext>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n{/*</Security> */ }\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n",["537","538"],"C:\\Users\\gonza\\finance-app\\src\\SignIn.js",[],"C:\\Users\\gonza\\finance-app\\src\\RegistrationForm.js",[],"C:\\Users\\gonza\\finance-app\\src\\useAuth.js",["539","540","541"],"import { useOktaAuth } from \"@okta/okta-react\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {useUserLayer} from \"./UserContext\"\r\n\r\nconst useAuth = () => {\r\n  const { authState, authService } = useOktaAuth();\r\n  const {userDispatch} = useUserLayer()\r\n\r\n  useEffect(() => {\r\n    if (!authState.isAuthenticated) {\r\n      // When user isn't authenticated, forget any user info\r\n      userDispatch({type: \"SET_USER_NULL\"})\r\n    } else {\r\n      authService.getUser().then(info => {\r\n        userDispatch({type: \"SET_USER\", payload: info})\r\n      });\r\n    }\r\n  }, [authState, authService]); // Update if authState changes\r\n\r\n};\r\n\r\nexport default useAuth;","C:\\Users\\gonza\\finance-app\\src\\useTemporaryPossesions.js",["542","543","544"],"import React, { useEffect, useRef } from 'react'\r\nimport { useDataLayer } from './Context'\r\nimport { userActivity } from './portfolio/logicPruebasConAdd'\r\n\r\nexport const useTemporaryPossesions = () => {\r\n    const { state, dispatch } = useDataLayer()\r\n    const length = useRef(0)\r\n    const iteration = useRef(0)\r\n    useEffect(() => {\r\n        if (state.userActivity.length > 0) {\r\n            length.current = state.userActivity.length\r\n            userActivity.forEach((op, index, arr) => {\r\n                console.log(index, \"opixxo\")\r\n                dispatch({\r\n                    type: \"ADD_PORTFOLIO_CURRENT_POSSESIONS\",\r\n                    payload: {\r\n                        ticker: op.details.ticker,\r\n                        amount: op.details.amount,\r\n                        operationType: op.operationType,\r\n                        cashNetOperation: 0\r\n                    }\r\n                })\r\n                dispatch({\r\n                    type: \"ADD_UNIQUE_STOCKS\",\r\n                    payload: {\r\n                        ticker: op.details.ticker,\r\n                    }\r\n                })\r\n                index + 1 === arr.length && dispatch({ type: \"ENABLE\" })\r\n\r\n            })\r\n        }\r\n    }, [state.userActivity])\r\n\r\n    // useEffect(() => {\r\n    //     iteration.current += 1\r\n    //     console.log(\"botonto\")\r\n    //     console.log(iteration.current, length.current, \"zorrona\")\r\n    //     if (iteration.current === 2) {\r\n    //         dispatch({ type: \"ENABLE\" })\r\n    //     }\r\n    // }, [state.currentPossesions])\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\components\\Sidebar.js",["545","546","547","548"],"/* tslint:disable */\r\n\r\nimport {\r\n  Box,\r\n  Divider,\r\n  Drawer,\r\n  IconButton,\r\n  List,\r\n  makeStyles,\r\n  Typography,\r\n  useTheme,\r\n} from \"@material-ui/core\";\r\nimport clsx from \"clsx\";\r\nimport React, { useEffect } from \"react\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\r\nimport MailIcon from \"@material-ui/icons/Mail\";\r\nimport { TreeItem, TreeView } from \"@material-ui/lab\";\r\nimport { StyledTreeItem } from \"./components/treeItem\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Label from '@material-ui/icons/Label';\r\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport ForumIcon from '@material-ui/icons/Forum';\r\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { useUILayer } from \"../ContextUI\";\r\nimport { useDataLayer } from \"../Context\";\r\nimport { useViewport } from \"../utils/useViewport\";\r\n\r\nconst drawerWidth = 240;\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n    whiteSpace: \"nowrap\",\r\n  },\r\n  drawerOpen: {\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerClose: {\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    overflowX: \"hidden\",\r\n    width: theme.spacing(7) + 1,\r\n    [theme.breakpoints.down(\"sm\")]:{\r\n      width: 0\r\n    },\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9) + 1,\r\n    },\r\n  },\r\n  toolbar: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    height: \"112px\"\r\n  },\r\n  listItemText: {\r\n    width: \"100%\",\r\n    overflow: \"hidden\"\r\n    //necesary to make textOverflow work\r\n  },\r\n  textSpan: {\r\n    display: \"block\",\r\n    whiteSpace: \"nowrap\",\r\n    width: \"100%\",\r\n    textOverflow: \"ellipsis\",\r\n    overflow: \"hidden\"\r\n  }\r\n}));\r\n\r\n//ad open if not works\r\nexport const Sidebar = ({ handleDrawerClose, handleDrawerOpen, expanded, handleSidebarToggle }) => {\r\n  const history = useHistory()\r\n  \r\n  const theme = useTheme();\r\n  const {viewport} = useViewport()\r\n  const { sidebarOpen } = useUILayer()\r\n  const { state } = useDataLayer()\r\n  const classes = useStyles({viewport});\r\n\r\n  const [selected, setSelected] = React.useState(\"\");\r\n\r\n  const handleSelect = (event, nodeIds) => {\r\n    setSelected(nodeIds);\r\n  };\r\n\r\n\r\n  return (\r\n    <Drawer\r\n    variant={viewport > 600 ? \"permanent\":\"temporary\"}\r\n      className={clsx(classes.drawer, {\r\n        [classes.drawerOpen]: sidebarOpen,\r\n        [classes.drawerClose]: !sidebarOpen,\r\n      })}\r\n      classes={{\r\n        paper: clsx({\r\n          [classes.drawerOpen]: sidebarOpen,\r\n          [classes.drawerClose]: !sidebarOpen,\r\n        }),\r\n      }}\r\n      //this is for the movile version\r\n      open={sidebarOpen}\r\n    >\r\n      <div className={classes.toolbar}>\r\n        <IconButton onClick={handleDrawerClose}>\r\n          {theme.direction === \"rtl\" ? (\r\n            <ChevronRightIcon />\r\n          ) : (\r\n              <ChevronLeftIcon />\r\n            )}\r\n        </IconButton>\r\n      </div>\r\n      <Divider />\r\n      <TreeView\r\n        style={{ margin: \"1rem 0\" }}\r\n\r\n        // defaultCollapseIcon={<ArrowDropDownIcon />}\r\n        // defaultExpandIcon={<ArrowRightIcon />}\r\n        defaultEndIcon={<div style={{ width: 24 }} />}\r\n        expanded={expanded}\r\n        selected={selected}\r\n        onClick={handleDrawerOpen}\r\n        onNodeToggle={handleSidebarToggle}\r\n        onNodeSelect={handleSelect}\r\n      >\r\n        <StyledTreeItem nodeId=\"13\" labelText=\"Search\" labelIcon={SearchIcon} isTitle\r\n          ariaLabel=\"search\"\r\n          onLabelClick={() => { history.push(\"/\") }}\r\n        />\r\n        <StyledTreeItem nodeId=\"1\" labelText=\"Indexes\" labelIcon={MailIcon} isTitle\r\n\r\n        >\r\n          <StyledTreeItem\r\n            nodeId=\"2\"\r\n            labelText=\"S&P 500\"\r\n            labelIcon={SupervisorAccountIcon}\r\n            labelInfo=\"90\"\r\n            color=\"#1a73e8\"\r\n            bgColor=\"#e8f0fe\"\r\n            onLabelClick={() => { history.push(\"/indexes/sp500\") }}\r\n\r\n          />\r\n          <StyledTreeItem\r\n            nodeId=\"3\"\r\n            labelText=\"NASDAQ\"\r\n            labelIcon={InfoIcon}\r\n            labelInfo=\"2,294\"\r\n            color=\"#e3742f\"\r\n            bgColor=\"#fcefe3\"\r\n            onLabelClick={() => { history.push(\"/indexes/nasdaq\") }}\r\n\r\n          />\r\n          <StyledTreeItem\r\n            nodeId=\"4\"\r\n            labelText=\"Major INDEXES\"\r\n            labelIcon={ForumIcon}\r\n            labelInfo=\"3,566\"\r\n            color=\"#a250f5\"\r\n            bgColor=\"#f3e8fd\"\r\n            onLabelClick={() => { history.push(\"/indexes/general\") }}\r\n          />\r\n        </StyledTreeItem>\r\n\r\n        {/* <StyledTreeItem nodeId=\"7\" labelText=\"Sectors\" labelIcon={DeleteIcon} isTitle /> */}\r\n        <StyledTreeItem nodeId=\"8\" labelText=\"News\" labelIcon={Label} isTitle>\r\n          <StyledTreeItem\r\n            nodeId=\"9\"\r\n            labelText=\"General\"\r\n            labelIcon={SupervisorAccountIcon}\r\n            labelInfo=\"90\"\r\n            color=\"#1a73e8\"\r\n            bgColor=\"#e8f0fe\"\r\n            onLabelClick={() => { history.push(\"/news/general\") }}\r\n          />\r\n          <StyledTreeItem\r\n            nodeId=\"10\"\r\n            labelText=\"Forex\"\r\n            labelIcon={InfoIcon}\r\n            labelInfo=\"2,294\"\r\n            color=\"#e3742f\"\r\n            bgColor=\"#fcefe3\"\r\n            onLabelClick={() => { history.push(\"/news/forex\") }}\r\n          />\r\n          <StyledTreeItem\r\n            nodeId=\"11\"\r\n            labelText=\"Crypto\"\r\n            labelIcon={ForumIcon}\r\n            labelInfo=\"3,566\"\r\n            color=\"#a250f5\"\r\n            bgColor=\"#f3e8fd\"\r\n            onLabelClick={() => { history.push(\"/news/crypto\") }}\r\n          />\r\n          <StyledTreeItem\r\n            nodeId=\"12\"\r\n            labelText=\"Merger\"\r\n            labelIcon={LocalOfferIcon}\r\n            labelInfo=\"733\"\r\n            color=\"#3c8039\"\r\n            bgColor=\"#e6f4ea\"\r\n            onLabelClick={() => { history.push(\"/news/merger\") }}\r\n          />\r\n        </StyledTreeItem>\r\n        <StyledTreeItem nodeId=\"14\" labelText=\"Covid-19\" labelIcon={DeleteIcon}\r\n          isTitle\r\n          onClick={(e) => { history.push(\"/covid19\") }}\r\n        />\r\n      </TreeView>\r\n      <Divider />\r\n      <List\r\n      >\r\n\r\n        {state.visitedCompanies.length > 0 && state.visitedCompanies.map((company, index) => (\r\n          <ListItem button key={company.ticker}\r\n          >\r\n            {/* <ListItemIcon>\r\n              {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\r\n            </ListItemIcon> */}\r\n            <ListItemIcon>\r\n              <Typography>{company.ticker}</Typography>\r\n            </ListItemIcon>\r\n\r\n            <ListItemText\r\n              primary={company.name}\r\n              classes={{\r\n                root: classes.listItemText,\r\n                primary: classes.textSpan\r\n              }}\r\n            />\r\n          </ListItem>\r\n\r\n        ))}\r\n\r\n      </List>\r\n    </Drawer>\r\n  );\r\n};\r\n","C:\\Users\\gonza\\finance-app\\src\\charts\\StackedColumn.js",["549","550","551","552"],"import React, { useState, useEffect, useReducer } from 'react'\r\nimport Highcharts from \"highcharts\"\r\nimport HighchartsReact from \"highcharts-react-official\";\r\n\r\nconst initialState = {\r\n    data: \"\",\r\n    loading: false,\r\n    error: \"\"\r\n}\r\nconst dataReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"REQUEST_LOADING\":\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n            }\r\n        case \"REQUEST_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                data: action.payload\r\n            }\r\n        case \"REQUEST_ERROR\":\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const StackedColumn = ({ ticker }) => {\r\n    const [{ data, loading, error }, dispatch] = useReducer(dataReducer, initialState)\r\n    const fetchData = () => {\r\n        dispatch({ type: \"REQUEST_LOADING\" })\r\n        fetch(`https://finnhub.io/api/v1/stock/recommendation?symbol=${ticker}&token=btm6dp748v6ud360stcg`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                const dataCurrentYear = getCurrentYear(res)\r\n                if (dataCurrentYear.length) {\r\n                    dispatch({ type: \"REQUEST_SUCCESS\", payload: dataCurrentYear.reverse() })\r\n                } else {\r\n                    dispatch({ type: \"REQUEST_ERROR\", payload: \"No data available\" })\r\n                }\r\n            })\r\n\r\n    }\r\n    const getCurrentYear = (arr) => {\r\n        return arr.filter(item => item.period.split(\"-\")[0] === \"2020\")\r\n    }\r\n    useEffect(() => {\r\n        fetchData()\r\n    }, [])\r\n\r\n    const options = {\r\n        chart: {\r\n            type: 'column'\r\n        },\r\n        title: {\r\n            text: 'Stacked column chart'\r\n        },\r\n        xAxis: {\r\n            categories: data && data.map(item => item.period)\r\n        },\r\n        yAxis: {\r\n            min: 0,\r\n            title: {\r\n                text: 'stock recommendations'\r\n            },\r\n            stackLabels: {\r\n                enabled: true,\r\n                style: {\r\n                    fontWeight: 'bold',\r\n                    color: ( // theme\r\n                        Highcharts.defaultOptions.title.style &&\r\n                        Highcharts.defaultOptions.title.style.color\r\n                    ) || 'gray'\r\n                }\r\n            }\r\n        },\r\n        legend: {\r\n            align: 'right',\r\n            x: -30,\r\n            verticalAlign: 'top',\r\n            y: 25,\r\n            floating: true,\r\n            backgroundColor:\r\n                Highcharts.defaultOptions.legend.backgroundColor || 'white',\r\n            borderColor: '#CCC',\r\n            borderWidth: 1,\r\n            shadow: false\r\n        },\r\n        tooltip: {\r\n            headerFormat: '<b>{point.x}</b><br/>',\r\n            pointFormat: '{series.name}: {point.y}<br/>Total: {point.stackTotal}'\r\n        },\r\n        plotOptions: {\r\n            column: {\r\n                stacking: 'normal',\r\n                dataLabels: {\r\n                    enabled: true\r\n                }\r\n            }\r\n        },\r\n        // series: [{\r\n        //     name: 'John',\r\n        //     data: [5, 3, 4, 7, 2]\r\n        // }, {\r\n        //     name: 'Jane',\r\n        //     data: [2, 2, 3, 2, 1]\r\n        // }, {\r\n        //     name: 'Joe',\r\n        //     data: [3, 4, 4, 2, 5]\r\n        // }]\r\n        series:\r\n            data &&\r\n            Object.keys(data[0])\r\n                .filter(item => item !== \"period\")\r\n                .map(field => (\r\n                    {\r\n                        name: field,\r\n                        data: data.map(item => item[field])\r\n                    }\r\n                ))\r\n\r\n    }\r\n    return (\r\n        <>\r\n            {\r\n                data && <HighchartsReact\r\n                    highcharts={Highcharts}\r\n                    options={options}\r\n                />}\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\dashboard\\Middleware2.js",["553","554","555","556","557"],"import { Paper } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDataLayer } from '../Context'\r\n// import { useEngine } from '../portfolio/Engine'\r\nimport { PortfolioPriceChart } from '../portfolio/PortfolioPriceChart'\r\nimport { AssetStructure } from './AssetStructure'\r\nimport { LateralSection } from './LateralSection'\r\nimport { Marcador2 } from './Marcador2'\r\nimport { PerformanceStructure } from './PerformanceStructure'\r\nimport { PerformanceStructureB } from './PerformanceStructureB'\r\nimport { Positions } from './Positions'\r\n\r\nexport const Middleware = (props) => {\r\n    const Component = props.component\r\n    const { state } = useDataLayer()\r\n    const [posessionsReady, setPossesionsReady] = useState(false)\r\n    const [portfolioChartReady, setPortfolioChartReady] = useState(false)\r\n    //we need to check that potfolio history is not empty before render userMain\r\n    //and we need to check we have all posesion's historical prices\r\n    useEffect(() => {\r\n        if (state.areHistoricPricesReady) {\r\n            setPossesionsReady(true)\r\n        }\r\n    }, [state.areHistoricPricesReady])\r\n    useEffect(() => {\r\n        if (state.portfolioSeries && Object.keys(state.portfolioSeries).length > 0) {\r\n            setPortfolioChartReady(true)\r\n        }\r\n    }, [state.portfolioSeries])\r\n    return (\r\n        //tenemos que crear un useEngine para generar el portfolioHistory\r\n        <div>\r\n            <div class=\"dasboard-grid--desktop\">\r\n                <div className=\"principal\">\r\n\r\n                    {/* <div>\r\n                {posessionsReady ?\r\n                    <Component /> : <div>loading...</div>}\r\n            </div> */}\r\n                    \r\n                        {portfolioChartReady && <PortfolioPriceChart datos={state.portfolioSeries} title=\"profitability over investment\" />}\r\n                   \r\n                    <PerformanceStructure/>\r\n                    <PerformanceStructureB/>\r\n                </div>\r\n                <div className=\"secondary\">\r\n                    <Positions />\r\n                    <AssetStructure />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\views\\company\\ControllerCompany.js",["558","559"],"import React, { useRef, useEffect } from 'react'\r\nimport { Route, Switch, useHistory, useRouteMatch } from \"react-router-dom\";\r\nimport { KeymetricsChart } from '../../charts/KeymetricsChart';\r\nimport { useUILayer } from '../../ContextUI';\r\nimport { useMountApproval } from '../../utils/useMountApproval';\r\nimport { CovidSection2 } from '../covid/CovidSection2';\r\nimport { News } from '../principal/elements/News';\r\nimport { CompanySection } from './CompanySection';\r\nimport { Financials } from './Financials';\r\n\r\n\r\nexport const ControllerCompany = () => {\r\n    const history = useHistory()\r\n    const { path } = useRouteMatch()\r\n    useMountApproval()\r\n    const chart = useRef(null);\r\n    const { sidebarOpen } = useUILayer()\r\n    const initial = useRef(true)\r\n    useEffect(() => {\r\n        console.log(chart, \"puta\")\r\n        console.log(chart.current, \"puta2\")\r\n        if (chart.current && Object.keys(chart.current).length > 0 && !initial.current) {\r\n            setTimeout(() => {\r\n                chart.current.reflow()\r\n            }, 200)\r\n        }\r\n        initial.current = false\r\n    }, [sidebarOpen, history])\r\n\r\n    return (\r\n        <Switch>\r\n            <Route path={`${path}/overview/:company`} exact>\r\n                <CompanySection ref={chart} />\r\n            </Route>\r\n            <Route path={`${path}/keymetrics/:company`} exact>\r\n                <KeymetricsChart />\r\n            </Route>\r\n            <Route path={`${path}/financials/:company`} exact>\r\n                <Financials />\r\n            </Route>\r\n        </Switch>\r\n    )\r\n}\r\n",["560","561"],"C:\\Users\\gonza\\finance-app\\src\\portfolio\\PortfolioPriceChart.js",["562","563"],"import React, { useState, useEffect, useRef } from 'react'\r\nimport Highcharts, { chart } from \"highcharts/highstock\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport { useChartReflow } from '../utils/useChartReflow';\r\nimport { Paper } from '@material-ui/core';\r\n\r\nHighcharts.setOptions({\r\n    global : {\r\n        useUTC : false\r\n    }\r\n});\r\n\r\nexport const PortfolioPriceChart = ({ datos, title }) => {\r\n\r\n    const chart = useRef(null)\r\n    useChartReflow(chart.current)\r\n\r\n    const [dataset, setDataset] = useState(\"\")\r\n    \r\n    //la fecha de la grafica siempre es un dia menos respecto a las generatedseries\r\n    \r\n    const prepareData = () => {\r\n        let cleanData = []\r\n        Object.keys(datos).forEach(date => {\r\n            console.log(date,\"duuta\")\r\n            const actualDate = date.split(\"-\").map((val) => parseInt(val));\r\n            const formatedDate = new Date(\r\n                actualDate[0],\r\n                actualDate[1]-1,\r\n                actualDate[2]\r\n            );\r\n            console.log(formatedDate, \"ttiiimo\")\r\n            const unixTime = formatedDate.getTime();\r\n            console.log(new Date(unixTime), \"huuuuuuuuuue\")\r\n            cleanData.push({ ...datos[date], date: unixTime })\r\n        })\r\n        const readyData = cleanData.map(item => ([item.date, item.liquidativeValue]))\r\n        setDataset(readyData)\r\n    }\r\n    useEffect(() => {\r\n        if (datos) {\r\n            prepareData(datos)\r\n        }\r\n\r\n    }, [datos])\r\n\r\n    const options = {\r\n        chart: {\r\n            type: \"spline\",\r\n            zoomType: \"x\",\r\n            events: {\r\n                selection: function (e) {\r\n                    e && console.log(e);\r\n                },\r\n                load: function (e) {\r\n                    chart.current = this\r\n                }\r\n            },\r\n            //width,\r\n            id: \"chart-stock\",\r\n            animation: {\r\n                duration: 225,\r\n            },\r\n        },\r\n        plotOptions: {\r\n            candlestick: {\r\n                color: \"red\",\r\n                upColor: \"rgb(22,177,87)\",\r\n                lineColor: \"red\",\r\n                upLineColor: \"rgb(22,177,87)\",\r\n                pointPadding: 0.02,\r\n            },\r\n        },\r\n\r\n        title: {\r\n            text: {title},\r\n            zoomType: \"x\",\r\n        },\r\n        rangeSelector: {\r\n            allButtonsEnabled: true,\r\n        },\r\n        navigator: {},\r\n        series: [\r\n            {\r\n                data: dataset,\r\n                dataGrouping: {\r\n                    units: [\r\n                        [\"day\", [1, 2, 3, 4, 5, 8, 16]],\r\n                        [\"week\", [1, 2, 3, 4]],\r\n                        [\"month\", [1, 2, 3, 4, 6]],\r\n                    ],\r\n                    smoothed: true,\r\n                },\r\n                // showInNavigator: true,\r\n            },\r\n        ],\r\n    };\r\n\r\n    return (\r\n        <Paper\r\n        className=\"portfolio-chart\"\r\n        >\r\n            {\r\n                dataset &&\r\n                <HighchartsReact\r\n                    highcharts={Highcharts}\r\n                    options={options}\r\n                    constructorType={\"stockChart\"}\r\n\r\n                />}\r\n        </Paper>\r\n    )\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\dashboard\\Positions.js",["564","565","566","567","568","569","570","571","572","573"],"import React, { useState, useEffect, useReducer, useRef } from 'react'\r\nimport { useDataLayer } from '../Context'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport { Divider, IconButton, Paper, TextField } from '@material-ui/core'\r\nimport { formatter } from '../utils/numFormatter'\r\nimport { Search } from '@material-ui/icons'\r\nimport SortByAlphaIcon from '@material-ui/icons/SortByAlpha';\r\nimport { Sorter } from './Sorter'\r\nimport { Searcher } from '../components/Searcher'\r\nimport { SearcherPositions } from './SearcherPositions'\r\n\r\nconst logoReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"SET_LOADING\":\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        case \"SET_ERROR\":\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n        case \"SET_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                logos: action.payload,\r\n                success: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const Positions = () => {\r\n    const { state } = useDataLayer()\r\n    const { companiesChange } = state\r\n    const [readyState, setReadyState] = useState(\"\")\r\n    const [{ quotes, loadingQuotes, errorQuotes }, setQuotes] = useState({ quotes: \"\" })\r\n    const defaultData = useRef(null)\r\n    const [{ logos, error, loading, success }, dispatch] = useReducer(logoReducer, { logos: [], loading: false, error: null, success: false })\r\n    const [openSearcher, setOpenSearcher] = useState(false)\r\n    const [openSorter, setOpenSorter] = useState(null)\r\n    useEffect(() => {\r\n        const requestAdditionalInfo = (stocks) => {\r\n            dispatch({ type: \"SET_LOADING\" })\r\n            fetch(\"http://localhost:8001/api/companies_url\", {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                method: \"POST\",\r\n                body: JSON.stringify({ positions: stocks })\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => { dispatch({ type: \"SET_SUCCESS\", payload: res }) })\r\n                .catch(err => { dispatch({ type: \"SET_ERROR\", payload: err.message }) })\r\n        }\r\n        if (state.currentPossesions.stocks.length > 0) {\r\n            console.log(\"axactua\")\r\n            requestAdditionalInfo(state.currentPossesions.stocks)\r\n            const tickars = state.currentPossesions.stocks.map(item => item.ticker)\r\n            fetchQuotes(tickars)\r\n        }\r\n    }, [state.currentPossesions])\r\n\r\n    useEffect(() => {\r\n        console.log(success, quotes, \"quee coja\")\r\n        if (success && quotes && companiesChange) {\r\n            const stocks = [...state.currentPossesions.stocks]\r\n            console.log(stocks, \"stokkkeee\")\r\n            const stocksWithLogos = stocks.map(asset => {\r\n                const compChangeArr = companiesChange[asset.ticker]\r\n                asset[\"change\"] = compChangeArr[compChangeArr.length - 1][1]\r\n                const theStockLogo = logos.find(stock => asset.ticker.toUpperCase() === stock.ticker.toUpperCase())\r\n                const { logourl, weburl } = theStockLogo\r\n                //if logo is missing will come as empty string\r\n                asset[\"logo\"] = logourl ?\r\n                    logourl : `https://logo.clearbit.com/${weburl}?size=50`\r\n\r\n                asset[\"name\"] = theStockLogo[\"company_name\"]\r\n                const theStockQuote = quotes.find(stock => asset.ticker.toUpperCase() === stock.ticker.toUpperCase())\r\n                asset[\"value\"] = theStockQuote.priceInfo.close * asset.amount\r\n                return asset\r\n            })\r\n            defaultData.current = stocksWithLogos\r\n            setReadyState(stocksWithLogos)\r\n        }\r\n    }, [logos, success, quotes, companiesChange])\r\n\r\n    const [selected, setSelected] = useState(\"\")\r\n\r\n    const sortState = (field) => {\r\n        switch (field) {\r\n            case \"alphabetical\":\r\n                setReadyState(prev => prev.sort((a, b) => a - b))\r\n                return\r\n            case \"Relevance\":\r\n                setReadyState(prev => prev.sort((a, b) => a.value - b.value))\r\n                return\r\n            case \"change\":\r\n                setReadyState(prev => prev.sort((a, b) => a.change - b.change))\r\n                return\r\n            default:\r\n                return\r\n        };\r\n    }\r\n    const handleSelected = (what) => {\r\n        if (selected === what) {\r\n            setSelected(\"\")\r\n            setOpenSorter(null);\r\n            return\r\n        }\r\n        setSelected(what)\r\n    }\r\n    const handleSorting = (what) => {\r\n        sortState(what)\r\n        setOpenSorter(null);\r\n    }\r\n\r\n    const backToInitial = () => {\r\n        setReadyState(defaultData.current)\r\n    }\r\n\r\n    const fetchQuotes = (tickers) => {\r\n        fetch(\"http://localhost:8001/api/portfolio/quotes\", {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            method: \"POST\",\r\n            body: JSON.stringify({ tickers })\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res, \"ruuus\")\r\n                setQuotes(prev => ({ ...prev, quotes: res[0] }))\r\n            })\r\n    }\r\n    const [query, setQuery] = useState(\"\")\r\n    useEffect(() => {\r\n        if (readyState) {\r\n            const updatedList = defaultData.current.filter(item => item.name.toLowerCase().includes(query.toLowerCase()) || item.ticker.toLowerCase().includes(query.toLowerCase()))\r\n            setReadyState(updatedList)\r\n        }\r\n    }, [query])\r\n    const handleOpenSearcher =()=>{\r\n        setOpenSorter(null)\r\n        setOpenSearcher(true)\r\n    }\r\n    const handleOpenSorter =(e)=>{\r\n        setOpenSearcher(false)\r\n        setOpenSorter(e.currentTarget)\r\n    }\r\n    return (\r\n        <Paper className=\"positions\">\r\n            <header>\r\n                <h3>My Assets</h3>\r\n                <div>\r\n                    {openSearcher &&\r\n                        <SearcherPositions {...{ query, setQuery }} />\r\n                    }\r\n                    {openSorter &&\r\n                        <Sorter {...{ openSorter, setOpenSorter, setReadyState, handleSorting, handleSelected, selected}} />\r\n                    }\r\n                    <IconButton\r\n                        onClick={handleOpenSearcher}\r\n                    >\r\n                        <SearchIcon />\r\n                    </IconButton>\r\n                    <IconButton\r\n                        onClick={handleOpenSorter}\r\n                    >\r\n                        <SortByAlphaIcon />\r\n                    </IconButton>\r\n                </div>\r\n            </header>\r\n            {/* <ul>\r\n                {logos.map(item => <li>\r\n                    {item.logo}\r\n                </li>)}\r\n            </ul> */}\r\n            <div className=\"positions-body\">\r\n                <ul>\r\n                    {readyState && readyState.map(item =>\r\n                        <>\r\n                            <Divider />\r\n                            <li>\r\n                                <img className=\"logo\" src={item.logo} alt={`${item.ticker}-logo`} />\r\n                                <div className=\"additional-wrap\">\r\n                                    <p className=\"field-2\">\r\n                                        <h5>{item.ticker} ({item.name})</h5>\r\n                                        <p>Qty: {item.amount}</p>\r\n                                    </p>\r\n                                    <p className=\"field-3\">\r\n                                        <p>{formatter.format(item.value)}</p>\r\n                                        <p>{item.change}%</p>\r\n                                    </p>\r\n                                </div>\r\n                            </li>\r\n                        </>\r\n                    )}\r\n                </ul>\r\n            </div>\r\n        </Paper>\r\n    )\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\utils\\useFetch.js",["574","575","576"],"C:\\Users\\gonza\\finance-app\\src\\views\\principal\\elements\\Sectors.js",[],"C:\\Users\\gonza\\finance-app\\src\\views\\indexes\\IndexesGeneral.js",["577","578","579","580","581","582","583","584","585"],"import { Table, TableBody, TableCell, TableHead, TableRow } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { GeneralIndexDispatcher } from '../../charts/GeneralIndexDispatcher'\r\nimport { IndexesChart2 } from '../../charts/indexesChart2'\r\nimport { MiniatureChart } from '../../charts/MiniatureChartIndex'\r\nimport { CustomCircularProgress } from '../../components/components/CustomCircularProgress'\r\nimport { useFetch } from '../../utils/useFetch'\r\nimport fakeQuotes from \"./fakequotes.json\"\r\n//each index comes with quote, so we have it all\r\nexport const IndexesGeneral = () => {\r\n    const category = \"indexes\"\r\n    const subCategory = \"index-list\"\r\n    const options = { explicitUrl: true }\r\n    const [chartSelected, setChartSelected] = useState(\"\")\r\n    // const { datos, loading, error } = useFetch(\"https://financialmodelingprep.com/api/v3/quotes/index?apikey=651d720ba0c42b094186aa9906e307b4\", subCategory, category, options)\r\n    \r\n    const [{allIndexPrices, loading2, error2}, setAllIndexPrices] = useState({allIndexPrices: [], loading: false, error2: \"\"})\r\n    const getAllIndexPrices = () => {\r\n        setAllIndexPrices(prev=>({...prev, loading: true}))\r\n        fetch(\"http://localhost:8001/pricesIndex\")\r\n            .then(res => res.json())\r\n            .then(res => { \r\n                let datus = []\r\n                res.forEach(arr=>{\r\n                    arr.forEach(arri=>{\r\n                        datus = [...datus, arri]\r\n                    })\r\n                })\r\n                setAllIndexPrices(prev=>({...prev, loading2: false, allIndexPrices: datus})) })\r\n            .catch(err=>{setAllIndexPrices(prev=>({...prev, loading2: false, error2: err})) })\r\n    }\r\n \r\n    useEffect(()=>{\r\n       \r\n            getAllIndexPrices()\r\n        \r\n    },[])\r\n    console.log(allIndexPrices, \"putaprices\")\r\n    return (\r\n        <div>\r\n            {/* {loading && <CustomCircularProgress />}\r\n            {error && <p>{error}</p>} */}\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>\r\n                            Name\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            price\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            open\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            close\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            high\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            low\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            change\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            chart\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n\r\n                    {fakeQuotes.length > 0 && fakeQuotes.map((item, index) => (\r\n                        <TableRow>\r\n                            <TableCell>\r\n                                {item.name}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {item.price}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {item.open}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {item.close}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {item.dayHigh}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {item.dayLow}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {item.change}\r\n                            </TableCell>\r\n                            <TableCell\r\n                            style={{padding: 0, width: \"100px\"}}\r\n                            >\r\n                                {allIndexPrices.length > 0 && <GeneralIndexDispatcher \r\n                                datos={allIndexPrices[index]} \r\n                                setChartSelected={setChartSelected}\r\n                                chartSelected={chartSelected}\r\n                                />}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n            {/* {datos.length > 0 && datos.map(item => <p>{JSON.stringify(item, null, 2)}</p>)} */}\r\n        </div>\r\n    )\r\n}\r\n\r\n","C:\\Users\\gonza\\finance-app\\src\\portfolio\\portfolioGenerator2.js",["586","587","588","589","590","591","592"],"import React, { useEffect, useRef, useState } from 'react'\r\nimport { useDataLayer } from '../Context'\r\nimport { convertUnixToHuman } from '../utils/datesUtils'\r\n\r\nexport const usePortfolioGenerator = () => {\r\n\r\n    const { state, dispatch } = useDataLayer()\r\n    const userRefreshed = useRef(true)\r\n    const [rendi, setRendi] = useState()\r\n    const validDates = useRef([])\r\n    //option 1 : save masterSerie as a object\r\n    //option 2 : save masterSerie as a array\r\n\r\n    //generated series has dates that portfolioHistory dont have (weekends stock market is close)\r\n\r\n    //we need to update today's income, so we could remove last value and added it again with the correct info\r\n    //this is step2\r\n\r\n    const getLastValidPrice = (ticker) => {\r\n        let fecha\r\n        let register\r\n        for (let date of Object.keys(state.portfolioHistory).reverse()) {\r\n            if (state.portfolioHistory[date][ticker]) {\r\n                fecha = date\r\n                register = state.portfolioHistory[date][ticker]\r\n                break\r\n            }\r\n        }\r\n        return { fecha, register }\r\n    }\r\n\r\n\r\n    // const updateSerie = (cb) => {\r\n    //     var lastDaySerieStep2;\r\n    //     let change, incomeDiff, dayBefore;\r\n    //     let lastIncome = 0\r\n    //     let liquidativeValue = 1000\r\n    //     const seriesStep2 = state.portfolioSeries\r\n    //     const seriesStep2Copy = { ...seriesStep2 }\r\n    //     // const today = Object.keys(seriesStep2)[Object.keys(seriesStep2).length - 1]\r\n    //     const today = convertUnixToHuman(Date.now())\r\n\r\n    //     const currentSerieStep1 = state.generatedSeries.dates[today]\r\n    //     //const generatedSerieOfToday = state.generatedSeries\r\n    //     console.log(today, \"todaaaay\")\r\n    //     let portfolioCost = 0;\r\n    //     let portfolioValue = 0;\r\n    //     console.log(state.portfolioHistory)\r\n    //     console.log(state.portfolioSeries, \"wuta\")\r\n    //     currentSerieStep1.positions.forEach(asset => {\r\n    //         portfolioCost += asset.amount * asset.unitaryCost\r\n    //         console.log(asset.ticker, \"ticko\")\r\n    //         const { register } = getLastValidPrice(asset.ticker)\r\n    //         const positionVal = register.close * asset.amount\r\n    //         portfolioValue += positionVal\r\n\r\n    //         let valueIncrement = 0\r\n    //         let lastDate = validDates.current[validDates.current.length - 1]\r\n    //         console.log(lastDate, today, \"luuust\")\r\n    //         let lastLiquidativeValue = seriesStep2[today].liquidativeValue\r\n    //         //calculate portfolioValue and costs\r\n\r\n    //         //calculate liquidative Value\r\n    //         const stockClosePrice = state.portfolioHistory[today][asset.ticker.toUpperCase()].close\r\n    //         const aportacion = calculadorMedia(asset, register.close, today, lastDate, portfolioValue)\r\n    //         console.log(aportacion, \"jojo\")\r\n    //         valueIncrement += aportacion\r\n\r\n    //         liquidativeValue = lastLiquidativeValue * (1 + valueIncrement)\r\n\r\n    //     })\r\n\r\n\r\n    //     seriesStep2Copy[today] = {\r\n    //         portfolioCost,\r\n    //         portfolioValue,\r\n    //         liquidativeValue,\r\n    //     }\r\n    //     console.log(\"execuuuted\")\r\n    //     cb(seriesStep2Copy)\r\n    // }\r\n\r\n    const calculadorMedia = (asset, stockPrice, date, lastDate, portfolioValue) => {\r\n\r\n        console.log(asset.amount, asset.price, portfolioValue, date, lastDate, asset.ticker, \"rururu\")\r\n        console.log(state.portfolioHistory, \"historria\")\r\n        const relativeSize = (asset.amount * stockPrice) / portfolioValue\r\n        const currentPrice = state.portfolioHistory[date][asset.ticker.toUpperCase()].close\r\n        const lastPrice = state.portfolioHistory[lastDate][asset.ticker.toUpperCase()].close\r\n        const change = (currentPrice - lastPrice) / lastPrice\r\n        //console.log(relativeSize, \"rururu\")\r\n        //console.log((currentPrice - lastPrice) / lastPrice, \"rururu\")\r\n        //console.log(change, relativeSize, \"rururu\")\r\n        const koko = relativeSize * change\r\n        return koko\r\n    }\r\n    const addRelativePerformance = (companiesPerformance, date, aportacion, asset) => {\r\n        const aportacionR = aportacion * 100\r\n        if (Math.abs(aportacionR) < 0.1) {\r\n            const otherCategory = companiesPerformance[date].find(item => item.ticker === \"other\")\r\n            if (!otherCategory) {\r\n                companiesPerformance[date] = [\r\n                    ...companiesPerformance[date],\r\n                    {\r\n                        ticker: \"other\",\r\n                        performance: aportacionR\r\n                    }\r\n                ]\r\n            } else {\r\n                otherCategory.performance = otherCategory.performance + aportacionR\r\n            }\r\n\r\n        } else {\r\n            companiesPerformance[date] = [...companiesPerformance[date],\r\n            {\r\n                ticker: asset.ticker.toUpperCase(),\r\n                performance: aportacionR\r\n            }\r\n            ]\r\n        }\r\n    }\r\n    const generateSerie = (cb) => {\r\n        let masterSerie = {}\r\n        let liquidativeInitial = 1000\r\n        let accruedIncome = 0\r\n        let companiesPerformanceImpact = {}\r\n        let change, lastDate, lastIncome, liquidativeValue;\r\n        let wtf = []\r\n        //polifill, if some price is unexpectly missing we will use the last valid price.\r\n        let polyfillPrices = {}\r\n        let stocksProcesed = []\r\n        const dateKeys = Object.keys(state.generatedSeries.dates)\r\n        dateKeys.forEach((date, index) => {\r\n            if (state.portfolioHistory[date] !== undefined) {\r\n                let portfolioCost = 0\r\n                let portfolioValue = 0\r\n                state.generatedSeries.dates[date].positions.forEach(asset => {\r\n                    portfolioCost += asset.amount * asset.unitaryCost\r\n                    console.log(date, state.portfolioHistory, state.generatedSeries, asset.ticker, \"todddddo\")\r\n                    const stockRegister = state.portfolioHistory[date][asset.ticker.toUpperCase()]\r\n                    let stockClosePrice;\r\n                    if (stockRegister === undefined) {\r\n                        stockClosePrice = polyfillPrices[asset.ticker]\r\n                    } else {\r\n                        stockClosePrice = stockRegister.close\r\n                        polyfillPrices[asset.ticker] = stockClosePrice\r\n                    }\r\n\r\n                    const positionVal = stockClosePrice * asset.amount\r\n                    portfolioValue += positionVal\r\n                })\r\n                if (index === 0) {\r\n                    liquidativeValue = liquidativeInitial\r\n                    validDates.current = [...validDates.current, date]\r\n                    masterSerie = {\r\n                        ...masterSerie,\r\n                        [date]: {\r\n                            portfolioCost,\r\n                            portfolioValue,\r\n                            accruedIncome,\r\n                            liquidativeValue\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    companiesPerformanceImpact[date] = []\r\n                    let valueIncrement = 0\r\n                    let lastDate = validDates.current[validDates.current.length - 1]\r\n                    console.log(lastDate, \"luuust\")\r\n                    let lastLiquidativeValue = masterSerie[lastDate].liquidativeValue\r\n                    //calculate portfolioValue and costs\r\n                    //calculate liquidative Value\r\n\r\n                    state.generatedSeries.dates[date].positions.forEach(asset => {\r\n                        let isFirstRecord = false\r\n                        if (!stocksProcesed.includes(asset.ticker.toUpperCase())) {\r\n                            stocksProcesed = [...stocksProcesed, asset.ticker.toUpperCase()]\r\n                            isFirstRecord = true\r\n                        }\r\n\r\n                        const stockRegister = state.portfolioHistory[date][asset.ticker.toUpperCase()]\r\n                        let stockClosePrice;\r\n                        if (stockRegister === undefined) {\r\n                            stockClosePrice = polyfillPrices[asset.ticker]\r\n                        } else {\r\n                            stockClosePrice = stockRegister.close\r\n                            //polyfillPrices[asset.ticker] = stockClosePrice\r\n                        }\r\n                        // if (stockClosePrice === undefined) {\r\n                        //     stockClosePrice = getLastValidPrice(asset.ticker.toUpperCase())\r\n                        // }\r\n                        const aportacion = isFirstRecord ? 0 : calculadorMedia(asset, stockClosePrice, date, lastDate, portfolioValue)\r\n                        console.log(aportacion, \"jojo\")\r\n                        valueIncrement += aportacion\r\n                        addRelativePerformance(companiesPerformanceImpact, date, aportacion, asset)\r\n\r\n                    })\r\n\r\n                    liquidativeValue = lastLiquidativeValue * (1 + valueIncrement)\r\n\r\n                    masterSerie = {\r\n                        ...masterSerie,\r\n                        [date]: {\r\n                            portfolioCost,\r\n                            portfolioValue,\r\n                            accruedIncome,\r\n                            liquidativeValue\r\n                        }\r\n                    }\r\n                    //we should store this array in the context to acces easily in the updateSeries\r\n                    validDates.current = [...validDates.current, date]\r\n                }\r\n\r\n            }\r\n        })\r\n        console.log(companiesPerformanceImpact, \"perfi\")\r\n        console.log(wtf)\r\n        dispatch({ type: \"STORE_IMPACT_BY_COMPANY\", payload: companiesPerformanceImpact })\r\n        setRendi(masterSerie)\r\n        cb(masterSerie)\r\n    }\r\n\r\n    console.log(rendi, \"rendiiiiii\")\r\n    console.log(state.generatedSeries, \"muuu\")\r\n\r\n    useEffect(() => {\r\n        console.log(state.areHistoricPricesReady, state.areGeneratedSeriesReady, \"que cohone\")\r\n        if (userRefreshed.current && state.areHistoricPricesReady && state.areGeneratedSeriesReady) {\r\n            generateSerie((result) => {\r\n                dispatch({ type: \"STORE_GENERATED_READY_SERIES\", payload: result })\r\n                userRefreshed.current = false\r\n            })\r\n        }\r\n        // al final no hace falta actualizar la serie al momento\r\n        // else if (!userRefreshed.current && state.areHistoricPricesReady && state.areGeneratedSeriesReady) {\r\n        //     updateSerie((result) => {\r\n        //         dispatch({ type: \"STORE_GENERATED_READY_SERIES\", payload: result })\r\n        //     })\r\n        // }\r\n\r\n    }, [state.generatedSeries, state.areHistoricPricesReady, state.areGeneratedSeriesReady])\r\n\r\n}",["593","594"],"C:\\Users\\gonza\\finance-app\\src\\charts\\linechart.js",["595"],"import React from 'react'\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\n\r\nexport const Linechart = ({ data }) => {\r\n\r\n    console.log(data, \"poooooooooota\")\r\n    const options = {\r\n        // title: {\r\n        //     text: 'Solar Employment Growth by Sector, 2010-2016'\r\n        // },     \r\n        \r\n        series: [{\r\n            data: data.map(item=>item.close),\r\n            // data: [50, 40, 40, 30, 15, 12, 8, 22,40],\r\n            marker: {\r\n                enabled: false\r\n            },\r\n            animation: false,\r\n        }],\r\n        chart: {\r\n            type: 'line',\r\n            backgroundColor: 'black',\r\n            plotBorderWidth: null,\r\n            marginTop: 0,\r\n            marginBottom: 0,\r\n            marginLeft: 0,\r\n            plotShadow: false,\r\n            borderWidth: 0,\r\n            plotBorderWidth: 0,\r\n            marginRight: 0\r\n        },\r\n        tooltip: {\r\n            userHTML: true,\r\n            style: {\r\n                padding: 0,\r\n                width: 0,\r\n                height: 0,\r\n            },\r\n            formatter: function () {\r\n                return this.point.residents;\r\n            },\r\n        },\r\n        title: {\r\n            text: ''\r\n        },\r\n        xAxis: {\r\n            enabled: false,\r\n            showEmpty: false,\r\n        },\r\n        yAxis: {\r\n            min: 0,\r\n            title: {\r\n                text: ''\r\n            },\r\n            showEmpty: false,\r\n            enabled: false\r\n        },\r\n        credits: {\r\n            enabled: false\r\n        },\r\n        legend: {\r\n            enabled: false\r\n        },\r\n        plotOptions: {\r\n            line: {\r\n                lineWidth: 1.5,\r\n            },\r\n            showInLegend: false,\r\n            tooltip: {}\r\n        },\r\n        \r\n\r\n\r\n        // responsive: {\r\n        //     rules: [{\r\n        //         condition: {\r\n        //             maxWidth: 500\r\n        //         },\r\n        //         chartOptions: {\r\n        //             legend: {\r\n        //                 layout: 'vertical',\r\n        //                 align: 'center',\r\n        //                 verticalAlign: 'bottom'\r\n        //             }\r\n        //         }\r\n        //     }]\r\n        // }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            { data && <HighchartsReact\r\n                highcharts={Highcharts}\r\n                options={options}\r\n                containerProps={{ style: { height: \"100%\" } }}\r\n            />}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","C:\\Users\\gonza\\finance-app\\src\\components\\Overlay.js",[],"C:\\Users\\gonza\\finance-app\\src\\portfolio\\logicPruebas.js",["596"],"import { useEffect } from \"react\";\r\nimport { useDataLayer } from \"../Context\";\r\nimport { convertHumanToUnixInit, convertUnixToHuman } from \"../utils/datesUtils\";\r\nimport { usePortfolioGenerator } from \"./portfolioGenerator\";\r\n//we lost lot of time by not realising .map() mutate object, so each time we were changing th eamount of one date we were change all the amount of the past dates as well kind of magically. That is because each date is an array of objects, and this objects are references from the previous object as we generate the the series from the objects of the date before. So everytime we were fining the updatedInfo, we were using the same object (as they werre pointing to he same memory dir), instead of a copy..\r\n\r\n\r\n//we are injecting this from App.js\r\n\r\n\r\nexport const userActivity = [\r\n    {\r\n        date: \"2020-06-15\",\r\n        operationType: \"buy\",\r\n        details: {\r\n            ticker: \"amzn\",\r\n            amount: 40,\r\n            unitaryCost: 300\r\n\r\n        },\r\n        isFirstOperation: true,\r\n\r\n    },\r\n    {\r\n        date: \"2020-06-15\",\r\n        operationType: \"buy\",\r\n        details: {\r\n            ticker: \"aapl\",\r\n            amount: 60,\r\n            unitaryCost: 300\r\n\r\n        },\r\n        isFirstOperation: false,\r\n\r\n    },\r\n    {\r\n        date: \"2020-06-15\",\r\n        operationType: \"sell\",\r\n        details: {\r\n            ticker: \"aapl\",\r\n            amount: 40,\r\n            priceSold: 300\r\n\r\n        },\r\n        isFirstOperation: false,\r\n    },\r\n    {\r\n        date: \"2020-06-16\",\r\n        operationType: \"buy\",\r\n        details: {\r\n            ticker: \"aa\",\r\n            amount: 40,\r\n            unitaryCost: 14\r\n\r\n        },\r\n        isFirstOperation: false,\r\n\r\n    },\r\n    {\r\n        date: \"2020-06-22\",\r\n        operationType: \"buy\",\r\n        details: {\r\n            ticker: \"aa\",\r\n            amount: 30,\r\n            unitaryCost: 14\r\n\r\n        },\r\n        isFirstOperation: false,\r\n    },\r\n    {\r\n        date: \"2020-06-25\",\r\n        operationType: \"buy\",\r\n        details: {\r\n            ticker: \"aa\",\r\n            amount: 30,\r\n            unitaryCost: 14\r\n\r\n        },\r\n        isFirstOperation: false,\r\n\r\n    },\r\n    {\r\n        date: \"2020-07-18\",\r\n        operationType: \"sell\",\r\n        details: {\r\n            ticker: \"aapl\",\r\n            amount: 10,\r\n            priceSold: 315\r\n\r\n        },\r\n        isFirstOperation: false,\r\n\r\n    },\r\n    {\r\n        date: \"2020-08-21\",\r\n        operationType: \"buy\",\r\n        details: {\r\n            ticker: \"fb\",\r\n            amount: 100,\r\n            unitaryCost: 10\r\n\r\n        },\r\n        isFirstOperation: false,\r\n\r\n    },\r\n    {\r\n        date: \"2020-08-21\",\r\n        operationType: \"buy\",\r\n        details: {\r\n            ticker: \"fb\",\r\n            amount: 20,\r\n            unitaryCost: 10\r\n\r\n        },\r\n        isFirstOperation: false,\r\n\r\n    },\r\n    {\r\n        date: \"2020-08-21\",\r\n        operationType: \"buy\",\r\n        details: {\r\n            ticker: \"tef\",\r\n            amount: 80,\r\n            unitaryCost: 7\r\n\r\n        },\r\n        isFirstOperation: false,\r\n\r\n    },\r\n    {\r\n        date: \"2020-09-24\",\r\n        operationType: \"sell\",\r\n        details: {\r\n            ticker: \"fb\",\r\n            amount: 120,\r\n            priceSold: 20\r\n\r\n        },\r\n        isFirstOperation: false,\r\n\r\n\r\n    },\r\n    {\r\n        date: \"2020-09-21\",\r\n        operationType: \"sell\",\r\n        details: {\r\n            ticker: \"tef\",\r\n            amount: 45,\r\n            priceSold: 3\r\n\r\n        },\r\n        isFirstOperation: false,\r\n\r\n    },\r\n    {\r\n        date: \"2020-10-26\",\r\n        operationType: \"sell\",\r\n        details: {\r\n            ticker: \"amzn\",\r\n            amount: 10,\r\n            priceSold: 3000\r\n\r\n        },\r\n        isFirstOperation: false,\r\n\r\n    }\r\n]\r\n//let initialTimeUnix = 0\r\n//gastamos 12.000 en acciones de amzn\r\n//vendemos 10 acciones a 3000, ingresando 30.000, ganamos 12.000\r\n\r\nconst findFirstDate = (userActivity) => {\r\n    let valu\r\n    userActivity.forEach(operation => {\r\n        if (operation.isFirstOperation) {\r\n            console.log(operation.date)\r\n            valu = convertHumanToUnixInit(operation.date)\r\n        }\r\n    })\r\n    return valu\r\n}\r\n\r\n\r\nconst milisencondsInADay = 24 * 60 * 60 * 1000\r\n\r\n\r\n\r\nconst getTotalDaysElapsed = (initialTime) => {\r\n    //const initialTime = findFirstDate()\r\n    const date = convertUnixToHuman(Date.now())\r\n    const todayUnix00 = convertHumanToUnixInit(date)\r\n    const totalMilisecons = todayUnix00 - initialTime\r\n    return totalMilisecons / milisencondsInADay\r\n}\r\n\r\n\r\n\r\nexport const useLogicPruebas = () => {\r\n\r\n    const { state, dispatch } = useDataLayer()\r\n\r\n    const createTimelaspse = (initialTime) => {\r\n        let timelapse = []\r\n        //let initialTime = findFirstDate(state.userActivity)\r\n        const range = getTotalDaysElapsed(initialTime)\r\n        //let unixDate = initialTimeUnix.current\r\n        //console.log(range)\r\n        Array.from(Array(range).keys()).forEach(_ => {\r\n            const humanDate = convertUnixToHuman(initialTime)\r\n            timelapse = [...timelapse, humanDate]\r\n            initialTime += milisencondsInADay\r\n        })\r\n        return timelapse\r\n    }\r\n\r\n    const handleSell = (costMeanXud, amountSold, priceSold) => {\r\n        const income = (priceSold * amountSold) - (costMeanXud * amountSold)\r\n        return { income }\r\n    }\r\n\r\n  \r\n\r\n    const generateSerieFromBegining = (userActivity, cb) => {\r\n        const initialTime = findFirstDate(userActivity)\r\n        console.log(initialTime, findFirstDate(userActivity), \"inicial\")\r\n        const timelapse = createTimelaspse(initialTime)\r\n        console.log(timelapse)\r\n        let masterHistory = {\r\n            income: 0\r\n        }\r\n        //here we initialize an empty array for each date\r\n        let koko = 0\r\n        timelapse.forEach(date => {\r\n            masterHistory = {\r\n                ...masterHistory,\r\n                dates: {\r\n                    ...masterHistory.dates,\r\n                    [date]: []\r\n                }\r\n            }\r\n        })\r\n        console.log(masterHistory, \"queu\")\r\n        timelapse.forEach((date, index) => {\r\n            console.log(date, \"fecha\")\r\n            let hasMadeOperationThatDate = false\r\n            userActivity.forEach(operation => {\r\n                if (date === operation.date) {\r\n                    console.log(index, \"iiii\")\r\n                    console.log(\"hola\")\r\n                    console.log(date, \"first date\")\r\n                    hasMadeOperationThatDate = true\r\n                    let ticker = operation.details.ticker\r\n                    let amount = operation.details.amount\r\n                    let unitaryCost = operation.details.unitaryCost\r\n                    let priceSold = operation.details.priceSold\r\n\r\n                    //tenemos que comprobar si teniamos alguna cantidad previamente de ese ticker\r\n                    let lastAmount = 0\r\n                    console.log(JSON.parse(JSON.stringify(masterHistory)), JSON.parse(JSON.stringify(masterHistory.dates)), masterHistory.dates[date], date, \"wata\")\r\n                    const hasAlreadyOperatedThatDay = masterHistory[\"dates\"][date].positions\r\n                    if (hasAlreadyOperatedThatDay) {\r\n                        console.log(ticker, \"operated twice that day\")\r\n                        const alreadyInPortfolio = masterHistory.dates[date].positions.find(item => item.ticker === ticker)\r\n                        if (alreadyInPortfolio) {\r\n                            lastAmount = alreadyInPortfolio.amount\r\n                            const newAmount =\r\n                                operation.operationType === \"buy\" ?\r\n                                    lastAmount + amount : lastAmount - amount\r\n                            if (operation.operationType === \"buy\") {\r\n                                const updatedInfo = masterHistory.dates[date].positions.map(({ ...posesions }) => {\r\n                                    if (posesions.ticker === ticker) {\r\n                                        posesions.amount = newAmount\r\n                                        const unitaryCostMean =\r\n                                            (posesions.unitaryCost * posesions.amount) /\r\n                                            (posesions.amount + amount)\r\n                                            +\r\n                                            (unitaryCost * amount) /\r\n                                            (posesions.amount + amount)\r\n\r\n                                        posesions.unitaryCost = Math.round(unitaryCostMean * 100) / 100\r\n                                    }\r\n                                    return posesions\r\n                                })\r\n                                masterHistory = {\r\n                                    ...masterHistory,\r\n                                    dates: {\r\n                                        ...masterHistory.dates,\r\n                                        [date]: {\r\n                                            ...masterHistory.dates[date],\r\n                                            positions: updatedInfo\r\n                                        }\r\n                                    }\r\n\r\n                                }\r\n                            }\r\n                            else if (operation.operationType === \"sell\") {\r\n                                let dateIncome, operationIncome;\r\n                                masterHistory.dates[date].positions.forEach(posesions => {\r\n                                    if (posesions.ticker === ticker) {\r\n                                        if (index === 0) {\r\n                                            console.log(posesions.unitaryCost, \r\n                                            amount, priceSold, \"incomeee\")\r\n                                        }\r\n                                        const { income } = handleSell(posesions.unitaryCost, amount, priceSold)\r\n                                        if (index === 0) {\r\n                                            console.log(JSON.parse(JSON.stringify(income, \"incomeee\")))\r\n                                        }\r\n                                        operationIncome = income\r\n\r\n                                        dateIncome = masterHistory.dates[date].income + income\r\n                                    }\r\n                                })\r\n                                let updatedInfo = newAmount !== 0 ?\r\n                                    masterHistory.dates[date].positions.map(({ ...posesions }) => {\r\n                                        if (posesions.ticker === ticker) {\r\n                                            posesions.amount = newAmount\r\n                                            posesions[\"income\"] = operationIncome\r\n                                        }\r\n                                        return posesions\r\n                                    })\r\n                                    :\r\n                                    masterHistory.dates[date].positions.filter(item => item.ticker !== ticker)\r\n\r\n                                masterHistory = {\r\n                                    ...masterHistory,\r\n                                    dates: {\r\n                                        ...masterHistory.dates,\r\n                                        [date]: {\r\n                                            income: dateIncome,\r\n                                            positions: updatedInfo\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            masterHistory = {\r\n                                ...masterHistory,\r\n                                dates: {\r\n                                    ...masterHistory.dates,\r\n                                    [date]: {\r\n                                        ...masterHistory.dates[date],\r\n                                        positions: [\r\n                                            ...masterHistory.dates[date].positions,\r\n                                            {\r\n                                                ticker,\r\n                                                amount,\r\n                                                unitaryCost\r\n                                            }\r\n                                        ]\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //if is the first iteration we now this is the initial operation so there're weren stocks before.\r\n                    else {\r\n                        const alreadyInPortfolio = index === 0 ? false : masterHistory.dates[timelapse[index - 1]].positions.find(item => item.ticker === ticker)\r\n                        console.log(alreadyInPortfolio, \"que concho\")\r\n                        if (alreadyInPortfolio) {\r\n                            lastAmount = alreadyInPortfolio.amount\r\n                            const newAmount =\r\n                                operation.operationType === \"buy\" ?\r\n                                    lastAmount + amount : lastAmount - amount\r\n                            if (operation.operationType === \"buy\") {\r\n                                const updatedInfo = masterHistory.dates[timelapse[index - 1]].positions.map(({ ...posesions }) => {\r\n                                    console.log(posesions, \"cojones\")\r\n                                    if (posesions.ticker === ticker) {\r\n                                        posesions.amount = newAmount\r\n                                        const unitaryCostMean =\r\n                                            (posesions.unitaryCost * posesions.amount) /\r\n                                            (posesions.amount + amount)\r\n                                            +\r\n                                            (unitaryCost * amount) /\r\n                                            (posesions.amount + amount)\r\n\r\n                                        posesions.unitaryCost = Math.round(unitaryCostMean * 100) / 100\r\n                                    }\r\n                                    return posesions\r\n                                })\r\n\r\n                                masterHistory = {\r\n                                    ...masterHistory,\r\n                                    dates: {\r\n                                        ...masterHistory.dates,\r\n                                        [date]: {\r\n                                            ...masterHistory.dates[timelapse[index-1]],\r\n                                            positions: updatedInfo\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            else if (operation.operationType === \"sell\") {\r\n                                // console.log(JSON.parse(JSON.stringify(masterHistory)), \"antes\", ticker, date, timelapse[index - 1])\r\n                                //let newIncome;\r\n                                let operationIncome;\r\n                                let dateIncome;\r\n                                masterHistory.dates[timelapse[index - 1]].positions.forEach(posesions => {\r\n                                    if (posesions.ticker === ticker) {\r\n                                        const { income } = handleSell(posesions.unitaryCost, amount, priceSold)\r\n                                        operationIncome = income\r\n                                        dateIncome = masterHistory.dates[timelapse[index - 1]].income + income\r\n                                    }\r\n                                })\r\n                                let updatedInfo = newAmount !== 0 ?\r\n                                    masterHistory.dates[timelapse[index - 1]].positions.map(({ ...posesions }) => {\r\n                                        if (posesions.ticker === ticker) {\r\n                                            posesions.amount = newAmount\r\n                                            posesions[\"income\"] = operationIncome\r\n                                        }\r\n                                        return posesions\r\n                                    })\r\n                                    :\r\n                                    masterHistory.dates[timelapse[index - 1]].positions.filter(item => item.ticker !== ticker)\r\n                                // console.log(JSON.parse(JSON.stringify(masterHistory)), \"despues\", ticker, date, timelapse[index - 1])\r\n                                masterHistory = {\r\n                                    ...masterHistory,\r\n                                    dates: {\r\n                                        ...masterHistory.dates,\r\n                                        [date]: {\r\n                                            income: dateIncome,\r\n                                            positions: updatedInfo\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                        } else {\r\n                            //si opera varias en un dia, el codigo no debe pasar x aqui\r\n                            const info = {\r\n                                ticker,\r\n                                amount,\r\n                                unitaryCost\r\n                            }\r\n\r\n                            if (index === 0) {\r\n                                console.log(info, \"info\")\r\n                                //aunque sea el primer dia\r\n                                masterHistory = {\r\n                                    ...masterHistory,\r\n                                    dates: {\r\n                                        ...masterHistory.dates,\r\n                                        [date]: {\r\n                                            income: 0,\r\n                                            positions: [\r\n                                                info\r\n                                            ]\r\n                                        }\r\n                                    }\r\n\r\n                                }\r\n\r\n                            } else {\r\n                                masterHistory = {\r\n                                    ...masterHistory,\r\n                                    dates: {\r\n                                        ...masterHistory.dates,\r\n                                        [date]: {\r\n                                            ...masterHistory.dates[timelapse[index - 1]],\r\n                                            positions: [\r\n                                                ...masterHistory.dates[timelapse[index - 1]].positions,\r\n                                                info\r\n                                            ]\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n            if (!hasMadeOperationThatDate) {\r\n                //si no hemos operado copiaremos el contenido del dia anterior\r\n                //console.log(\"no operation that day\")\r\n                koko++\r\n                console.log(koko, \"recuento\")\r\n                const lastInfo = masterHistory.dates[timelapse[index - 1]]\r\n                console.log(lastInfo)\r\n                masterHistory = {\r\n                    ...masterHistory,\r\n                    dates: {\r\n                        ...masterHistory.dates,\r\n                        [date]: lastInfo\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        console.log(masterHistory, \"aveeer nena\")\r\n        cb(masterHistory)\r\n    }\r\n//solo se recalcularan las series cuando el ususario haya echo una nueva operacion y o cuando haya entrado en portolio dashboard\r\n    usePortfolioGenerator()\r\n    useEffect(() => {\r\n        if (state.userActivity.length > 0 && Object.keys(state.portfolioHistory).length > 0) {\r\n            generateSerieFromBegining(state.userActivity, (generatedSerie) => { dispatch({ type: \"STORE_GENERATED_SERIES\", payload: generatedSerie }) })\r\n        }\r\n    }, [state.userActivity, state.portfolioHistory])\r\n\r\n   \r\n}\r\n\r\n\r\n\r\n//console.log(createTimelaspse(), \"yea\")\r\n\r\n\r\n\r\n\r\n//makeIt()\r\n//console.log(findFirstDate(), \"aqui\")","C:\\Users\\gonza\\finance-app\\src\\dashboard\\PerformanceStructureB.js",["597","598","599","600"],"import React, { useEffect, useState, useRef } from 'react'\r\nimport Highcharts from \"highcharts/highstock\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport { useDataLayer } from '../Context';\r\nimport { convertHumanToUnixInit, convertUnixToHuman, milisencondsInADay } from '../utils/datesUtils';\r\nimport { Paper } from '@material-ui/core';\r\n\r\n\r\nexport const PerformanceStructureB = () => {\r\n    const { state } = useDataLayer()\r\n    const {areGeneratedSeriesReady} = state\r\n    const [chartData, setChartData] = useState()\r\n    const prepareDataset = () => {\r\n        let readyData = {}\r\n        Object.keys(state.companiesImpact).forEach(date => {\r\n            state.companiesImpact[date].forEach(asset => {\r\n                if(readyData[asset.ticker] === undefined){\r\n                    readyData = {\r\n                        ...readyData,\r\n                        [asset.ticker]: []\r\n                    }\r\n                }\r\n                const unixDate = convertHumanToUnixInit(date)\r\n                //we are clasifying \"other\" as a ticker/category\r\n                const isThereAndRelevant = state.companiesImpact[date].find(item => item.ticker === asset.ticker)\r\n                if (isThereAndRelevant) {\r\n                    readyData[asset.ticker] = [\r\n                        ...readyData[asset.ticker],\r\n                        [unixDate, isThereAndRelevant.performance]\r\n                    ]\r\n                }\r\n\r\n            })\r\n        })\r\n        console.log(readyData, \"ruuudi\")\r\n        if(readyData.other.length > 0){\r\n            //if sum of all others is less than absolute 0.1 we won't show category other for that date neither\r\n            readyData.other = readyData.other.filter(item=>Math.abs(item[1]) > 0.1)\r\n        }\r\n        return readyData\r\n    }\r\n    const prepareForChart = (data, cb) => {\r\n        let readySeries = []\r\n        Object.entries(data).forEach(assetData => {\r\n            const ticker = assetData[0]\r\n            const data = assetData[1]\r\n            readySeries = [...readySeries,\r\n            {\r\n                type: \"column\",\r\n                name: ticker,\r\n                data\r\n            }\r\n            ]\r\n        })\r\n        cb(readySeries)\r\n    }\r\n    useEffect(() => {\r\n        if (state.companiesImpact && areGeneratedSeriesReady) {\r\n            const data = prepareDataset()\r\n            prepareForChart(data, (result)=>{\r\n                setChartData(result)\r\n            })\r\n\r\n        }\r\n    }, [state.companiesImpact, areGeneratedSeriesReady])\r\n\r\n    const chartOptions = {\r\n        chart: {\r\n            type: \"column\",\r\n            alignTicks: false,\r\n        },\r\n\r\n        // rangeSelector: {\r\n        //     selected: 1\r\n        // },\r\n\r\n        title: {\r\n            text: 'AAPL Stock Volume'\r\n        },\r\n        plotOptions: {\r\n            column: {\r\n                stacking: \"normal\"\r\n                // centerInCategory: true,\r\n            },\r\n            series: {\r\n                dataGrouping: {\r\n                    approximation: \"average\",\r\n                    units: [[\r\n                        'week', // unit name\r\n                        [1] // allowed multiples\r\n                    ], [\r\n                        'month',\r\n                        [1, 2, 3, 4, 6]\r\n                    ]]\r\n                },\r\n            }\r\n        },\r\n        //poner esto crea bugs \r\n        // xAxis: {\r\n        //     categories: dataReady && dataReady.map(item => item.name)\r\n        // },\r\n        series: chartData\r\n\r\n    }\r\n    return (\r\n        <Paper>\r\n          { chartData &&  <HighchartsReact\r\n                highcharts={Highcharts}\r\n                options={chartOptions}\r\n                constructorType={\"stockChart\"}\r\n            />}\r\n        </Paper>\r\n    )\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\utils\\datesUtils.js",[],"C:\\Users\\gonza\\finance-app\\src\\views\\indexes\\Nasdaq.js",[],"C:\\Users\\gonza\\finance-app\\src\\components\\components\\CustomCircularProgress.js",[],"C:\\Users\\gonza\\finance-app\\src\\views\\principal\\elements\\TickerBar2.js",[],"C:\\Users\\gonza\\finance-app\\src\\utils\\useChartReflow.js",["601","602","603"],"C:\\Users\\gonza\\finance-app\\src\\portfolio\\Engine.js",["604","605","606","607","608","609","610"],"C:\\Users\\gonza\\finance-app\\src\\views\\covid\\CovidSection2.js",["611","612","613","614","615","616","617"],"C:\\Users\\gonza\\finance-app\\src\\components\\Multioption.js",["618","619","620"],"import { Chip, ClickAwayListener, FormControl, Input, InputLabel, makeStyles, MenuItem, Select, useTheme } from '@material-ui/core'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport DoneIcon from '@material-ui/icons/Done';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n        maxWidth: 300,\r\n    },\r\n    chips: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    chip: {\r\n        margin: 2,\r\n    },\r\n    noLabel: {\r\n        marginTop: theme.spacing(3),\r\n    },\r\n}));\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n    PaperProps: {\r\n        style: {\r\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n            width: 250,\r\n        },\r\n    },\r\n};\r\n\r\n\r\nexport const Multioption = ({ fields, setChosenFields, chosenFields }) => {\r\n    const [selections, setSelections] = useState(chosenFields)\r\n    const classes = useStyles()\r\n    const multiselector = useRef(null)\r\n    const theme = useTheme()\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    useEffect(()=>{\r\n        const closeMultiselector =(e)=>{\r\n            if(!multiselector.current.contains(e.target)){\r\n                setIsOpen(false)\r\n            }\r\n        }\r\n        window.addEventListener(\"click\", closeMultiselector)\r\n        return ()=>{\r\n            window.removeEventListener(\"click\", closeMultiselector)\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        setChosenFields(selections)\r\n    }, [selections])\r\n\r\n    const handleChipDelete =(val)=>{\r\n        setSelections(prev=>prev.filter(item=>item!==val))\r\n    }\r\n\r\n    return (\r\n        \r\n        <FormControl className={classes.formControl}\r\n        ref={multiselector}\r\n        >\r\n            <InputLabel id=\"demo-mutiple-chip-label\">Chip</InputLabel>\r\n            \r\n            <Select\r\n                labelId=\"demo-mutiple-chip-label\"\r\n                id=\"demo-mutiple-chip\"\r\n                open={isOpen}\r\n                onClick={(e)=>{ !isOpen && setIsOpen(true)}}\r\n                multiple\r\n                value={selections}\r\n                onChange={(e) => { setSelections(e.target.value) }}\r\n                input={<Input id=\"select-multiple-chip\" />}\r\n                renderValue={(selected) => (\r\n                    <div className={classes.chips}>\r\n                        {selected.map((value) => (\r\n                            <Chip\r\n                                key={value}\r\n                                label={value}\r\n                                className={classes.chip}\r\n                                clickable\r\n                                onDelete={()=>{handleChipDelete(value)}}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                )}\r\n                MenuProps={MenuProps}\r\n            >\r\n                {Object.keys(fields).map((name) => (\r\n                    <MenuItem key={name} value={name} style={getStyles(name, fields, theme)}>\r\n                        {name}\r\n                    </MenuItem>\r\n                ))}\r\n            </Select>\r\n        </FormControl>\r\n            \r\n   \r\n    )\r\n}\r\n\r\nfunction getStyles(name, fields, theme) {\r\n    return {\r\n        fontWeight:\r\n            Object.keys(fields).indexOf(name) === -1\r\n                ? theme.typography.fontWeightRegular\r\n                : theme.typography.fontWeightMedium,\r\n    };\r\n}","C:\\Users\\gonza\\finance-app\\src\\dashboard\\LateralSection.js",[],"C:\\Users\\gonza\\finance-app\\src\\dashboard\\StockDispatcher.js",["621","622","623"],"import React, { useEffect, useState } from 'react'\r\nimport { CustomAreaChart } from '../charts/CustomAreaChart'\r\nimport { useDataLayer } from '../Context'\r\nimport { convertHumanToUnix } from '../utils/datesUtils'\r\n\r\nexport const StockDispatcher = ({ ticker }) => {\r\n\r\n    const { state, dispatch } = useDataLayer()\r\n    const [datos, setDatos] = useState(\"\")\r\n\r\n    const prepareDataRange = (data) => {\r\n        const readyData = data.map(register => {\r\n            //    console.log(register, \"que conxuu\")\r\n            return [register[0], register[1]]\r\n        })\r\n        //ojo con esto, \r\n        // dispatch({\r\n        //     type: \"STORE_GENERAL_DATA\", payload: {\r\n        //         field: \"prices\",\r\n        //         ticker,\r\n        //         value: readyData\r\n        //     }\r\n        // })\r\n        setDatos(readyData)\r\n    }\r\n\r\n    useEffect(() => {\r\n        const companyHistorical = state.portfolioHistoryByCompany[ticker]\r\n        if (companyHistorical) {\r\n            prepareDataRange(companyHistorical)\r\n        }\r\n    }, [])\r\n\r\n    console.log(datos, \"los putos datos\")\r\n    return (\r\n        <>\r\n            {datos &&\r\n                <CustomAreaChart\r\n                    ticker={ticker}\r\n                    {...{ datos }}\r\n                />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n// const prepareDataRange = (data) => {\r\n//     console.log(\"maricoona\")\r\n//     let start = false\r\n//     let finish = false\r\n//     let readyData = []\r\n//     Object.keys(data).forEach((date, index) => {\r\n//         if (ticker === \"TEF\") {\r\n//             console.log(date, \"puto indice\")\r\n//         }\r\n//         if (date === startDate) {\r\n//             start = true\r\n//             if (ticker === \"TEF\") {\r\n//                 console.log(ticker, \"start\", start, finish, readyData, date)\r\n//             }\r\n//         }\r\n//         if (date === endDate && start === true) {\r\n//             finish = true\r\n//             if (ticker === \"TEF\") {\r\n//                 console.log(ticker, \"start\", start, finish, readyData, date)\r\n//             }\r\n//         }\r\n//         if (start && !finish) {\r\n//             const dateInfoStock = data[date][ticker]\r\n//             readyData = [...readyData,\r\n//             [convertHumanToUnix(date),\r\n//             dateInfoStock.close]\r\n//             ]\r\n//         }\r\n//     })\r\n//     dispatch({\r\n//         type: \"STORE_GENERAL_DATA\", payload: {\r\n//             field: \"prices\",\r\n//             ticker,\r\n//             value: readyData\r\n//         }\r\n//     })\r\n//     setDatos(readyData)\r\n// }","C:\\Users\\gonza\\finance-app\\src\\portfolio\\StockShop.js",["624","625","626","627"],"C:\\Users\\gonza\\finance-app\\src\\views\\company\\PeersSquare.js",["628","629","630","631","632","633","634","635"],"import { arrayMin } from 'highcharts'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { CustomCircularProgress } from '../../components/components/CustomCircularProgress'\r\nimport { useDataLayer } from '../../Context'\r\nimport { PeerCarousel } from './PeerCarousel'\r\n\r\nexport const PeersSquare = ({ ticker }) => {\r\n\r\n    //const {datos, loading, error} = useFetch()\r\n    const [{ peerTickers, fetching, error }, setPeerTickers] = useState({ peerTickers: \"\", fetching: false, error: \"\" })\r\n    const [{ peersData, pfetching, perror }, setPeersData] = useState({ peersData: \"\", pfetching: false, perror: \"\" })\r\n\r\n    const { state, dispatch } = useDataLayer()\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchPeers = async () => {\r\n            try {\r\n                setPeerTickers(prev => ({ ...prev, fetching: true }))\r\n                const rawData = await fetch(`https://finnhub.io/api/v1/stock/peers?symbol=${ticker}&token=btm6dp748v6ud360stcg`)\r\n                const data = await rawData.json()\r\n                if (data) {\r\n                    setPeerTickers(prev => ({ ...prev, fetching: false, peerTickers: data }))\r\n                }\r\n                else {\r\n                    throw new Error(\"no peers found\")\r\n                }\r\n            }\r\n            catch (err) {\r\n                setPeerTickers(prev => ({ ...prev, fetching: false, error: err.message }))\r\n                console.log(err.message)\r\n            }\r\n        }\r\n        console.log(state.peers[ticker], \"que cojoness\")\r\n        if (!state.peers[ticker]) {\r\n            fetchPeers()\r\n        } else {\r\n            setPeersData(state.peers[ticker])\r\n        }\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        //this will only run if is the first time, to fetch all ticker info\r\n        if (peerTickers && !state.peers[ticker]) {\r\n            const promiseArr = peerTickers.slice(1, 4).map(async ticker => {\r\n                try {\r\n                    const rawData = await fetch(`https://financialmodelingprep.com/api/v3/quote/${ticker}?apikey=651d720ba0c42b094186aa9906e307b4`)\r\n                    return await rawData.json()\r\n                }\r\n                catch (err) {\r\n                    return [\"error\", err.message]\r\n                }\r\n            })\r\n            const fetchAllPeers = async () => {\r\n                setPeersData(prev=>({...prev, pfetching: true}))\r\n                const dota = await Promise.all(promiseArr)\r\n                console.log(dota, \"zorra\")\r\n                const cleanData = dota.filter(item => item.length !== 0)\r\n                let peersCombined = []\r\n                cleanData.forEach(item => {\r\n                    if (Array.isArray(item)) {\r\n                        const peer = item[0]\r\n                        peersCombined = [...peersCombined, peer]\r\n                    }\r\n                })\r\n                setPeersData(prev=>({...prev, loading: false, peersData: peersCombined}))\r\n                dispatch({ type: \"STORE_DATA\", payload: { ticker, field: \"peers\", value: peersCombined } })\r\n            }\r\n            fetchAllPeers()\r\n        }\r\n        //else we don't need to do anything else, we alry have all info\r\n    }, [peerTickers])\r\n\r\n    return (\r\n        <>\r\n            {/* {fetching && <CustomCircularProgress />}\r\n            {peerTickers && JSON.stringify(peerTickers, null, 2)} */}\r\n           {\r\n            peersData &&\r\n           <PeerCarousel peersData={peersData} />}\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\views\\principal\\principal.js",["636","637","638","639"],"C:\\Users\\gonza\\finance-app\\src\\utils\\numFormatter.js",[],"C:\\Users\\gonza\\finance-app\\src\\views\\company\\KeyMetrics.js",["640","641","642","643","644","645","646","647"],"import { Chip, List, ListItem, ListItemText } from '@material-ui/core'\r\nimport React, { useEffect, useState, useRef } from 'react'\r\nimport { useDataLayer } from \"../../Context\"\r\nimport { camelCasePipe } from '../../utils/Pipes'\r\n\r\nexport const KeyMetrics = ({ ticker, setListHeight }) => {\r\n\r\n    const { state , dispatch} = useDataLayer()\r\n    const listo = useRef(null)\r\n    const url = \"https://www.alphavantage.co/query?function=OVERVIEW\";\r\n  \r\n  const apiKey = \"btm6dp748v6ud360stcg\";\r\n  const [data, setData] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        console.log(\"vas\")\r\n        //we need to check what happends if we pass undefined,\r\n        if(!state.keymetrics[ticker] || !state.keymetrics[ticker] === undefined){\r\n          console.log(\"que coño\", state.keymetrics[ticker])\r\n          setLoading(true);\r\n          fetch(`${url}&symbol=${ticker}&apikey=${apiKey}`)\r\n            .then((data) => data.json())\r\n            .then((data) => {\r\n              setLoading(false);\r\n              setData(data);\r\n            })\r\n            .catch((err) => {\r\n              setError(err.message);\r\n            });\r\n        }else{\r\n          setData(state.keymetrics[ticker])\r\n        }\r\n      }, [state]);\r\n      useEffect(() => {\r\n        if(!state.keymetrics[ticker]){\r\n          data && dispatch({type: \"STORE_DATA\", payload: {ticker: ticker, field: \"keymetrics\", value: data}})\r\n        }\r\n      }, [data])\r\n\r\n    useEffect(() => {\r\n        if (listo.current && Object.keys(data).length > 0) {\r\n            //console.log(listo.current.offsetHeight, \"hhhhhight\")\r\n            setListHeight(listo.current.offsetHeight)\r\n        }\r\n    }, [data])\r\n   \r\n    return (\r\n        <ul className=\"list-modelo\" ref={listo}>\r\n            {Object.keys(data).length > 0 &&\r\n                Object.keys(data).map(field => {\r\n                    if (field.toLowerCase() === \"description\") {\r\n                        return null\r\n                    }\r\n                    return (<li>\r\n                        <Chip label={camelCasePipe(field)} size=\"small\" />\r\n                        <p style={{ marginLeft: \"auto\" }}>{data[field]}</p>\r\n                    </li>)\r\n                }\r\n                )\r\n            }\r\n        </ul>\r\n    )\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\views\\indexes\\Constituents.js",["648","649","650"],"import { Table, TableBody, TableCell, TableHead, TableRow } from \"@material-ui/core\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { CustomCircularProgress } from \"../../components/components/CustomCircularProgress\";\r\nimport { useDataLayer } from \"../../Context\";\r\nimport { useFatch } from \"../../utils/useFatch\";\r\n\r\nexport const Constituents = ({ category, categorySan }) => {\r\n\r\n    const { state, dispatch } = useDataLayer()\r\n    const subCategory = \"constituents\"\r\n    const url = `https://finnhub.io/api/v1/index/constituents?symbol=${categorySan[1]}&token=btm6dp748v6ud360stcg`\r\n    const options = { explicitUrl: true }\r\n    const debounce = useRef(false)\r\n    const { datos, loading, error } = useFatch(url, subCategory, category, options)\r\n    const readyTickers = useRef({})\r\n    const [constituents, setConstituents] = useState(\"\")\r\n    // const functionPromise =(ticker)=>{\r\n    //     return (fetch(`https://finnhub.io/api/v1/quote?symbol=${ticker}&token=btm6dp748v6ud360stcg`)\r\n    //     .then(res=>res.json())\r\n    //     .then(res=>{readyTickers.current[ticker]=res})\r\n    //     .catch(err=>err.message))\r\n    // }\r\n    // useEffect(()=>{\r\n    //     const fetchAllIndexConstituents =async(arr)=>{\r\n    //         return await Promise.all(arr.map(ticker=>functionPromise(ticker)))\r\n    //     }\r\n    //     if(state.indexes[category] && state.indexes[category][subCategory]){\r\n    //         const constituentsArr = state.indexes[category][subCategory]\r\n    //         console.log(constituentsArr, \"gogol\")\r\n    //        const dataFinal = fetchAllIndexConstituents(constituentsArr.constituents)\r\n    //        console.log(dataFinal, \"gogo\")\r\n    //     }\r\n    // },[state.indexes])\r\n\r\n    useEffect(() => {\r\n        fetch(\"http://localhost:8001/prueba\")\r\n            .then(res => res.json())\r\n            .then(res => { console.log(res) })\r\n            .catch(err => err.message)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        console.log(\"executed\", category)\r\n        if (state.indexes[category] && state.indexes[category][subCategory]) {\r\n            console.log(state.indexes[category][subCategory], \"pota\")\r\n            fetch(`http://localhost:8001/indexes/constituents/${category}`, {\r\n                body: JSON.stringify({ ticker: state.indexes[category][subCategory].constituents }),\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => { setConstituents(res.data) })\r\n                .catch(err => { console.log(err.message) })\r\n            // .then(res=>{res.json()})\r\n            // .then(res=>{setConstituents(res )})\r\n        }\r\n    }, [state.indexes, category, debounce])\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            {loading && <CustomCircularProgress />}\r\n            {error && <p>{error}</p>}\r\n            {/* {datos.constituents && datos.constituents.length > 0 && datos.constituents.map(item => <p>{JSON.stringify(item, null, 2)}</p>)} */}\r\n            { constituents && (<Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                       <TableCell>ticker</TableCell>\r\n                       <TableCell>open</TableCell>\r\n                       <TableCell>close</TableCell>\r\n                       <TableCell>high</TableCell>\r\n                       <TableCell>low</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {constituents.map(item => <TableRow>\r\n                        <TableCell>{item.ticker}</TableCell>\r\n                        <TableCell>{item.open}</TableCell>\r\n                        <TableCell>{item.close}</TableCell>\r\n                        <TableCell>{item.high}</TableCell>\r\n                        <TableCell>{item.low}</TableCell>\r\n                    </TableRow>)}\r\n                </TableBody>\r\n            </Table>)\r\n            }\r\n            {/* {constituents && constituents.map(item => <ul>{Object.keys(item).map(fieldname => <li>{item[fieldname]}</li>)}</ul>)} */}\r\n        </>\r\n    )\r\n\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\views\\company\\Rows.js",["651","652","653","654"],"import {\r\n    Collapse,\r\n    IconButton,\r\n    makeStyles,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    withStyles,\r\n} from \"@material-ui/core\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport { formatter } from \"../../utils/numFormatter\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    root: {\r\n        background: \"white\",\r\n        borderRadius: \"10px\",\r\n        margin: \"0 auto\",\r\n        width: \"100%\",\r\n        // [theme.breakpoints.up(\"sm\")]: {\r\n        //     width: \"700px\"\r\n        // },\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            width: \"1000px\"\r\n        },\r\n        [theme.breakpoints.up(\"lg\")]: {\r\n            width: \"1250px\"\r\n        }\r\n    },\r\n    tableConatiner: {\r\n\r\n    },\r\n\r\n    iconButton: {\r\n        padding: 0\r\n    },\r\n\r\n    cell: {\r\n        borderBottom: \"none\"\r\n    },\r\n    sectionTitleCell: {\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            // paddingLeft: 0, paddingRight: 0\r\n        },\r\n        [theme.breakpoints.up(\"lg\")]: {\r\n\r\n            // paddingLeft: 0, paddingRight: \"35px\"\r\n        }\r\n    },\r\n    subtitles: {\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            // maxWidth: \"130px\"\r\n        },\r\n        [theme.breakpoints.up(\"lg\")]: {\r\n            // maxWidth: \"none\",\r\n            // width: \"200px\"\r\n        },\r\n        // maxWidth: \"none\"\r\n    }\r\n}))\r\n\r\n\r\nconst TableCellSmall = withStyles({\r\n    root: {\r\n        transform: \"translateX(1.5rem)\",\r\n        // whiteSpace: \"nowrap\"\r\n    }\r\n})(TableCell)\r\nconst TableCellXSmall = withStyles({\r\n    root: {\r\n        transform: \"translateX(3rem)\",\r\n        // whiteSpace: \"nowrap\"\r\n    }\r\n})(TableCell)\r\n\r\nconst makeShortInt = (item) => formatter.format(parseInt(item) / 1000000).replace(\".00\", \"\")\r\nexport const TableSectionChunk = ({ title, data, lookupKey, open, setOpen }) => {\r\n    const classes = useStyles()\r\n    console.log(data, \"la datona\")\r\n    return (\r\n        <TableRow\r\n        >\r\n            <TableCell\r\n            style={{padding: \"0.5rem\", width: \"40px\", textAlign: \"center\"}}\r\n            >\r\n                <IconButton\r\n                    classes={{ root: classes.iconButton }}\r\n                    onClick={() => { setOpen(prev => !prev) }}\r\n                >\r\n                    {open ? <KeyboardArrowDownIcon /> : <KeyboardArrowUpIcon />}\r\n                </IconButton>\r\n            </TableCell>\r\n            <TableCell\r\n                classes={{ root: classes.sectionTitleCell }}\r\n                colSpan={2}\r\n                >\r\n                <p\r\n                //style={{width: \"120px\"}}\r\n                \r\n                >{title}</p></TableCell>\r\n            {data && Object.keys(data[lookupKey]).map(date =>\r\n                <TableCell\r\n                    align=\"right\"\r\n                >\r\n                    {makeShortInt(data[lookupKey][date])}</TableCell>)\r\n            }\r\n        </TableRow>\r\n    )\r\n}\r\nexport const TableSubtitleChunk = ({ title, data, lookupKey, hackWidth }) => {\r\n    const classes = useStyles()\r\n    return (\r\n        <TableRow\r\n        >\r\n            <TableCell\r\n                classes={{ root: classes.cell }}\r\n                style={{padding: \"0.5rem\", width: \"40px\", textAlign: \"center\"}}\r\n            >\r\n                <IconButton\r\n                    classes={{ root: classes.iconButton }}\r\n                    style={{ visibility: \"hidden\" }}\r\n                >\r\n                    <KeyboardArrowUpIcon />\r\n                </IconButton>\r\n            </TableCell>\r\n            <TableCellSmall\r\n                classes={{ root: classes.cell }}\r\n                colSpan={2}>\r\n                <p\r\n                    className={classes.subtitles}\r\n                >{title}</p>\r\n            </TableCellSmall>\r\n            {data && Object.keys(data[lookupKey]).map(date =>\r\n                <TableCell\r\n                    align=\"right\"\r\n                    style={{ width: hackWidth + \"px\" }}\r\n                    classes={{ root: classes.cell }}\r\n                >{makeShortInt(data[lookupKey][date])}</TableCell>)\r\n            }\r\n        </TableRow>\r\n    )\r\n}\r\nexport const TableSubSubtitleChunk = ({ title, data, lookupKey, hackWidth }) => {\r\n    const classes = useStyles()\r\n    return (\r\n        <TableRow\r\n        >\r\n            <TableCell\r\n                classes={{ root: classes.cell }}\r\n                \r\n            >\r\n                <IconButton\r\n                    classes={{ root: classes.iconButton }}\r\n                    style={{ visibility: \"hidden\" }}\r\n                >\r\n                    <KeyboardArrowUpIcon />\r\n                </IconButton>\r\n            </TableCell>\r\n            <TableCellXSmall\r\n                classes={{ root: classes.cell }}\r\n\r\n                colSpan={2}>\r\n                <p\r\n                    className={classes.subtitles}\r\n                >{title}</p>\r\n            </TableCellXSmall>\r\n            {data && Object.keys(data[lookupKey]).map(date =>\r\n                <TableCell\r\n                    align=\"right\"\r\n                    classes={{ root: classes.cell }}\r\n                    style={{ width: hackWidth + \"px\" }}\r\n                >{makeShortInt(data[lookupKey][date])}</TableCell>)\r\n            }\r\n        </TableRow>\r\n    )\r\n}\r\n\r\nexport const Collapsible = ({ children, renderTitleSection }) => {\r\n    const [open, setOpen] = useState(false)\r\n    return (\r\n        <TableBody>\r\n            {renderTitleSection(open, setOpen)}\r\n            <TableRow\r\n            //  style={{...defaultStyles, ...transitionStyles[state]}}\r\n            >\r\n                <TableCell colSpan={8} className=\"nested-cell\">\r\n                    <Collapse\r\n                        in={open}\r\n                        mountOnEnter\r\n                        timeout=\"auto\"\r\n                        unmountOnExit\r\n                    >\r\n                        <Table >\r\n                            <TableBody>\r\n                                {children}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </Collapse>\r\n                </TableCell>\r\n            </TableRow>\r\n        </TableBody>\r\n    )\r\n}\r\n\r\nexport const TableSectionAlone = ({ title, data, lookupKey }) => {\r\n    const classes = useStyles()\r\n    return (\r\n        <TableRow\r\n        >\r\n            <TableCell>\r\n                <IconButton\r\n                    classes={{ root: classes.iconButton }}\r\n                    style={{ visibility: \"hidden\" }}\r\n                >\r\n                    {<KeyboardArrowDownIcon />}\r\n                </IconButton>\r\n            </TableCell>\r\n            <TableCell\r\n                classes={{ root: classes.sectionTitleCell }}\r\n                colSpan={2}\r\n               >\r\n                <p\r\n                //style={{width: \"120px\"}}\r\n                >{title}</p></TableCell>\r\n            {data && Object.keys(data[lookupKey]).map(date =>\r\n                <TableCell\r\n                    align=\"right\"\r\n                >\r\n                    {makeShortInt(data[lookupKey][date])}</TableCell>)\r\n            }\r\n        </TableRow>\r\n    )\r\n}","C:\\Users\\gonza\\finance-app\\src\\ContextUI.js",["655"],"import React, { createContext, useContext, useState, } from 'react'\r\nconst Context = createContext()\r\n\r\nconst UiReducer = (state, action) => {\r\n    switch (action) {\r\n        case \"CLOSE_SIDEBAR\":\r\n            return {\r\n                ...state,\r\n                sidebarOpen: false\r\n            }\r\n        case \"OPEN_SIDEBAR\":\r\n            return {\r\n                ...state,\r\n                sidebarOpen: false\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const UIProvider = ({ children }) => {\r\n\r\n    const [sidebarOpen, setSidebarOpen] = useState(false)\r\n    const [showOverlay, setShowOverlay] = useState(false)\r\n    const [tickerMove, setTickerMove] = useState(true)\r\n    const [mountApproval, setMountApproval] = useState(true)\r\n\r\n    return (\r\n        <Context.Provider value={{\r\n            sidebarOpen,\r\n            setSidebarOpen,\r\n            showOverlay,\r\n            setShowOverlay,\r\n            tickerMove,\r\n            setTickerMove,\r\n            mountApproval,\r\n            setMountApproval\r\n        }}>\r\n            {children}\r\n        </Context.Provider>\r\n    )\r\n}\r\n\r\nexport const useUILayer = () => useContext(Context)\r\n// useReducer(UiReducer, {sidebarOpen: false}","C:\\Users\\gonza\\finance-app\\src\\utils\\useViewport.js",["656"],"import React, { useEffect, useState } from 'react'\r\n\r\nexport const useViewport = () => {\r\n    const [viewport, setViewport] = useState(window.innerWidth)\r\n    const updateViewport = () => {\r\n        setViewport(window.innerWidth)\r\n    }\r\n    useEffect(() => {\r\n\r\n        window.addEventListener(\"resize\", updateViewport)\r\n        return () => {\r\n            window.removeEventListener(\"resize\", updateViewport)\r\n        }\r\n    }, [])\r\n    return { viewport }\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\views\\principal\\elements\\GainersCarousel.js",["657","658"],"C:\\Users\\gonza\\finance-app\\src\\views\\company\\CompanyChart.js",["659","660","661","662","663","664","665","666","667","668","669","670","671"],"import React, { useState, useEffect, useRef, useLayoutEffect } from \"react\";\r\nimport Highcharts from \"highcharts/highstock\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport { useFetch } from \"../../utils/useFetch\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { CircularProgress, LinearProgress, Paper, Typography } from \"@material-ui/core\";\r\nimport { TableUI } from \"./TableUI\";\r\nimport { KeyMetrics } from \"./KeyMetrics\";\r\nimport { useDataLayer } from \"../../Context\";\r\nimport { CustomCircularProgress } from \"../../components/components/CustomCircularProgress\";\r\n\r\n\r\nexport const CompanyChart = React.forwardRef(({ ticker }, ref) => {\r\n    const url = \"http://localhost:8001/prices\";\r\n\r\n    const AdjustedPrices = useRef(null);\r\n    const notAdjustedPrices = useRef(null);\r\n    const { state, dispatch } = useDataLayer()\r\n    //we dont inicialize chart till data is ready because highchart is soo unreliable with updates\r\n    const [dataset, setDataset] = useState(null);\r\n    const [isBuilding, setIsBuilding] = useState(false)\r\n\r\n    const hookOptions = {\r\n        explicitUrl: false\r\n    }\r\n    const { datos, loading, error } = useFetch(url, ticker, \"prices\", hookOptions);\r\n\r\n\r\n    console.log(datos, \"rerenderr\")\r\n    const num = useRef(0)\r\n    num.current = num.current++\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (datos.data && datos.data.length > 0) {\r\n            setIsBuilding(true)\r\n            if (typeof datos.data[0].date === \"string\") {\r\n\r\n                const cleanData = datos.data.map((item) => {\r\n\r\n                    const date = item.date.split(\"T\")[0];\r\n                    const actualDate = date.split(\"-\").map((val) => parseInt(val));\r\n                    const formatedDate = new Date(\r\n                        actualDate[0],\r\n                        actualDate[1],\r\n                        actualDate[2]\r\n                    );\r\n                    item.date = formatedDate.getTime();\r\n\r\n                    return item;\r\n                });\r\n                prepareData(cleanData);\r\n            } else {\r\n                //los datos ya nos vienen limpios del useFetch\r\n                console.log(\"ready\")\r\n                prepareData(datos.data)\r\n            }\r\n        }\r\n    }, [datos]);\r\n\r\n    const prepareData = (data) => {\r\n        console.log(\"hola\");\r\n        let ohl = [];\r\n        let ohlNA = [];\r\n        let volume = [];\r\n        data.forEach((record) => {\r\n            let cleanRecord = [\r\n                record[\"date\"],\r\n                record[\"adjClose\"],\r\n                record[\"adjHigh\"],\r\n                record[\"adjLow\"],\r\n                record[\"adjOpen\"],\r\n            ];\r\n            let cleanRecordNoAdjusted = [\r\n                record.date,\r\n                record.close,\r\n                record.high,\r\n                record.low,\r\n                record.open,\r\n            ];\r\n\r\n            ohl = [...ohl, cleanRecord];\r\n            ohlNA = [...ohlNA, cleanRecordNoAdjusted];\r\n        });\r\n        console.log(\"ooooohl\", ohl);\r\n\r\n        setDataset(ohl);\r\n\r\n        AdjustedPrices.current = ohl;\r\n        //need to add them into localStorage\r\n        notAdjustedPrices.current = ohlNA;\r\n    };\r\n    console.log(ref.current, \"chaaart\")\r\n\r\n    const options = {\r\n        chart: {\r\n            zoomType: \"x\",\r\n            events: {\r\n                selection: function (e) {\r\n                    e && console.log(e);\r\n                },\r\n                load: function () {\r\n                    ref.current = this\r\n                }\r\n                // load: function(){\r\n                //   setIsBuilding(false)\r\n                // }\r\n            },\r\n            //width,\r\n            id: \"chart-stock\",\r\n            animation: {\r\n                duration: 225,\r\n            },\r\n        },\r\n        plotOptions: {\r\n            candlestick: {\r\n                color: \"red\",\r\n                upColor: \"rgb(22,177,87)\",\r\n                lineColor: \"red\",\r\n                upLineColor: \"rgb(22,177,87)\",\r\n                pointPadding: 0.02,\r\n            },\r\n        },\r\n\r\n        title: {\r\n            text: \"My chart\",\r\n            zoomType: \"x\",\r\n        },\r\n        rangeSelector: {\r\n            allButtonsEnabled: true,\r\n        },\r\n        navigator: {},\r\n        series: [\r\n            {\r\n                type: \"candlestick\",\r\n                data: dataset,\r\n                dataGrouping: {\r\n                    units: [\r\n                        [\"day\", [1, 2, 3, 4, 5, 8, 16]],\r\n                        [\"week\", [1, 2, 3, 4]],\r\n                        [\"month\", [1, 2, 3, 4, 6]],\r\n                    ],\r\n                    smoothed: true,\r\n                },\r\n                // showInNavigator: true,\r\n            },\r\n        ],\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            {loading && <CustomCircularProgress />}\r\n            {loading && \"loading...\"}\r\n            {\r\n                dataset &&\r\n                <HighchartsReact\r\n                    highcharts={Highcharts}\r\n                    options={options}\r\n                    constructorType={\"stockChart\"}\r\n\r\n                />}\r\n            <button\r\n                onClick={() => {\r\n                    setDataset(notAdjustedPrices.current);\r\n                }}\r\n            >\r\n                Not adjusted prices\r\n      </button>\r\n            <button\r\n                onClick={() => {\r\n                    setDataset(AdjustedPrices.current);\r\n                }}\r\n            >\r\n                adjusted prices\r\n      </button>\r\n            <button >See income</button>\r\n        </>\r\n    )\r\n}) ","C:\\Users\\gonza\\finance-app\\src\\views\\company\\FinancialStatements\\IncomeStatement.js",["672","673","674","675","676"],"C:\\Users\\gonza\\finance-app\\src\\views\\company\\FinancialStatements\\TableUI2.js",["677","678","679","680","681","682","683"],"import {\r\n    Collapse,\r\n    IconButton,\r\n    makeStyles,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    withStyles,\r\n} from \"@material-ui/core\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { Collapsible, TableSectionAlone, TableSectionChunk, TableSubSubtitleChunk , TableSubtitleChunk } from \"../Rows\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    root: {\r\n        background: \"white\",\r\n        borderRadius: \"10px\",\r\n        margin: \"0 auto\",\r\n        width: \"650px\",\r\n        // [theme.breakpoints.up(\"sm\")]: {\r\n        //     width: \"700px\"\r\n        // },\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            width: \"1000px\"\r\n        },\r\n        [theme.breakpoints.up(\"lg\")]: {\r\n            width: \"1250px\"\r\n        }\r\n    },\r\n    // tableConatiner: {\r\n\r\n    // },\r\n\r\n    // iconButton: {\r\n    //     padding: 0\r\n    // },\r\n\r\n    // cell: {\r\n    //     borderBottom: \"none\"\r\n    // },\r\n    // sectionTitleCell: {\r\n    //     [theme.breakpoints.up(\"md\")]: {\r\n    //         paddingLeft: 0, paddingRight: 0\r\n    //     },\r\n    //     [theme.breakpoints.up(\"lg\")]: {\r\n\r\n    //         paddingLeft: 0, paddingRight: \"35px\"\r\n    //     }\r\n    // },\r\n    // subtitles: {\r\n    //     [theme.breakpoints.up(\"md\")]: {\r\n    //         maxWidth: \"130px\"\r\n    //     },\r\n    //     [theme.breakpoints.up(\"lg\")]: {\r\n    //         maxWidth: \"none\",\r\n    //         width: \"200px\"\r\n    //     },\r\n    //     maxWidth: \"none\"\r\n    // }\r\n}))\r\n\r\nexport const TableUI2 = ({ anualdata, readyData }) => {\r\n    \r\n//lg const nestedHackWidth = 165\r\nconst nestedHackWidth = 128\r\n    //we need to loop each field, which is an object with the  values of 5 different years\r\n    const classes = useStyles()\r\n    return (\r\n        <TableContainer\r\n            classes={{\r\n                root: classes.root,\r\n            }}\r\n            \r\n        >\r\n            <Table className=\"statement-table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell colSpan={3} />\r\n                        {anualdata.current &&\r\n                            Object.keys(anualdata.current).map((year) => (\r\n                                <TableCell\r\n                                    align=\"right\"\r\n                                >{year}</TableCell>\r\n                            ))}\r\n                    </TableRow>\r\n                </TableHead>\r\n\r\n                {/* {readyData && Object.keys(readyData).map(item=>{\r\n               if(readyData)\r\n           }) } */}\r\n  \r\n                <Collapsible fieldName=\"assets\"\r\n                    renderTitleSection={\r\n                        (injectedOpen, setInjectedOpen) => <TableSectionChunk\r\n                            open={injectedOpen}\r\n                            setOpen={setInjectedOpen}\r\n                            title=\"Total Current Assets\"\r\n                            data={readyData}\r\n                            lookupKey=\"totalCurrentAssets\"\r\n                        />\r\n                    }>\r\n\r\n                    <TableSubtitleChunk hackWidth={nestedHackWidth} title=\"Cash and Short Term Investments\" lookupKey=\"cashAndShortTermInvestments\" data={readyData} />\r\n                    <TableSubSubtitleChunk hackWidth={nestedHackWidth} title=\"Cash\" lookupKey=\"cash\" data={readyData} />\r\n                    <TableSubSubtitleChunk hackWidth={nestedHackWidth} title=\"short Term Investments\" lookupKey=\"shortTermInvestments\" data={readyData} />\r\n                    <TableSubtitleChunk hackWidth={nestedHackWidth} title=\"net Receivables\" lookupKey=\"netReceivables\" data={readyData} />\r\n                    <TableSubtitleChunk hackWidth={nestedHackWidth} title=\"Total Inventory\" lookupKey=\"inventory\" data={readyData} />\r\n                </Collapsible>\r\n\r\n                <Collapsible fieldName=\"total assets\"\r\n                    renderTitleSection={(injectedOpen, setInjectedOpen) => <TableSectionChunk title=\"Total Assets\"\r\n                        open={injectedOpen}\r\n                        setOpen={setInjectedOpen}\r\n                        lookupKey=\"totalAssets\"\r\n                        data={readyData}\r\n                    />}\r\n                >\r\n\r\n                    <TableSubtitleChunk hackWidth={nestedHackWidth} title=\"Property / Plant / Equipment\" lookupKey=\"propertyPlantEquipment\" data={readyData}\r\n\r\n                    />\r\n                    <TableSubSubtitleChunk hackWidth={nestedHackWidth} title=\"Accumulated Depreciation\" lookupKey=\"accumulatedDepreciation\" data={readyData} />\r\n                    <TableSubtitleChunk hackWidth={nestedHackWidth} title=\"Goodwill\" lookupKey=\"goodwill\" data={readyData} />\r\n                    <TableSubtitleChunk hackWidth={nestedHackWidth} title=\"Intangibles\" lookupKey=\"intangibleAssets\" data={readyData} />\r\n                    <TableSubtitleChunk hackWidth={nestedHackWidth} title=\"Long Term Investments\" lookupKey=\"longTermInvestments\" data={readyData} />\r\n                    <TableSubtitleChunk hackWidth={nestedHackWidth} title=\"Other Assets\" lookupKey=\"otherAssets\" data={readyData} />\r\n                    <TableSubtitleChunk hackWidth={nestedHackWidth} title=\"Other Non Current Assets\" lookupKey=\"otherNonCurrrentAssets\" data={readyData} />\r\n                </Collapsible>\r\n                <Collapsible\r\n                    renderTitleSection={(injectedOpen, setInjectedOpen) => <TableSectionChunk title=\"Total Current Liabilities\"\r\n                        open={injectedOpen}\r\n                        setOpen={setInjectedOpen}\r\n                        lookupKey=\"totalCurrentLiabilities\"\r\n                        data={readyData}\r\n                    />}\r\n                >\r\n                    <TableSubtitleChunk hackWidth={nestedHackWidth} title=\"Accounts Payable\" lookupKey=\"accountsPayable\" data={readyData} />\r\n                    <TableSubSubtitleChunk hackWidth={nestedHackWidth} title=\"Current Long Term Debt\" lookupKey=\"currentLongTermDebt\" data={readyData} />\r\n                    <TableSubtitleChunk hackWidth={nestedHackWidth} title=\"Other Current Liabilities\" lookupKey=\"otherCurrentLiabilities\" data={readyData} />\r\n                </Collapsible>\r\n                <Collapsible\r\n                    renderTitleSection={(injectedOpen, setInjectedOpen) => <TableSectionChunk title=\"Total Non Current Liabilities\"\r\n                        open={injectedOpen}\r\n                        setOpen={setInjectedOpen}\r\n                        lookupKey=\"totalNonCurrentLiabilities\"\r\n                        data={readyData}\r\n                    />}\r\n                >\r\n                    <TableSubtitleChunk hackWidth={nestedHackWidth} title=\"Total Long Term Debt\" lookupKey=\"totalLongTermDebt\" data={readyData} />\r\n                    <TableSubSubtitleChunk hackWidth={nestedHackWidth} title=\"Long Term Debt\" lookupKey=\"longTermDebt\" data={readyData} />\r\n                    <TableSubSubtitleChunk hackWidth={nestedHackWidth} title=\"Other Non Current Liabilities\" lookupKey=\"otherNonCurrentLiabilities\" data={readyData} />\r\n                    <TableSubSubtitleChunk hackWidth={nestedHackWidth} title=\"Long Liabilities\" lookupKey=\"otherLiabilities\" data={readyData} />\r\n                </Collapsible>\r\n                <Collapsible\r\n                    renderTitleSection={(injectedOpen, setInjectedOpen) => <TableSectionChunk title=\"Total Equity\"\r\n                        open={injectedOpen}\r\n                        setOpen={setInjectedOpen}\r\n                        lookupKey=\"totalShareholderEquity\"\r\n                        data={readyData}\r\n                    />}\r\n                >\r\n                    <TableSubtitleChunk hackWidth={nestedHackWidth} title=\"Redeemable Preferred Stock, Total\" lookupKey=\"preferredStockRedeemable\" data={readyData} />\r\n                    <TableSubtitleChunk hackWidth={nestedHackWidth} title=\"Preferred Stock\" lookupKey=\"preferredStockTotalEquity\" data={readyData} />\r\n                    <TableSubtitleChunk hackWidth={nestedHackWidth} title=\"Common Stock, Total\" lookupKey=\"commonStock\" data={readyData} />\r\n                    <TableSubtitleChunk hackWidth={nestedHackWidth} title=\"Additional Paid-in Capital\" lookupKey=\"additionalPaidInCapital\" data={readyData} />\r\n                    <TableSubtitleChunk hackWidth={nestedHackWidth} title=\"Retained Earnings (Accumulated Deficit)\" lookupKey=\"retainedEarnings\" data={readyData} />\r\n                    <TableSubtitleChunk hackWidth={nestedHackWidth} title=\"Retained Earnings (Accumulated Deficit)\" lookupKey=\"treasuryStock\" data={readyData} />\r\n                    <TableSubtitleChunk hackWidth={nestedHackWidth} title=\"Other Equity\" lookupKey=\"otherShareholderEquity\" data={readyData} />\r\n                </Collapsible>\r\n                <TableSectionAlone\r\n                    title=\"Total Liabilities & Shareholders' Equity\" lookupKey=\"liabilitiesAndShareholderEquity\"\r\n                    data={readyData}\r\n                />\r\n                <TableSectionAlone\r\n                    title=\"Total Preferred Shares Outstanding\" lookupKey=\"preferredStockTotalEquity\"\r\n                    data={readyData}\r\n                />\r\n                <TableSectionAlone\r\n                    title=\"Total Common Shares Outstanding\" lookupKey=\"commonStockSharesOutstanding\"\r\n                    data={readyData}\r\n                />\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n};\r\n\r\n\r\n//1r big problem:\r\n//long strings without spaces like Property/plant/equipment breaks alignment","C:\\Users\\gonza\\finance-app\\src\\views\\company\\FinancialStatements\\CashFlow.js",["684","685","686","687","688","689","690","691","692"],"import {\r\n    Collapse,\r\n    IconButton,\r\n    makeStyles,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    withStyles,\r\n} from \"@material-ui/core\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { Collapsible, TableSectionAlone, TableSectionChunk, TableSubSubtitleChunk, TableSubtitleChunk } from \"../Rows\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    root: {\r\n        background: \"white\",\r\n        borderRadius: \"10px\",\r\n        margin: \"0 auto\",\r\n        width: \"100%\",\r\n        // [theme.breakpoints.up(\"sm\")]: {\r\n        //     width: \"700px\"\r\n        // },\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            width: \"1000px\"\r\n        },\r\n        [theme.breakpoints.up(\"lg\")]: {\r\n            width: \"1250px\"\r\n        }\r\n    },\r\n    // tableConatiner: {\r\n\r\n    // },\r\n\r\n    // iconButton: {\r\n    //     padding: 0\r\n    // },\r\n\r\n    // cell: {\r\n    //     borderBottom: \"none\"\r\n    // },\r\n    // sectionTitleCell: {\r\n    //     [theme.breakpoints.up(\"md\")]: {\r\n    //         paddingLeft: 0, paddingRight: 0\r\n    //     },\r\n    //     [theme.breakpoints.up(\"lg\")]: {\r\n\r\n    //         paddingLeft: 0, paddingRight: \"35px\"\r\n    //     }\r\n    // },\r\n    // subtitles: {\r\n    //     // [theme.breakpoints.up(\"md\")]: {\r\n    //     //     maxWidth: \"130px\"\r\n    //     // },\r\n    //     // [theme.breakpoints.up(\"lg\")]: {\r\n    //     //     maxWidth: \"none\",\r\n    //     //     width: \"200px\"\r\n    //     // },\r\n    //     // maxWidth: \"none\"\r\n    // }\r\n}))\r\n\r\nexport const CashFlow = ({ anualdata, readyData }) => {\r\n\r\n    //lg const nestedHackWidth = 175\r\n    const nestedHackWidth = 138\r\n    //we need to loop each field, which is an object with the  values of 5 different years\r\n    const classes = useStyles()\r\n    return (\r\n        <TableContainer\r\n            classes={{\r\n                root: classes.root,\r\n            }}\r\n        >\r\n            <Table >\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell colSpan={3} />\r\n                        {anualdata.current &&\r\n                            Object.keys(anualdata.current).map((year) => (\r\n                                <TableCell\r\n                                    align=\"right\"\r\n                                >{year}</TableCell>\r\n                            ))}\r\n                    </TableRow>\r\n                </TableHead>\r\n                {/* <TableSectionAlone\r\n                    title=\"Total Common Shares Outstanding\" lookupKey=\"commonStockSharesOutstanding\"\r\n                    data={readyData}\r\n                /> */}\r\n\r\n                <Collapsible fieldName=\"assets\"\r\n                    renderTitleSection={\r\n                        (injectedOpen, setInjectedOpen) => <TableSectionChunk\r\n                            open={injectedOpen}\r\n                            setOpen={setInjectedOpen}\r\n                            title=\"Cash from Operating Activities\"\r\n                            data={readyData}\r\n                            lookupKey=\"operatingCashflow\"\r\n                        />\r\n                    }>\r\n\r\n                    <TableSubtitleChunk hackWidth={nestedHackWidth} title=\"depreciation\" lookupKey=\"depreciation\" data={readyData} />\r\n                    <TableSubtitleChunk hackWidth={nestedHackWidth} title=\"Change in Receivables\" lookupKey=\"changeInReceivables\" data={readyData} />\r\n                    <TableSubtitleChunk hackWidth={nestedHackWidth} title=\"change in Account Receivables\" lookupKey=\"changeInAccountReceivables\" data={readyData} />\r\n                    <TableSubtitleChunk hackWidth={nestedHackWidth} title=\"change in Inventory\" lookupKey=\"changeInInventory\" data={readyData} />\r\n                    <TableSubtitleChunk hackWidth={nestedHackWidth} title=\"other Operating Cash Flow\" lookupKey=\"otherOperatingCashflow\" data={readyData} />\r\n                    <TableSubtitleChunk hackWidth={nestedHackWidth} title=\"Investments\" lookupKey=\"investments\" data={readyData} />\r\n                    <TableSubtitleChunk hackWidth={nestedHackWidth} title=\"change in Liabilities\" lookupKey=\"changeInLiabilities\" data={readyData} />\r\n                    <TableSubtitleChunk hackWidth={nestedHackWidth} title=\"Net Borrowings\" lookupKey=\"netBorrowings\" data={readyData} />\r\n\r\n                </Collapsible>\r\n                <Collapsible fieldName=\"assets\"\r\n                    renderTitleSection={\r\n                        (injectedOpen, setInjectedOpen) => <TableSectionChunk\r\n                            open={injectedOpen}\r\n                            setOpen={setInjectedOpen}\r\n                            title=\"Cash from Investing Activities\"\r\n                            data={readyData}\r\n                            lookupKey=\"cashflowFromInvestment\"\r\n                        />\r\n                    }>\r\n\r\n                    <TableSubtitleChunk hackWidth={nestedHackWidth} title=\"Capital Expenditures\" lookupKey=\"capitalExpenditures\" data={readyData} />\r\n                    <TableSubtitleChunk hackWidth={nestedHackWidth} title=\"other Cash Flow from Investing\" lookupKey=\"otherCashflowFromInvestment\" data={readyData} />\r\n\r\n                </Collapsible>\r\n                <Collapsible fieldName=\"assets\"\r\n                    renderTitleSection={\r\n                        (injectedOpen, setInjectedOpen) => <TableSectionChunk\r\n                            open={injectedOpen}\r\n                            setOpen={setInjectedOpen}\r\n                            title=\"Cash from Financing Activities\"\r\n                            data={readyData}\r\n                            lookupKey=\"cashflowFromFinancing\"\r\n                        />\r\n                    }>\r\n\r\n                    <TableSubtitleChunk hackWidth={nestedHackWidth} title=\"other Cash and Short Term Investments\" lookupKey=\"otherCashflowFromFinancing\" data={readyData} />\r\n                    <TableSubtitleChunk hackWidth={nestedHackWidth} title=\"change In exchange Rate\" lookupKey=\"changeInExchangeRate\" data={readyData} />\r\n                    <TableSubtitleChunk hackWidth={nestedHackWidth} title=\"dividend Payout\" lookupKey=\"dividendPayout\" data={readyData} />\r\n                    <TableSubtitleChunk hackWidth={nestedHackWidth} title=\"Stock Sale and Purchase\" lookupKey=\"stockSaleAndPurchase\" data={readyData} />\r\n\r\n                </Collapsible>\r\n\r\n\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n};","C:\\Users\\gonza\\finance-app\\src\\Context.js",[],"C:\\Users\\gonza\\finance-app\\src\\components\\components\\treeItem.js",["693","694","695","696","697","698","699","700","701","702"],"import TreeItem from '@material-ui/lab/TreeItem';\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Label from '@material-ui/icons/Label';\r\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport ForumIcon from '@material-ui/icons/Forum';\r\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\r\nimport { IconButton } from '@material-ui/core';\r\n\r\nconst useTreeItemStyles = makeStyles((theme) => ({\r\n    root: {\r\n      color: theme.palette.text.primary,\r\n      '&:hover > $content': {\r\n        backgroundColor: theme.palette.action.hover,\r\n      },\r\n      '&:focus > $content, &$selected > $content': {\r\n        backgroundColor: `var(--tree-view-bg-color, ${theme.palette.grey[400]})`,\r\n        color: 'var(--tree-view-color)',\r\n      },\r\n      '&:focus > $content $label, &:hover > $content $label, &$selected > $content $label': {\r\n        backgroundColor: 'transparent',\r\n      },\r\n      padding: props=>props.isTitle? \"0.5rem 0\":0 \r\n    },\r\n    content: {\r\n      color: theme.palette.text.secondary,\r\n      borderTopRightRadius: theme.spacing(2),\r\n      borderBottomRightRadius: theme.spacing(2),\r\n      paddingRight: theme.spacing(1),\r\n      fontWeight: theme.typography.fontWeightMedium,\r\n      '$expanded > &': {\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n      },\r\n    },\r\n    group: {\r\n      marginLeft: 0,\r\n      '& $content': {\r\n        paddingLeft: theme.spacing(2),\r\n      },\r\n    },\r\n    expanded: {},\r\n    selected: {},\r\n    label: {\r\n      fontWeight: 'inherit',\r\n      color: 'inherit',\r\n    },\r\n    labelRoot: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      padding: theme.spacing(0.5, 0),\r\n    },\r\n    labelIcon: {\r\n      marginRight: theme.spacing(1),\r\n    },\r\n    labelText: {\r\n      fontWeight: 'inherit',\r\n      flexGrow: 1,\r\n      marginLeft: theme.spacing(4)\r\n    },\r\n    iconContainer: {\r\n      width: \"9px\"\r\n    }\r\n  }));\r\n\r\n  export const StyledTreeItem =(props)=>{\r\n    const classes = useTreeItemStyles({isTitle: props.isTitle});\r\n    const { labelText, labelIcon: LabelIcon, labelInfo, color, bgColor, ariaLabel=\"\", ...other } = props;\r\n  \r\n    return (\r\n      <TreeItem\r\n      aria-label={ariaLabel}\r\n        label={\r\n          <div className={classes.labelRoot}>\r\n           \r\n            <LabelIcon color=\"inherit\" className={classes.labelIcon} />\r\n            \r\n            <Typography variant=\"body1\" className={classes.labelText}>\r\n              {labelText}\r\n            </Typography>\r\n            <Typography variant=\"caption\" color=\"inherit\">\r\n              {labelInfo}\r\n            </Typography>\r\n          </div>\r\n        }\r\n        style={{\r\n          '--tree-view-color': color,\r\n          '--tree-view-bg-color': bgColor,\r\n        }}\r\n        classes={{\r\n          root: classes.root,\r\n          content: classes.content,\r\n          expanded: classes.expanded,\r\n          selected: classes.selected,\r\n          group: classes.group,\r\n          label: classes.label,\r\n          iconContainer: classes.iconContainer\r\n        }}\r\n      \r\n        {...other}\r\n      />\r\n    );\r\n  }\r\n  \r\n  StyledTreeItem.propTypes = {\r\n    bgColor: PropTypes.string,\r\n    color: PropTypes.string,\r\n    labelIcon: PropTypes.elementType.isRequired,\r\n    labelInfo: PropTypes.string,\r\n    labelText: PropTypes.string.isRequired,\r\n  };\r\n\r\n","C:\\Users\\gonza\\finance-app\\src\\UserContext.js",[],"C:\\Users\\gonza\\finance-app\\src\\dashboard\\Marcador2.js",[],"C:\\Users\\gonza\\finance-app\\src\\views\\principal\\elements\\Indices.js",["703"],"import React from 'react'\r\nimport { useFetch } from '../../../utils/useFetch'\r\nimport { useFetchWithCors } from '../../../utils/useFetchWithCors'\r\n\r\n\r\nexport const Indices = () => {\r\n    const category = \"indexes\"\r\n    const subCategory = \"index-list\"\r\n    const options = { explicitUrl: true }\r\n    const url = \"https://financialmodelingprep.com/api/v3/quotes/index?apikey=651d720ba0c42b094186aa9906e307b4\"\r\n    const { datos, loading, error } = useFetch(url, subCategory, category, options)\r\n\r\n    return (\r\n        <>\r\n            {loading && <p>loading...</p>}\r\n            {error && <p>{error}</p>}\r\n            {datos.length > 0 && datos.map(item =>\r\n                <li>\r\n                    <div>{item.name}</div>\r\n                    <div>{item.changesPercentage} %</div>\r\n                </li>)}\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\utils\\useMountApproval.js",["704","705"],"import React, { useEffect } from 'react'\r\nimport { useUILayer } from '../ContextUI'\r\n\r\nexport const useMountApproval = () => {\r\n    const { setMountApproval } = useUILayer()\r\n    useEffect(() => {\r\n        setMountApproval(false)\r\n\r\n    }, [])\r\n\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\charts\\CovidMap.js",["706"],"C:\\Users\\gonza\\finance-app\\src\\views\\company\\PeerCarousel.js",["707","708"],"C:\\Users\\gonza\\finance-app\\src\\views\\indexes\\SP500.js",[],"C:\\Users\\gonza\\finance-app\\src\\charts\\DonutChart.js",["709","710"],"C:\\Users\\gonza\\finance-app\\src\\dashboard\\UserMain.js",["711","712"],"C:\\Users\\gonza\\finance-app\\src\\dashboard\\PerformanceStructure.js",["713","714","715","716","717","718"],"C:\\Users\\gonza\\finance-app\\src\\views\\indexes\\ChartIndex.js",[],"C:\\Users\\gonza\\finance-app\\src\\charts\\MiniatureChartIndex.js",[],"C:\\Users\\gonza\\finance-app\\src\\views\\covid\\Sliders.js",["719","720","721"],"C:\\Users\\gonza\\finance-app\\src\\dashboard\\SearcherPositions.js",[],"C:\\Users\\gonza\\finance-app\\src\\SignInForm.js",[],"C:\\Users\\gonza\\finance-app\\src\\utils\\useFatch.js",["722","723","724"],"C:\\Users\\gonza\\finance-app\\src\\charts\\GeneralIndexDispatcher.js",["725"],{"ruleId":"726","severity":1,"message":"727","line":14,"column":10,"nodeType":"728","messageId":"729","endLine":14,"endColumn":19},{"ruleId":"726","severity":1,"message":"730","line":81,"column":9,"nodeType":"728","messageId":"729","endLine":81,"endColumn":14},{"ruleId":"726","severity":1,"message":"731","line":1,"column":38,"nodeType":"728","messageId":"729","endLine":1,"endColumn":44},{"ruleId":"726","severity":1,"message":"732","line":13,"column":10,"nodeType":"728","messageId":"729","endLine":13,"endColumn":25},{"ruleId":"726","severity":1,"message":"733","line":16,"column":10,"nodeType":"728","messageId":"729","endLine":16,"endColumn":20},{"ruleId":"726","severity":1,"message":"734","line":18,"column":10,"nodeType":"728","messageId":"729","endLine":18,"endColumn":24},{"ruleId":"726","severity":1,"message":"735","line":22,"column":10,"nodeType":"728","messageId":"729","endLine":22,"endColumn":22},{"ruleId":"726","severity":1,"message":"736","line":26,"column":10,"nodeType":"728","messageId":"729","endLine":26,"endColumn":32},{"ruleId":"726","severity":1,"message":"737","line":74,"column":22,"nodeType":"728","messageId":"729","endLine":74,"endColumn":33},{"ruleId":"738","severity":1,"message":"739","line":102,"column":6,"nodeType":"740","endLine":102,"endColumn":17,"suggestions":"741"},{"ruleId":"726","severity":1,"message":"742","line":107,"column":10,"nodeType":"728","messageId":"729","endLine":107,"endColumn":14},{"ruleId":"726","severity":1,"message":"743","line":114,"column":10,"nodeType":"728","messageId":"729","endLine":114,"endColumn":15},{"ruleId":"726","severity":1,"message":"744","line":114,"column":17,"nodeType":"728","messageId":"729","endLine":114,"endColumn":25},{"ruleId":"738","severity":1,"message":"745","line":136,"column":6,"nodeType":"740","endLine":136,"endColumn":17,"suggestions":"746"},{"ruleId":"738","severity":1,"message":"739","line":147,"column":6,"nodeType":"740","endLine":147,"endColumn":28,"suggestions":"747"},{"ruleId":"726","severity":1,"message":"748","line":1,"column":10,"nodeType":"728","messageId":"729","endLine":1,"endColumn":16},{"ruleId":"726","severity":1,"message":"749","line":1,"column":18,"nodeType":"728","messageId":"729","endLine":1,"endColumn":22},{"ruleId":"726","severity":1,"message":"750","line":2,"column":17,"nodeType":"728","messageId":"729","endLine":2,"endColumn":26},{"ruleId":"726","severity":1,"message":"751","line":19,"column":11,"nodeType":"728","messageId":"729","endLine":19,"endColumn":16},{"ruleId":"726","severity":1,"message":"752","line":19,"column":18,"nodeType":"728","messageId":"729","endLine":19,"endColumn":26},{"ruleId":"726","severity":1,"message":"753","line":36,"column":9,"nodeType":"728","messageId":"729","endLine":36,"endColumn":21},{"ruleId":"754","replacedBy":"755"},{"ruleId":"756","replacedBy":"757"},{"ruleId":"726","severity":1,"message":"731","line":1,"column":28,"nodeType":"728","messageId":"729","endLine":1,"endColumn":34},{"ruleId":"738","severity":1,"message":"758","line":27,"column":6,"nodeType":"740","endLine":27,"endColumn":8,"suggestions":"759"},{"ruleId":"738","severity":1,"message":"760","line":34,"column":6,"nodeType":"740","endLine":34,"endColumn":14,"suggestions":"761"},{"ruleId":"738","severity":1,"message":"762","line":39,"column":6,"nodeType":"740","endLine":39,"endColumn":29,"suggestions":"763"},{"ruleId":"754","replacedBy":"764"},{"ruleId":"756","replacedBy":"765"},{"ruleId":"726","severity":1,"message":"766","line":5,"column":10,"nodeType":"728","messageId":"729","endLine":5,"endColumn":16},{"ruleId":"726","severity":1,"message":"767","line":6,"column":10,"nodeType":"728","messageId":"729","endLine":6,"endColumn":15},{"ruleId":"754","replacedBy":"768"},{"ruleId":"756","replacedBy":"769"},{"ruleId":"738","severity":1,"message":"770","line":43,"column":8,"nodeType":"740","endLine":43,"endColumn":46,"suggestions":"771"},{"ruleId":"754","replacedBy":"772"},{"ruleId":"756","replacedBy":"773"},{"ruleId":"726","severity":1,"message":"774","line":2,"column":3,"nodeType":"728","messageId":"729","endLine":2,"endColumn":7},{"ruleId":"726","severity":1,"message":"775","line":3,"column":3,"nodeType":"728","messageId":"729","endLine":3,"endColumn":11},{"ruleId":"726","severity":1,"message":"776","line":4,"column":3,"nodeType":"728","messageId":"729","endLine":4,"endColumn":15},{"ruleId":"726","severity":1,"message":"777","line":6,"column":3,"nodeType":"728","messageId":"729","endLine":6,"endColumn":13},{"ruleId":"726","severity":1,"message":"750","line":8,"column":17,"nodeType":"728","messageId":"729","endLine":8,"endColumn":26},{"ruleId":"726","severity":1,"message":"731","line":8,"column":28,"nodeType":"728","messageId":"729","endLine":8,"endColumn":34},{"ruleId":"726","severity":1,"message":"778","line":8,"column":36,"nodeType":"728","messageId":"729","endLine":8,"endColumn":44},{"ruleId":"726","severity":1,"message":"779","line":9,"column":10,"nodeType":"728","messageId":"729","endLine":9,"endColumn":19},{"ruleId":"726","severity":1,"message":"780","line":11,"column":10,"nodeType":"728","messageId":"729","endLine":11,"endColumn":22},{"ruleId":"726","severity":1,"message":"781","line":12,"column":10,"nodeType":"728","messageId":"729","endLine":12,"endColumn":23},{"ruleId":"726","severity":1,"message":"727","line":12,"column":10,"nodeType":"728","messageId":"729","endLine":12,"endColumn":19},{"ruleId":"754","replacedBy":"782"},{"ruleId":"756","replacedBy":"783"},{"ruleId":"726","severity":1,"message":"748","line":1,"column":10,"nodeType":"728","messageId":"729","endLine":1,"endColumn":16},{"ruleId":"726","severity":1,"message":"778","line":2,"column":16,"nodeType":"728","messageId":"729","endLine":2,"endColumn":24},{"ruleId":"738","severity":1,"message":"784","line":12,"column":5,"nodeType":"740","endLine":12,"endColumn":15,"suggestions":"785"},{"ruleId":"754","replacedBy":"786"},{"ruleId":"756","replacedBy":"787"},{"ruleId":"754","replacedBy":"788"},{"ruleId":"756","replacedBy":"789"},{"ruleId":"726","severity":1,"message":"776","line":5,"column":8,"nodeType":"728","messageId":"729","endLine":5,"endColumn":20},{"ruleId":"726","severity":1,"message":"775","line":6,"column":8,"nodeType":"728","messageId":"729","endLine":6,"endColumn":16},{"ruleId":"726","severity":1,"message":"774","line":7,"column":8,"nodeType":"728","messageId":"729","endLine":7,"endColumn":12},{"ruleId":"726","severity":1,"message":"790","line":8,"column":8,"nodeType":"728","messageId":"729","endLine":8,"endColumn":15},{"ruleId":"726","severity":1,"message":"791","line":34,"column":9,"nodeType":"728","messageId":"729","endLine":34,"endColumn":24},{"ruleId":"726","severity":1,"message":"792","line":1,"column":17,"nodeType":"728","messageId":"729","endLine":1,"endColumn":27},{"ruleId":"726","severity":1,"message":"793","line":2,"column":10,"nodeType":"728","messageId":"729","endLine":2,"endColumn":17},{"ruleId":"726","severity":1,"message":"794","line":78,"column":11,"nodeType":"728","messageId":"729","endLine":78,"endColumn":24},{"ruleId":"726","severity":1,"message":"795","line":3,"column":10,"nodeType":"728","messageId":"729","endLine":3,"endColumn":26},{"ruleId":"726","severity":1,"message":"796","line":5,"column":37,"nodeType":"728","messageId":"729","endLine":5,"endColumn":49},{"ruleId":"726","severity":1,"message":"797","line":7,"column":10,"nodeType":"728","messageId":"729","endLine":7,"endColumn":36},{"ruleId":"726","severity":1,"message":"798","line":29,"column":11,"nodeType":"728","messageId":"729","endLine":29,"endColumn":24},{"ruleId":"726","severity":1,"message":"799","line":50,"column":12,"nodeType":"728","messageId":"729","endLine":50,"endColumn":28},{"ruleId":"726","severity":1,"message":"800","line":50,"column":30,"nodeType":"728","messageId":"729","endLine":50,"endColumn":48},{"ruleId":"738","severity":1,"message":"801","line":57,"column":29,"nodeType":"802","endLine":60,"endColumn":20},{"ruleId":"726","severity":1,"message":"803","line":1,"column":8,"nodeType":"728","messageId":"729","endLine":1,"endColumn":13},{"ruleId":"726","severity":1,"message":"804","line":18,"column":11,"nodeType":"728","messageId":"729","endLine":18,"endColumn":29},{"ruleId":"738","severity":1,"message":"805","line":200,"column":8,"nodeType":"740","endLine":200,"endColumn":92,"suggestions":"806"},{"ruleId":"754","replacedBy":"807"},{"ruleId":"756","replacedBy":"808"},{"ruleId":"726","severity":1,"message":"803","line":1,"column":8,"nodeType":"728","messageId":"729","endLine":1,"endColumn":13},{"ruleId":"738","severity":1,"message":"809","line":47,"column":8,"nodeType":"740","endLine":47,"endColumn":10,"suggestions":"810"},{"ruleId":"726","severity":1,"message":"750","line":2,"column":17,"nodeType":"728","messageId":"729","endLine":2,"endColumn":26},{"ruleId":"726","severity":1,"message":"811","line":7,"column":11,"nodeType":"728","messageId":"729","endLine":7,"endColumn":14},{"ruleId":"726","severity":1,"message":"748","line":1,"column":10,"nodeType":"728","messageId":"729","endLine":1,"endColumn":16},{"ruleId":"726","severity":1,"message":"749","line":1,"column":18,"nodeType":"728","messageId":"729","endLine":1,"endColumn":22},{"ruleId":"726","severity":1,"message":"775","line":1,"column":39,"nodeType":"728","messageId":"729","endLine":1,"endColumn":47},{"ruleId":"726","severity":1,"message":"812","line":1,"column":63,"nodeType":"728","messageId":"729","endLine":1,"endColumn":72},{"ruleId":"726","severity":1,"message":"813","line":4,"column":8,"nodeType":"728","messageId":"729","endLine":4,"endColumn":20},{"ruleId":"726","severity":1,"message":"814","line":5,"column":8,"nodeType":"728","messageId":"729","endLine":5,"endColumn":24},{"ruleId":"726","severity":1,"message":"815","line":11,"column":10,"nodeType":"728","messageId":"729","endLine":11,"endColumn":39},{"ruleId":"726","severity":1,"message":"816","line":16,"column":12,"nodeType":"728","messageId":"729","endLine":16,"endColumn":17},{"ruleId":"726","severity":1,"message":"817","line":16,"column":19,"nodeType":"728","messageId":"729","endLine":16,"endColumn":27},{"ruleId":"726","severity":1,"message":"742","line":17,"column":12,"nodeType":"728","messageId":"729","endLine":17,"endColumn":16},{"ruleId":"726","severity":1,"message":"818","line":17,"column":18,"nodeType":"728","messageId":"729","endLine":17,"endColumn":25},{"ruleId":"726","severity":1,"message":"819","line":21,"column":29,"nodeType":"728","messageId":"729","endLine":21,"endColumn":34},{"ruleId":"726","severity":1,"message":"751","line":27,"column":13,"nodeType":"728","messageId":"729","endLine":27,"endColumn":18},{"ruleId":"726","severity":1,"message":"752","line":27,"column":20,"nodeType":"728","messageId":"729","endLine":27,"endColumn":28},{"ruleId":"726","severity":1,"message":"820","line":45,"column":11,"nodeType":"728","messageId":"729","endLine":45,"endColumn":26},{"ruleId":"726","severity":1,"message":"821","line":58,"column":12,"nodeType":"728","messageId":"729","endLine":58,"endColumn":22},{"ruleId":"726","severity":1,"message":"822","line":60,"column":12,"nodeType":"728","messageId":"729","endLine":60,"endColumn":17},{"ruleId":"726","severity":1,"message":"823","line":63,"column":11,"nodeType":"728","messageId":"729","endLine":63,"endColumn":21},{"ruleId":"738","severity":1,"message":"824","line":84,"column":8,"nodeType":"740","endLine":84,"endColumn":14,"suggestions":"825"},{"ruleId":"826","severity":1,"message":"827","line":224,"column":5,"nodeType":"828","messageId":"829","endLine":224,"endColumn":63},{"ruleId":"830","severity":1,"message":"831","line":224,"column":5,"nodeType":"828","messageId":"832","endLine":224,"endColumn":63},{"ruleId":"726","severity":1,"message":"751","line":11,"column":12,"nodeType":"728","messageId":"729","endLine":11,"endColumn":17},{"ruleId":"726","severity":1,"message":"752","line":11,"column":19,"nodeType":"728","messageId":"729","endLine":11,"endColumn":27},{"ruleId":"738","severity":1,"message":"833","line":40,"column":6,"nodeType":"740","endLine":40,"endColumn":13,"suggestions":"834"},{"ruleId":"738","severity":1,"message":"835","line":46,"column":6,"nodeType":"740","endLine":46,"endColumn":12,"suggestions":"836"},{"ruleId":"726","severity":1,"message":"837","line":1,"column":46,"nodeType":"728","messageId":"729","endLine":1,"endColumn":61},{"ruleId":"726","severity":1,"message":"838","line":4,"column":10,"nodeType":"728","messageId":"729","endLine":4,"endColumn":20},{"ruleId":"738","severity":1,"message":"839","line":21,"column":8,"nodeType":"740","endLine":21,"endColumn":15,"suggestions":"840"},{"ruleId":"726","severity":1,"message":"841","line":43,"column":13,"nodeType":"728","messageId":"729","endLine":43,"endColumn":18},{"ruleId":"726","severity":1,"message":"842","line":44,"column":13,"nodeType":"728","messageId":"729","endLine":44,"endColumn":19},{"ruleId":"738","severity":1,"message":"843","line":25,"column":8,"nodeType":"740","endLine":25,"endColumn":14,"suggestions":"844"},{"ruleId":"726","severity":1,"message":"748","line":1,"column":10,"nodeType":"728","messageId":"729","endLine":1,"endColumn":16},{"ruleId":"738","severity":1,"message":"845","line":52,"column":8,"nodeType":"740","endLine":52,"endColumn":15,"suggestions":"846"},{"ruleId":"826","severity":1,"message":"847","line":82,"column":1,"nodeType":"828","messageId":"848","endLine":94,"endColumn":11},{"ruleId":"726","severity":1,"message":"849","line":5,"column":8,"nodeType":"728","messageId":"729","endLine":5,"endColumn":11},{"ruleId":"726","severity":1,"message":"850","line":7,"column":25,"nodeType":"728","messageId":"729","endLine":7,"endColumn":30},{"ruleId":"826","severity":1,"message":"847","line":29,"column":1,"nodeType":"828","messageId":"848","endLine":29,"endColumn":20},{"ruleId":"754","replacedBy":"851"},{"ruleId":"756","replacedBy":"852"},{"ruleId":"726","severity":1,"message":"803","line":2,"column":8,"nodeType":"728","messageId":"729","endLine":2,"endColumn":13},{"ruleId":"726","severity":1,"message":"778","line":2,"column":17,"nodeType":"728","messageId":"729","endLine":2,"endColumn":25},{"ruleId":"738","severity":1,"message":"853","line":18,"column":6,"nodeType":"740","endLine":18,"endColumn":30,"suggestions":"854"},{"ruleId":"726","severity":1,"message":"803","line":1,"column":8,"nodeType":"728","messageId":"729","endLine":1,"endColumn":13},{"ruleId":"726","severity":1,"message":"855","line":8,"column":11,"nodeType":"728","messageId":"729","endLine":8,"endColumn":20},{"ruleId":"738","severity":1,"message":"739","line":33,"column":8,"nodeType":"740","endLine":33,"endColumn":28,"suggestions":"856"},{"ruleId":"726","severity":1,"message":"857","line":4,"column":3,"nodeType":"728","messageId":"729","endLine":4,"endColumn":6},{"ruleId":"726","severity":1,"message":"750","line":14,"column":17,"nodeType":"728","messageId":"729","endLine":14,"endColumn":26},{"ruleId":"726","severity":1,"message":"858","line":20,"column":8,"nodeType":"728","messageId":"729","endLine":20,"endColumn":17},{"ruleId":"726","severity":1,"message":"859","line":22,"column":10,"nodeType":"728","messageId":"729","endLine":22,"endColumn":18},{"ruleId":"726","severity":1,"message":"778","line":1,"column":17,"nodeType":"728","messageId":"729","endLine":1,"endColumn":25},{"ruleId":"726","severity":1,"message":"860","line":34,"column":20,"nodeType":"728","messageId":"729","endLine":34,"endColumn":27},{"ruleId":"726","severity":1,"message":"819","line":34,"column":29,"nodeType":"728","messageId":"729","endLine":34,"endColumn":34},{"ruleId":"738","severity":1,"message":"861","line":54,"column":8,"nodeType":"740","endLine":54,"endColumn":10,"suggestions":"862"},{"ruleId":"726","severity":1,"message":"863","line":1,"column":10,"nodeType":"728","messageId":"729","endLine":1,"endColumn":15},{"ruleId":"726","severity":1,"message":"864","line":7,"column":10,"nodeType":"728","messageId":"729","endLine":7,"endColumn":24},{"ruleId":"726","severity":1,"message":"865","line":8,"column":10,"nodeType":"728","messageId":"729","endLine":8,"endColumn":19},{"ruleId":"726","severity":1,"message":"866","line":14,"column":11,"nodeType":"728","messageId":"729","endLine":14,"endColumn":20},{"ruleId":"726","severity":1,"message":"867","line":16,"column":12,"nodeType":"728","messageId":"729","endLine":16,"endColumn":27},{"ruleId":"726","severity":1,"message":"868","line":6,"column":10,"nodeType":"728","messageId":"729","endLine":6,"endColumn":23},{"ruleId":"726","severity":1,"message":"869","line":7,"column":10,"nodeType":"728","messageId":"729","endLine":7,"endColumn":14},{"ruleId":"754","replacedBy":"870"},{"ruleId":"756","replacedBy":"871"},{"ruleId":"726","severity":1,"message":"872","line":2,"column":22,"nodeType":"728","messageId":"729","endLine":2,"endColumn":27},{"ruleId":"738","severity":1,"message":"839","line":45,"column":8,"nodeType":"740","endLine":45,"endColumn":15,"suggestions":"873"},{"ruleId":"726","severity":1,"message":"812","line":4,"column":38,"nodeType":"728","messageId":"729","endLine":4,"endColumn":47},{"ruleId":"726","severity":1,"message":"874","line":6,"column":10,"nodeType":"728","messageId":"729","endLine":6,"endColumn":16},{"ruleId":"726","severity":1,"message":"875","line":9,"column":10,"nodeType":"728","messageId":"729","endLine":9,"endColumn":18},{"ruleId":"726","severity":1,"message":"876","line":40,"column":22,"nodeType":"728","messageId":"729","endLine":40,"endColumn":35},{"ruleId":"726","severity":1,"message":"877","line":40,"column":37,"nodeType":"728","messageId":"729","endLine":40,"endColumn":48},{"ruleId":"726","severity":1,"message":"819","line":42,"column":21,"nodeType":"728","messageId":"729","endLine":42,"endColumn":26},{"ruleId":"726","severity":1,"message":"860","line":42,"column":28,"nodeType":"728","messageId":"729","endLine":42,"endColumn":35},{"ruleId":"738","severity":1,"message":"878","line":89,"column":8,"nodeType":"740","endLine":89,"endColumn":49,"suggestions":"879"},{"ruleId":"726","severity":1,"message":"880","line":121,"column":11,"nodeType":"728","messageId":"729","endLine":121,"endColumn":24},{"ruleId":"738","severity":1,"message":"881","line":145,"column":8,"nodeType":"740","endLine":145,"endColumn":15,"suggestions":"882"},{"ruleId":"726","severity":1,"message":"803","line":1,"column":8,"nodeType":"728","messageId":"729","endLine":1,"endColumn":13},{"ruleId":"738","severity":1,"message":"883","line":53,"column":6,"nodeType":"740","endLine":53,"endColumn":14,"suggestions":"884"},{"ruleId":"738","severity":1,"message":"885","line":72,"column":6,"nodeType":"740","endLine":72,"endColumn":13,"suggestions":"886"},{"ruleId":"726","severity":1,"message":"887","line":4,"column":10,"nodeType":"728","messageId":"729","endLine":4,"endColumn":23},{"ruleId":"726","severity":1,"message":"888","line":5,"column":10,"nodeType":"728","messageId":"729","endLine":5,"endColumn":24},{"ruleId":"726","severity":1,"message":"889","line":6,"column":10,"nodeType":"728","messageId":"729","endLine":6,"endColumn":32},{"ruleId":"726","severity":1,"message":"890","line":7,"column":10,"nodeType":"728","messageId":"729","endLine":7,"endColumn":18},{"ruleId":"726","severity":1,"message":"891","line":11,"column":11,"nodeType":"728","messageId":"729","endLine":11,"endColumn":19},{"ruleId":"726","severity":1,"message":"892","line":12,"column":11,"nodeType":"728","messageId":"729","endLine":12,"endColumn":22},{"ruleId":"726","severity":1,"message":"893","line":13,"column":11,"nodeType":"728","messageId":"729","endLine":13,"endColumn":18},{"ruleId":"726","severity":1,"message":"894","line":17,"column":29,"nodeType":"728","messageId":"729","endLine":17,"endColumn":37},{"ruleId":"726","severity":1,"message":"895","line":17,"column":39,"nodeType":"728","messageId":"729","endLine":17,"endColumn":45},{"ruleId":"726","severity":1,"message":"803","line":1,"column":8,"nodeType":"728","messageId":"729","endLine":1,"endColumn":13},{"ruleId":"726","severity":1,"message":"896","line":3,"column":10,"nodeType":"728","messageId":"729","endLine":3,"endColumn":28},{"ruleId":"726","severity":1,"message":"897","line":19,"column":11,"nodeType":"728","messageId":"729","endLine":19,"endColumn":28},{"ruleId":"726","severity":1,"message":"898","line":127,"column":13,"nodeType":"728","messageId":"729","endLine":127,"endColumn":19},{"ruleId":"726","severity":1,"message":"899","line":127,"column":21,"nodeType":"728","messageId":"729","endLine":127,"endColumn":29},{"ruleId":"726","severity":1,"message":"900","line":127,"column":31,"nodeType":"728","messageId":"729","endLine":127,"endColumn":41},{"ruleId":"738","severity":1,"message":"901","line":241,"column":8,"nodeType":"740","endLine":241,"endColumn":92,"suggestions":"902"},{"ruleId":"754","replacedBy":"903"},{"ruleId":"756","replacedBy":"904"},{"ruleId":"905","severity":1,"message":"906","line":30,"column":13,"nodeType":"907","messageId":"908","endLine":30,"endColumn":28},{"ruleId":"738","severity":1,"message":"909","line":499,"column":8,"nodeType":"740","endLine":499,"endColumn":52,"suggestions":"910"},{"ruleId":"726","severity":1,"message":"731","line":1,"column":38,"nodeType":"728","messageId":"729","endLine":1,"endColumn":44},{"ruleId":"726","severity":1,"message":"896","line":5,"column":34,"nodeType":"728","messageId":"729","endLine":5,"endColumn":52},{"ruleId":"726","severity":1,"message":"911","line":5,"column":54,"nodeType":"728","messageId":"729","endLine":5,"endColumn":72},{"ruleId":"738","severity":1,"message":"912","line":65,"column":8,"nodeType":"740","endLine":65,"endColumn":56,"suggestions":"913"},{"ruleId":"726","severity":1,"message":"803","line":1,"column":8,"nodeType":"728","messageId":"729","endLine":1,"endColumn":13},{"ruleId":"726","severity":1,"message":"914","line":3,"column":10,"nodeType":"728","messageId":"729","endLine":3,"endColumn":21},{"ruleId":"738","severity":1,"message":"915","line":17,"column":8,"nodeType":"740","endLine":17,"endColumn":21,"suggestions":"916"},{"ruleId":"726","severity":1,"message":"803","line":1,"column":8,"nodeType":"728","messageId":"729","endLine":1,"endColumn":13},{"ruleId":"726","severity":1,"message":"731","line":1,"column":28,"nodeType":"728","messageId":"729","endLine":1,"endColumn":34},{"ruleId":"726","severity":1,"message":"778","line":1,"column":36,"nodeType":"728","messageId":"729","endLine":1,"endColumn":44},{"ruleId":"917","severity":1,"message":"918","line":47,"column":19,"nodeType":"919","messageId":"920","endLine":47,"endColumn":20,"fix":"921"},{"ruleId":"922","severity":1,"message":"923","line":125,"column":43,"nodeType":"924","messageId":"925","endLine":125,"endColumn":44},{"ruleId":"738","severity":1,"message":"926","line":177,"column":8,"nodeType":"740","endLine":177,"endColumn":30,"suggestions":"927"},{"ruleId":"738","severity":1,"message":"928","line":197,"column":8,"nodeType":"740","endLine":197,"endColumn":23,"suggestions":"929"},{"ruleId":"726","severity":1,"message":"930","line":1,"column":10,"nodeType":"728","messageId":"729","endLine":1,"endColumn":20},{"ruleId":"726","severity":1,"message":"931","line":1,"column":22,"nodeType":"728","messageId":"729","endLine":1,"endColumn":28},{"ruleId":"726","severity":1,"message":"777","line":1,"column":30,"nodeType":"728","messageId":"729","endLine":1,"endColumn":40},{"ruleId":"726","severity":1,"message":"889","line":5,"column":10,"nodeType":"728","messageId":"729","endLine":5,"endColumn":32},{"ruleId":"726","severity":1,"message":"932","line":21,"column":11,"nodeType":"728","messageId":"729","endLine":21,"endColumn":33},{"ruleId":"726","severity":1,"message":"933","line":59,"column":31,"nodeType":"728","messageId":"729","endLine":59,"endColumn":41},{"ruleId":"738","severity":1,"message":"934","line":102,"column":8,"nodeType":"740","endLine":102,"endColumn":37,"suggestions":"935"},{"ruleId":"726","severity":1,"message":"936","line":1,"column":16,"nodeType":"728","messageId":"729","endLine":1,"endColumn":33},{"ruleId":"726","severity":1,"message":"937","line":3,"column":8,"nodeType":"728","messageId":"729","endLine":3,"endColumn":16},{"ruleId":"738","severity":1,"message":"938","line":57,"column":8,"nodeType":"740","endLine":57,"endColumn":20,"suggestions":"939"},{"ruleId":"726","severity":1,"message":"940","line":4,"column":10,"nodeType":"728","messageId":"729","endLine":4,"endColumn":28},{"ruleId":"726","severity":1,"message":"752","line":8,"column":20,"nodeType":"728","messageId":"729","endLine":8,"endColumn":28},{"ruleId":"738","severity":1,"message":"941","line":32,"column":8,"nodeType":"740","endLine":32,"endColumn":10,"suggestions":"942"},{"ruleId":"726","severity":1,"message":"943","line":5,"column":8,"nodeType":"728","messageId":"729","endLine":5,"endColumn":15},{"ruleId":"726","severity":1,"message":"944","line":112,"column":11,"nodeType":"728","messageId":"729","endLine":112,"endColumn":23},{"ruleId":"726","severity":1,"message":"945","line":114,"column":15,"nodeType":"728","messageId":"729","endLine":114,"endColumn":19},{"ruleId":"738","severity":1,"message":"946","line":121,"column":8,"nodeType":"740","endLine":121,"endColumn":42,"suggestions":"947"},{"ruleId":"726","severity":1,"message":"948","line":1,"column":10,"nodeType":"728","messageId":"729","endLine":1,"endColumn":18},{"ruleId":"726","severity":1,"message":"889","line":3,"column":10,"nodeType":"728","messageId":"729","endLine":3,"endColumn":32},{"ruleId":"726","severity":1,"message":"949","line":10,"column":27,"nodeType":"728","messageId":"729","endLine":10,"endColumn":35},{"ruleId":"726","severity":1,"message":"819","line":10,"column":37,"nodeType":"728","messageId":"729","endLine":10,"endColumn":42},{"ruleId":"726","severity":1,"message":"950","line":11,"column":25,"nodeType":"728","messageId":"729","endLine":11,"endColumn":34},{"ruleId":"726","severity":1,"message":"951","line":11,"column":36,"nodeType":"728","messageId":"729","endLine":11,"endColumn":42},{"ruleId":"738","severity":1,"message":"952","line":41,"column":8,"nodeType":"740","endLine":41,"endColumn":10,"suggestions":"953"},{"ruleId":"738","severity":1,"message":"954","line":73,"column":8,"nodeType":"740","endLine":73,"endColumn":21,"suggestions":"955"},{"ruleId":"726","severity":1,"message":"875","line":4,"column":10,"nodeType":"728","messageId":"729","endLine":4,"endColumn":18},{"ruleId":"726","severity":1,"message":"956","line":5,"column":10,"nodeType":"728","messageId":"729","endLine":5,"endColumn":19},{"ruleId":"726","severity":1,"message":"957","line":7,"column":10,"nodeType":"728","messageId":"729","endLine":7,"endColumn":17},{"ruleId":"726","severity":1,"message":"869","line":8,"column":10,"nodeType":"728","messageId":"729","endLine":8,"endColumn":14},{"ruleId":"726","severity":1,"message":"774","line":1,"column":16,"nodeType":"728","messageId":"729","endLine":1,"endColumn":20},{"ruleId":"726","severity":1,"message":"775","line":1,"column":22,"nodeType":"728","messageId":"729","endLine":1,"endColumn":30},{"ruleId":"726","severity":1,"message":"776","line":1,"column":32,"nodeType":"728","messageId":"729","endLine":1,"endColumn":44},{"ruleId":"726","severity":1,"message":"819","line":14,"column":10,"nodeType":"728","messageId":"729","endLine":14,"endColumn":15},{"ruleId":"726","severity":1,"message":"860","line":15,"column":10,"nodeType":"728","messageId":"729","endLine":15,"endColumn":17},{"ruleId":"738","severity":1,"message":"833","line":35,"column":10,"nodeType":"740","endLine":35,"endColumn":17,"suggestions":"958"},{"ruleId":"738","severity":1,"message":"835","line":40,"column":10,"nodeType":"740","endLine":40,"endColumn":16,"suggestions":"959"},{"ruleId":"738","severity":1,"message":"960","line":47,"column":8,"nodeType":"740","endLine":47,"endColumn":14,"suggestions":"961"},{"ruleId":"726","severity":1,"message":"752","line":9,"column":20,"nodeType":"728","messageId":"729","endLine":9,"endColumn":28},{"ruleId":"726","severity":1,"message":"962","line":14,"column":13,"nodeType":"728","messageId":"729","endLine":14,"endColumn":18},{"ruleId":"726","severity":1,"message":"963","line":15,"column":11,"nodeType":"728","messageId":"729","endLine":15,"endColumn":23},{"ruleId":"726","severity":1,"message":"964","line":8,"column":5,"nodeType":"728","messageId":"729","endLine":8,"endColumn":19},{"ruleId":"726","severity":1,"message":"965","line":9,"column":5,"nodeType":"728","messageId":"729","endLine":9,"endColumn":14},{"ruleId":"726","severity":1,"message":"750","line":13,"column":17,"nodeType":"728","messageId":"729","endLine":13,"endColumn":26},{"ruleId":"726","severity":1,"message":"731","line":13,"column":28,"nodeType":"728","messageId":"729","endLine":13,"endColumn":34},{"ruleId":"726","severity":1,"message":"966","line":4,"column":7,"nodeType":"728","messageId":"729","endLine":4,"endColumn":16},{"ruleId":"726","severity":1,"message":"803","line":1,"column":8,"nodeType":"728","messageId":"729","endLine":1,"endColumn":13},{"ruleId":"726","severity":1,"message":"967","line":8,"column":7,"nodeType":"728","messageId":"729","endLine":8,"endColumn":17},{"ruleId":"726","severity":1,"message":"968","line":17,"column":9,"nodeType":"728","messageId":"729","endLine":17,"endColumn":16},{"ruleId":"726","severity":1,"message":"837","line":1,"column":46,"nodeType":"728","messageId":"729","endLine":1,"endColumn":61},{"ruleId":"726","severity":1,"message":"727","line":5,"column":10,"nodeType":"728","messageId":"729","endLine":5,"endColumn":19},{"ruleId":"726","severity":1,"message":"814","line":6,"column":10,"nodeType":"728","messageId":"729","endLine":6,"endColumn":26},{"ruleId":"726","severity":1,"message":"969","line":6,"column":28,"nodeType":"728","messageId":"729","endLine":6,"endColumn":42},{"ruleId":"726","severity":1,"message":"863","line":6,"column":44,"nodeType":"728","messageId":"729","endLine":6,"endColumn":49},{"ruleId":"726","severity":1,"message":"777","line":6,"column":51,"nodeType":"728","messageId":"729","endLine":6,"endColumn":61},{"ruleId":"726","severity":1,"message":"970","line":7,"column":10,"nodeType":"728","messageId":"729","endLine":7,"endColumn":17},{"ruleId":"726","severity":1,"message":"971","line":8,"column":10,"nodeType":"728","messageId":"729","endLine":8,"endColumn":20},{"ruleId":"726","severity":1,"message":"751","line":18,"column":13,"nodeType":"728","messageId":"729","endLine":18,"endColumn":18},{"ruleId":"726","severity":1,"message":"752","line":18,"column":20,"nodeType":"728","messageId":"729","endLine":18,"endColumn":28},{"ruleId":"726","severity":1,"message":"972","line":21,"column":12,"nodeType":"728","messageId":"729","endLine":21,"endColumn":22},{"ruleId":"726","severity":1,"message":"819","line":26,"column":29,"nodeType":"728","messageId":"729","endLine":26,"endColumn":34},{"ruleId":"726","severity":1,"message":"842","line":66,"column":13,"nodeType":"728","messageId":"729","endLine":66,"endColumn":19},{"ruleId":"726","severity":1,"message":"973","line":3,"column":5,"nodeType":"728","messageId":"729","endLine":3,"endColumn":13},{"ruleId":"726","severity":1,"message":"974","line":4,"column":5,"nodeType":"728","messageId":"729","endLine":4,"endColumn":15},{"ruleId":"726","severity":1,"message":"975","line":7,"column":5,"nodeType":"728","messageId":"729","endLine":7,"endColumn":14},{"ruleId":"726","severity":1,"message":"976","line":12,"column":5,"nodeType":"728","messageId":"729","endLine":12,"endColumn":15},{"ruleId":"726","severity":1,"message":"977","line":14,"column":61,"nodeType":"728","messageId":"729","endLine":14,"endColumn":82},{"ruleId":"726","severity":1,"message":"973","line":2,"column":5,"nodeType":"728","messageId":"729","endLine":2,"endColumn":13},{"ruleId":"726","severity":1,"message":"974","line":3,"column":5,"nodeType":"728","messageId":"729","endLine":3,"endColumn":15},{"ruleId":"726","severity":1,"message":"975","line":6,"column":5,"nodeType":"728","messageId":"729","endLine":6,"endColumn":14},{"ruleId":"726","severity":1,"message":"976","line":11,"column":5,"nodeType":"728","messageId":"729","endLine":11,"endColumn":15},{"ruleId":"726","severity":1,"message":"750","line":13,"column":17,"nodeType":"728","messageId":"729","endLine":13,"endColumn":26},{"ruleId":"726","severity":1,"message":"731","line":13,"column":28,"nodeType":"728","messageId":"729","endLine":13,"endColumn":34},{"ruleId":"726","severity":1,"message":"778","line":13,"column":36,"nodeType":"728","messageId":"729","endLine":13,"endColumn":44},{"ruleId":"726","severity":1,"message":"973","line":2,"column":5,"nodeType":"728","messageId":"729","endLine":2,"endColumn":13},{"ruleId":"726","severity":1,"message":"974","line":3,"column":5,"nodeType":"728","messageId":"729","endLine":3,"endColumn":15},{"ruleId":"726","severity":1,"message":"975","line":6,"column":5,"nodeType":"728","messageId":"729","endLine":6,"endColumn":14},{"ruleId":"726","severity":1,"message":"976","line":11,"column":5,"nodeType":"728","messageId":"729","endLine":11,"endColumn":15},{"ruleId":"726","severity":1,"message":"750","line":13,"column":17,"nodeType":"728","messageId":"729","endLine":13,"endColumn":26},{"ruleId":"726","severity":1,"message":"731","line":13,"column":28,"nodeType":"728","messageId":"729","endLine":13,"endColumn":34},{"ruleId":"726","severity":1,"message":"778","line":13,"column":36,"nodeType":"728","messageId":"729","endLine":13,"endColumn":44},{"ruleId":"726","severity":1,"message":"978","line":14,"column":23,"nodeType":"728","messageId":"729","endLine":14,"endColumn":40},{"ruleId":"726","severity":1,"message":"977","line":14,"column":61,"nodeType":"728","messageId":"729","endLine":14,"endColumn":82},{"ruleId":"726","severity":1,"message":"979","line":6,"column":8,"nodeType":"728","messageId":"729","endLine":6,"endColumn":16},{"ruleId":"726","severity":1,"message":"980","line":7,"column":8,"nodeType":"728","messageId":"729","endLine":7,"endColumn":18},{"ruleId":"726","severity":1,"message":"981","line":8,"column":8,"nodeType":"728","messageId":"729","endLine":8,"endColumn":13},{"ruleId":"726","severity":1,"message":"982","line":9,"column":8,"nodeType":"728","messageId":"729","endLine":9,"endColumn":29},{"ruleId":"726","severity":1,"message":"983","line":10,"column":8,"nodeType":"728","messageId":"729","endLine":10,"endColumn":16},{"ruleId":"726","severity":1,"message":"984","line":11,"column":8,"nodeType":"728","messageId":"729","endLine":11,"endColumn":17},{"ruleId":"726","severity":1,"message":"985","line":12,"column":8,"nodeType":"728","messageId":"729","endLine":12,"endColumn":22},{"ruleId":"726","severity":1,"message":"986","line":13,"column":8,"nodeType":"728","messageId":"729","endLine":13,"endColumn":25},{"ruleId":"726","severity":1,"message":"987","line":14,"column":8,"nodeType":"728","messageId":"729","endLine":14,"endColumn":22},{"ruleId":"726","severity":1,"message":"974","line":15,"column":10,"nodeType":"728","messageId":"729","endLine":15,"endColumn":20},{"ruleId":"726","severity":1,"message":"795","line":3,"column":10,"nodeType":"728","messageId":"729","endLine":3,"endColumn":26},{"ruleId":"726","severity":1,"message":"803","line":1,"column":8,"nodeType":"728","messageId":"729","endLine":1,"endColumn":13},{"ruleId":"738","severity":1,"message":"988","line":9,"column":8,"nodeType":"740","endLine":9,"endColumn":10,"suggestions":"989"},{"ruleId":"726","severity":1,"message":"990","line":90,"column":5,"nodeType":"728","messageId":"729","endLine":90,"endColumn":9},{"ruleId":"726","severity":1,"message":"991","line":19,"column":31,"nodeType":"728","messageId":"729","endLine":19,"endColumn":48},{"ruleId":"726","severity":1,"message":"992","line":19,"column":50,"nodeType":"728","messageId":"729","endLine":19,"endColumn":55},{"ruleId":"726","severity":1,"message":"778","line":1,"column":17,"nodeType":"728","messageId":"729","endLine":1,"endColumn":25},{"ruleId":"726","severity":1,"message":"750","line":1,"column":27,"nodeType":"728","messageId":"729","endLine":1,"endColumn":36},{"ruleId":"726","severity":1,"message":"993","line":3,"column":10,"nodeType":"728","messageId":"729","endLine":3,"endColumn":18},{"ruleId":"738","severity":1,"message":"994","line":18,"column":8,"nodeType":"740","endLine":18,"endColumn":38,"suggestions":"995"},{"ruleId":"726","severity":1,"message":"896","line":5,"column":34,"nodeType":"728","messageId":"729","endLine":5,"endColumn":52},{"ruleId":"726","severity":1,"message":"911","line":5,"column":54,"nodeType":"728","messageId":"729","endLine":5,"endColumn":72},{"ruleId":"726","severity":1,"message":"996","line":13,"column":62,"nodeType":"728","messageId":"729","endLine":13,"endColumn":77},{"ruleId":"726","severity":1,"message":"997","line":14,"column":11,"nodeType":"728","messageId":"729","endLine":14,"endColumn":16},{"ruleId":"726","severity":1,"message":"998","line":15,"column":11,"nodeType":"728","messageId":"729","endLine":15,"endColumn":16},{"ruleId":"738","severity":1,"message":"999","line":96,"column":8,"nodeType":"740","endLine":96,"endColumn":57,"suggestions":"1000"},{"ruleId":"738","severity":1,"message":"1001","line":70,"column":8,"nodeType":"740","endLine":70,"endColumn":19,"suggestions":"1002"},{"ruleId":"738","severity":1,"message":"1003","line":76,"column":8,"nodeType":"740","endLine":76,"endColumn":15,"suggestions":"1004"},{"ruleId":"738","severity":1,"message":"1005","line":94,"column":8,"nodeType":"740","endLine":94,"endColumn":26,"suggestions":"1006"},{"ruleId":"726","severity":1,"message":"803","line":1,"column":8,"nodeType":"728","messageId":"729","endLine":1,"endColumn":13},{"ruleId":"738","severity":1,"message":"1007","line":53,"column":6,"nodeType":"740","endLine":53,"endColumn":13,"suggestions":"1008"},{"ruleId":"738","severity":1,"message":"1009","line":73,"column":6,"nodeType":"740","endLine":73,"endColumn":21,"suggestions":"1010"},{"ruleId":"738","severity":1,"message":"1011","line":15,"column":8,"nodeType":"740","endLine":15,"endColumn":23,"suggestions":"1012"},"no-unused-vars","'useParams' is defined but never used.","Identifier","unusedVar","'theme' is assigned a value but never used.","'useRef' is defined but never used.","'KeymetricsChart' is defined but never used.","'Financials' is defined but never used.","'CompanySection' is defined but never used.","'userActivity' is defined but never used.","'useTemporaryPossesions' is defined but never used.","'authService' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["1013"],"'open' is assigned a value but never used.","'width' is assigned a value but never used.","'setWidth' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.",["1014"],["1015"],"'Button' is defined but never used.","'Chip' is defined but never used.","'useEffect' is defined but never used.","'state' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'handleSearch' is assigned a value but never used.","no-native-reassign",["1016"],"no-negated-in-lhs",["1017"],"React Hook useEffect has missing dependencies: 'location', 'params', and 'tickar'. Either include them or remove the dependency array.",["1018"],"React Hook useEffect has missing dependencies: 'dispatch' and 'ticker'. Either include them or remove the dependency array.",["1019"],"React Hook useEffect has an unnecessary dependency: 'keyMetricsRef.current'. Either exclude it or remove the dependency array. Mutable values like 'keyMetricsRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["1020"],["1016"],["1017"],"'Nasdaq' is defined but never used.","'SP500' is defined but never used.",["1016"],["1017"],"React Hook useEffect has a missing dependency: 'getMarketValueByStock'. Either include it or remove the dependency array.",["1021"],["1016"],["1017"],"'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'Typography' is defined but never used.","'useState' is defined but never used.","'Linechart' is defined but never used.","'useDataLayer' is defined but never used.","'DetailsSquare' is defined but never used.",["1016"],["1017"],"React Hook useEffect has a missing dependency: 'handleSorting'. Either include it or remove the dependency array. If 'handleSorting' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1022"],["1016"],["1017"],["1016"],["1017"],"'Divider' is defined but never used.","'handleClickOpen' is assigned a value but never used.","'useContext' is defined but never used.","'Context' is defined but never used.","'handleSubmita' is assigned a value but never used.","'useFetchWithCors' is defined but never used.","'NewsItemOver' is defined but never used.","'CompassCalibrationOutlined' is defined but never used.","'isLoadingImgs' is assigned a value but never used.","'showingSkeletong' is assigned a value but never used.","'setShowingSkeleton' is assigned a value but never used.","Assignments to the 'debounceTimer' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","'React' is defined but never used.","'milisencondsInADay' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'generateSerie', and 'updateSerie'. Either include them or remove the dependency array.",["1023"],["1016"],["1017"],"React Hook useEffect has missing dependencies: 'dispatch', 'fromOwnServer', 'isInState', 'topic', and 'url'. Either include them or remove the dependency array. If 'setRequest' needs the current value of 'fromOwnServer', you can also switch to useReducer instead of useState and read 'fromOwnServer' in the reducer.",["1024"],"'url' is assigned a value but never used.","'TextField' is defined but never used.","'Autocomplete' is defined but never used.","'CircularProgress' is defined but never used.","'SettingsSystemDaydreamTwoTone' is defined but never used.","'query' is assigned a value but never used.","'setQuery' is assigned a value but never used.","'setOpen' is assigned a value but never used.","'error' is assigned a value but never used.","'handleSelection' is assigned a value but never used.","'dimensions' is assigned a value but never used.","'upper' is assigned a value but never used.","'handleBlur' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'opened', 'setShowOverlay', and 'setTickerMove'. Either include them or remove the dependency array.",["1025"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-unreachable","Unreachable code.","unreachableCode","React Hook useEffect has a missing dependency: 'ticker'. Either include it or remove the dependency array. If 'setData' needs the current value of 'ticker', you can also switch to useReducer instead of useState and read 'ticker' in the reducer.",["1026"],"React Hook useEffect has missing dependencies: 'dispatch', 'state.keymetrics', and 'ticker'. Either include them or remove the dependency array.",["1027"],"'useLayoutEffect' is defined but never used.","'useUILayer' is defined but never used.","React Hook useEffect has a missing dependency: 'prepareData'. Either include it or remove the dependency array.",["1028"],"'ohlNA' is assigned a value but never used.","'volume' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'company', 'dispatch', and 'state.financials'. Either include them or remove the dependency array.",["1029"],"React Hook useEffect has a missing dependency: 'handleGetFieldData'. Either include it or remove the dependency array.",["1030"],"Block is redundant.","redundantBlock","'App' is defined but never used.","'Route' is defined but never used.",["1016"],["1017"],"React Hook useEffect has a missing dependency: 'userDispatch'. Either include it or remove the dependency array.",["1031"],"'iteration' is assigned a value but never used.",["1032"],"'Box' is defined but never used.","'InboxIcon' is defined but never used.","'TreeItem' is defined but never used.","'loading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["1033"],"'Paper' is defined but never used.","'LateralSection' is defined but never used.","'Marcador2' is defined but never used.","'Component' is assigned a value but never used.","'posessionsReady' is assigned a value but never used.","'CovidSection2' is defined but never used.","'News' is defined but never used.",["1016"],["1017"],"'chart' is defined but never used.",["1034"],"'Search' is defined but never used.","'Searcher' is defined but never used.","'loadingQuotes' is assigned a value but never used.","'errorQuotes' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'state.currentPossesions.stocks'. Either include it or remove the dependency array.",["1035"],"'backToInitial' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'readyState'. Either include it or remove the dependency array.",["1036"],"React Hook useEffect has missing dependencies: 'datos', 'dispatch', 'field', 'isInState', 'options.explicitUrl', 'state', and 'url'. Either include them or remove the dependency array. If 'setRequest' needs the current value of 'field', you can also switch to useReducer instead of useState and read 'field' in the reducer.",["1037"],"React Hook useEffect has missing dependencies: 'field' and 'ticker'. Either include them or remove the dependency array. If 'setRequest' needs the current value of 'field', you can also switch to useReducer instead of useState and read 'field' in the reducer.",["1038"],"'IndexesChart2' is defined but never used.","'MiniatureChart' is defined but never used.","'CustomCircularProgress' is defined but never used.","'useFetch' is defined but never used.","'category' is assigned a value but never used.","'subCategory' is assigned a value but never used.","'options' is assigned a value but never used.","'loading2' is assigned a value but never used.","'error2' is assigned a value but never used.","'convertUnixToHuman' is defined but never used.","'getLastValidPrice' is assigned a value but never used.","'change' is defined but never used.","'lastDate' is defined but never used.","'lastIncome' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'generateSerie'. Either include them or remove the dependency array.",["1039"],["1016"],["1017"],"no-dupe-keys","Duplicate key 'plotBorderWidth'.","ObjectExpression","unexpected","React Hook useEffect has missing dependencies: 'dispatch' and 'generateSerieFromBegining'. Either include them or remove the dependency array.",["1040"],"'milisencondsInADay' is defined but never used.","React Hook useEffect has a missing dependency: 'prepareDataset'. Either include it or remove the dependency array.",["1041"],"'useViewport' is defined but never used.","React Hook useEffect has a missing dependency: 'chartInstance'. Either include it or remove the dependency array.",["1042"],"dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"1043","text":"1044"},"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","React Hook useEffect has a missing dependency: '__init'. Either include it or remove the dependency array.",["1045"],"React Hook useEffect has missing dependencies: 'dispatch', 'getPricesHistoryMissingTicker', 'state.setPruebaReady', and 'updateData'. Either include them or remove the dependency array.",["1046"],"'makeStyles' is defined but never used.","'Slider' is defined but never used.","'absolutePopulationData' is assigned a value but never used.","'population' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'blackList', 'findPopulation', and 'loadingHuge'. Either include them or remove the dependency array.",["1047"],"'ClickAwayListener' is defined but never used.","'DoneIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'setChosenFields'. Either include it or remove the dependency array. If 'setChosenFields' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1048"],"'convertHumanToUnix' is defined but never used.","React Hook useEffect has missing dependencies: 'state.portfolioHistoryByCompany' and 'ticker'. Either include them or remove the dependency array.",["1049"],"'useAuth' is defined but never used.","'getHumanDate' is assigned a value but never used.","'date' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'modalOpen'. Either include it or remove the dependency array.",["1050"],"'arrayMin' is defined but never used.","'fetching' is assigned a value but never used.","'pfetching' is assigned a value but never used.","'perror' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'state.peers' and 'ticker'. Either include them or remove the dependency array. If 'setPeersData' needs the current value of 'ticker', you can also switch to useReducer instead of useState and read 'ticker' in the reducer.",["1051"],"React Hook useEffect has missing dependencies: 'dispatch', 'state.peers', and 'ticker'. Either include them or remove the dependency array.",["1052"],"'Searcher2' is defined but never used.","'Indices' is defined but never used.",["1053"],["1054"],"React Hook useEffect has a missing dependency: 'setListHeight'. Either include it or remove the dependency array. If 'setListHeight' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1055"],"'datos' is assigned a value but never used.","'readyTickers' is assigned a value but never used.","'TableContainer' is defined but never used.","'TableHead' is defined but never used.","'UiReducer' is assigned a value but never used.","'responsive' is assigned a value but never used.","'allData' is assigned a value but never used.","'LinearProgress' is defined but never used.","'TableUI' is defined but never used.","'KeyMetrics' is defined but never used.","'isBuilding' is assigned a value but never used.","'Collapse' is defined but never used.","'IconButton' is defined but never used.","'TableBody' is defined but never used.","'withStyles' is defined but never used.","'TableSubSubtitleChunk' is defined but never used.","'TableSectionAlone' is defined but never used.","'MailIcon' is defined but never used.","'DeleteIcon' is defined but never used.","'Label' is defined but never used.","'SupervisorAccountIcon' is defined but never used.","'InfoIcon' is defined but never used.","'ForumIcon' is defined but never used.","'LocalOfferIcon' is defined but never used.","'ArrowDropDownIcon' is defined but never used.","'ArrowRightIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'setMountApproval'. Either include it or remove the dependency array.",["1056"],"'data' is assigned a value but never used.","'changesPercentage' is assigned a value but never used.","'price' is assigned a value but never used.","'Marcador' is defined but never used.","React Hook useEffect has a missing dependency: 'state.currentPossesions'. Either include it or remove the dependency array.",["1057"],"'companiesChange' is assigned a value but never used.","'data1' is assigned a value but never used.","'data2' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'state.currentPossesions.stocks', 'state.generatedSeries.dates', and 'state.portfolioHistory'. Either include them or remove the dependency array.",["1058"],"React Hook useEffect has a missing dependency: 'recursivadorStyle'. Either include it or remove the dependency array.",["1059"],"React Hook useEffect has a missing dependency: 'setMode'. Either include it or remove the dependency array. If 'setMode' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1060"],"React Hook useEffect has a missing dependency: 'setDate'. Either include it or remove the dependency array. If 'setDate' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1061"],"React Hook useEffect has missing dependencies: 'datos', 'dispatch', 'isInState', 'options.explicitUrl', 'state.indexes', 'ticker', and 'url'. Either include them or remove the dependency array. If 'setRequest' needs the current value of 'ticker', you can also switch to useReducer instead of useState and read 'ticker' in the reducer.",["1062"],"React Hook useEffect has missing dependencies: 'field', 'state', and 'ticker'. Either include them or remove the dependency array. If 'setRequest' needs the current value of 'field', you can also switch to useReducer instead of useState and read 'field' in the reducer.",["1063"],"React Hook useEffect has a missing dependency: 'datos.symbol'. Either include it or remove the dependency array.",["1064"],{"desc":"1065","fix":"1066"},{"desc":"1067","fix":"1068"},{"desc":"1069","fix":"1070"},"no-global-assign","no-unsafe-negation",{"desc":"1071","fix":"1072"},{"desc":"1073","fix":"1074"},{"desc":"1075","fix":"1076"},{"desc":"1077","fix":"1078"},{"desc":"1079","fix":"1080"},{"desc":"1081","fix":"1082"},{"desc":"1083","fix":"1084"},{"desc":"1085","fix":"1086"},{"desc":"1087","fix":"1088"},{"desc":"1089","fix":"1090"},{"desc":"1091","fix":"1092"},{"desc":"1093","fix":"1094"},{"desc":"1095","fix":"1096"},{"desc":"1097","fix":"1098"},{"desc":"1099","fix":"1100"},{"desc":"1101","fix":"1102"},{"desc":"1091","fix":"1103"},{"desc":"1104","fix":"1105"},{"desc":"1106","fix":"1107"},{"desc":"1108","fix":"1109"},{"desc":"1110","fix":"1111"},{"desc":"1112","fix":"1113"},{"desc":"1114","fix":"1115"},{"desc":"1116","fix":"1117"},{"desc":"1118","fix":"1119"},[1860,1879],"\r\n                .",{"desc":"1120","fix":"1121"},{"desc":"1122","fix":"1123"},{"desc":"1124","fix":"1125"},{"desc":"1126","fix":"1127"},{"desc":"1128","fix":"1129"},{"desc":"1130","fix":"1131"},{"desc":"1132","fix":"1133"},{"desc":"1134","fix":"1135"},{"desc":"1087","fix":"1136"},{"desc":"1089","fix":"1137"},{"desc":"1138","fix":"1139"},{"desc":"1140","fix":"1141"},{"desc":"1142","fix":"1143"},{"desc":"1144","fix":"1145"},{"desc":"1146","fix":"1147"},{"desc":"1148","fix":"1149"},{"desc":"1150","fix":"1151"},{"desc":"1152","fix":"1153"},{"desc":"1154","fix":"1155"},{"desc":"1156","fix":"1157"},"Update the dependencies array to be: [dispatch, userState]",{"range":"1158","text":"1159"},"Update the dependencies array to be: [dispatch, history, selection]",{"range":"1160","text":"1161"},"Update the dependencies array to be: [dispatch, state.currentCompany]",{"range":"1162","text":"1163"},"Update the dependencies array to be: [location, params, tickar]",{"range":"1164","text":"1165"},"Update the dependencies array to be: [dispatch, tickar, ticker]",{"range":"1166","text":"1167"},"Update the dependencies array to be: []",{"range":"1168","text":"1169"},"Update the dependencies array to be: [stocks, state.areHistoricPricesReady, getMarketValueByStock]",{"range":"1170","text":"1171"},"Update the dependencies array to be: [handleSorting, selected]",{"range":"1172","text":"1173"},"Update the dependencies array to be: [state.generatedSeries, state.areHistoricPricesReady, state.areGeneratedSeriesReady, generateSerie, dispatch, updateSerie]",{"range":"1174","text":"1175"},"Update the dependencies array to be: [dispatch, fromOwnServer, isInState, topic, url]",{"range":"1176","text":"1177"},"Update the dependencies array to be: [data, opened, setShowOverlay, setTickerMove]",{"range":"1178","text":"1179"},"Update the dependencies array to be: [state, ticker]",{"range":"1180","text":"1181"},"Update the dependencies array to be: [data, dispatch, state.keymetrics, ticker]",{"range":"1182","text":"1183"},"Update the dependencies array to be: [datos, prepareData]",{"range":"1184","text":"1185"},"Update the dependencies array to be: [company, data, dispatch, state.financials]",{"range":"1186","text":"1187"},"Update the dependencies array to be: [field, handleGetFieldData]",{"range":"1188","text":"1189"},"Update the dependencies array to be: [authState, authService, userDispatch]",{"range":"1190","text":"1191"},"Update the dependencies array to be: [dispatch, state.userActivity]",{"range":"1192","text":"1193"},"Update the dependencies array to be: [fetchData]",{"range":"1194","text":"1195"},{"range":"1196","text":"1185"},"Update the dependencies array to be: [logos, success, quotes, companiesChange, state.currentPossesions.stocks]",{"range":"1197","text":"1198"},"Update the dependencies array to be: [query, readyState]",{"range":"1199","text":"1200"},"Update the dependencies array to be: [datos, dispatch, field, isInState, options.explicitUrl, state, ticker, url]",{"range":"1201","text":"1202"},"Update the dependencies array to be: [field, state, ticker]",{"range":"1203","text":"1204"},"Update the dependencies array to be: [state.generatedSeries, state.areHistoricPricesReady, state.areGeneratedSeriesReady, generateSerie, dispatch]",{"range":"1205","text":"1206"},"Update the dependencies array to be: [state.userActivity, state.portfolioHistory, generateSerieFromBegining, dispatch]",{"range":"1207","text":"1208"},"Update the dependencies array to be: [state.companiesImpact, areGeneratedSeriesReady, prepareDataset]",{"range":"1209","text":"1210"},"Update the dependencies array to be: [chartInstance, sidebarOpen]",{"range":"1211","text":"1212"},"Update the dependencies array to be: [__init, state.setPruebaReady]",{"range":"1213","text":"1214"},"Update the dependencies array to be: [dispatch, getPricesHistoryMissingTicker, missingTicker, state.setPruebaReady, updateData]",{"range":"1215","text":"1216"},"Update the dependencies array to be: [blackList, date, findPopulation, loadingHuge, mode, population.data]",{"range":"1217","text":"1218"},"Update the dependencies array to be: [selections, setChosenFields]",{"range":"1219","text":"1220"},"Update the dependencies array to be: [state.portfolioHistoryByCompany, ticker]",{"range":"1221","text":"1222"},"Update the dependencies array to be: [modalOpen, state.currentPossesions.userCash]",{"range":"1223","text":"1224"},"Update the dependencies array to be: [state.peers, ticker]",{"range":"1225","text":"1226"},"Update the dependencies array to be: [dispatch, peerTickers, state.peers, ticker]",{"range":"1227","text":"1228"},{"range":"1229","text":"1181"},{"range":"1230","text":"1183"},"Update the dependencies array to be: [data, setListHeight]",{"range":"1231","text":"1232"},"Update the dependencies array to be: [setMountApproval]",{"range":"1233","text":"1234"},"Update the dependencies array to be: [state.areHistoricPricesReady, state.currentPossesions]",{"range":"1235","text":"1236"},"Update the dependencies array to be: [areHistoricPricesReady, areGeneratedSeriesReady, state.currentPossesions.stocks, state.generatedSeries.dates, state.portfolioHistory, dispatch]",{"range":"1237","text":"1238"},"Update the dependencies array to be: [recursivadorStyle, sliderDay]",{"range":"1239","text":"1240"},"Update the dependencies array to be: [setMode, value]",{"range":"1241","text":"1242"},"Update the dependencies array to be: [month, day, year, setDate]",{"range":"1243","text":"1244"},"Update the dependencies array to be: [datos, dispatch, field, isInState, options.explicitUrl, state.indexes, ticker, url]",{"range":"1245","text":"1246"},"Update the dependencies array to be: [field, state, state.indexes, ticker]",{"range":"1247","text":"1248"},"Update the dependencies array to be: [chartSelected, datos.symbol]",{"range":"1249","text":"1250"},[3391,3402],"[dispatch, userState]",[4421,4432],"[dispatch, history, selection]",[4662,4684],"[dispatch, state.currentCompany]",[1007,1009],"[location, params, tickar]",[1206,1214],"[dispatch, tickar, ticker]",[1352,1375],"[]",[1651,1689],"[stocks, state.areHistoricPricesReady, getMarketValueByStock]",[408,418],"[handleSorting, selected]",[8798,8882],"[state.generatedSeries, state.areHistoricPricesReady, state.areGeneratedSeriesReady, generateSerie, dispatch, updateSerie]",[1878,1880],"[dispatch, fromOwnServer, isInState, topic, url]",[2833,2839],"[data, opened, setShowOverlay, setTickerMove]",[1466,1473],"[state, ticker]",[1655,1661],"[data, dispatch, state.keymetrics, ticker]",[778,785],"[datos, prepareData]",[1089,1095],"[company, data, dispatch, state.financials]",[1894,1901],"[field, handleGetFieldData]",[574,598],"[authState, authService, userDispatch]",[1228,1248],"[dispatch, state.userActivity]",[1747,1749],"[fetchData]",[1480,1487],[3886,3927],"[logos, success, quotes, companiesChange, state.currentPossesions.stocks]",[5711,5718],"[query, readyState]",[1401,1409],"[datos, dispatch, field, isInState, options.explicitUrl, state, ticker, url]",[1855,1862],"[field, state, ticker]",[10777,10861],"[state.generatedSeries, state.areHistoricPricesReady, state.areGeneratedSeriesReady, generateSerie, dispatch]",[20457,20501],"[state.userActivity, state.portfolioHistory, generateSerieFromBegining, dispatch]",[2479,2527],"[state.companiesImpact, areGeneratedSeriesReady, prepareDataset]",[563,576],"[chartInstance, sidebarOpen]",[7054,7076],"[__init, state.setPruebaReady]",[7772,7787],"[dispatch, getPricesHistoryMissingTicker, missingTicker, state.setPruebaReady, updateData]",[4494,4523],"[blackList, date, findPopulation, loadingHuge, mode, population.data]",[1533,1545],"[selections, setChosenFields]",[1044,1046],"[state.portfolioHistoryByCompany, ticker]",[4463,4497],"[modalOpen, state.currentPossesions.userCash]",[1658,1660],"[state.peers, ticker]",[3168,3181],"[dispatch, peerTickers, state.peers, ticker]",[1296,1303],[1503,1509],[1740,1746],"[data, setListHeight]",[240,242],"[setMountApproval]",[762,792],"[state.areHistoricPricesReady, state.currentPossesions]",[4485,4534],"[areHistoricPricesReady, areGeneratedSeriesReady, state.currentPossesions.stocks, state.generatedSeries.dates, state.portfolioHistory, dispatch]",[2150,2161],"[recursivadorStyle, sliderDay]",[2257,2264],"[setMode, value]",[2798,2816],"[month, day, year, setDate]",[1422,1429],"[datos, dispatch, field, isInState, options.explicitUrl, state.indexes, ticker, url]",[1938,1953],"[field, state, state.indexes, ticker]",[617,632],"[chartSelected, datos.symbol]"]