[{"C:\\Users\\gonza\\finance-app\\src\\SignIn.js":"1","C:\\Users\\gonza\\finance-app\\src\\App.js":"2","C:\\Users\\gonza\\finance-app\\src\\AppWithRouterAccess.js":"3","C:\\Users\\gonza\\finance-app\\src\\RegistrationForm.js":"4","C:\\Users\\gonza\\finance-app\\src\\index.js":"5","C:\\Users\\gonza\\finance-app\\src\\portfolio\\StockShop.js":"6","C:\\Users\\gonza\\finance-app\\src\\portfolio\\logicPruebasConAdd.js":"7","C:\\Users\\gonza\\finance-app\\src\\portfolio\\Engine.js":"8","C:\\Users\\gonza\\finance-app\\src\\portfolio\\portfolioGenerator.js":"9","C:\\Users\\gonza\\finance-app\\src\\Context.js":"10","C:\\Users\\gonza\\finance-app\\src\\useTemporaryPossesions.js":"11","C:\\Users\\gonza\\finance-app\\src\\components\\Navbar.js":"12","C:\\Users\\gonza\\finance-app\\src\\dashboard\\UserMain.js":"13","C:\\Users\\gonza\\finance-app\\src\\charts\\KeymetricsChart.js":"14","C:\\Users\\gonza\\finance-app\\src\\dashboard\\Middleware.js":"15","C:\\Users\\gonza\\finance-app\\src\\views\\principal\\principal.js":"16","C:\\Users\\gonza\\finance-app\\src\\portfolio\\PortfolioPriceChart.js":"17","C:\\Users\\gonza\\finance-app\\src\\utils\\useFetch.js":"18","C:\\Users\\gonza\\finance-app\\src\\views\\principal\\elements\\Indices.js":"19","C:\\Users\\gonza\\finance-app\\src\\views\\covid\\Sliders.js":"20","C:\\Users\\gonza\\finance-app\\src\\components\\Cell.js":"21","C:\\Users\\gonza\\finance-app\\src\\charts\\MiniatureChartIndex.js":"22","C:\\Users\\gonza\\finance-app\\src\\utils\\useFatch.js":"23","C:\\Users\\gonza\\finance-app\\src\\components\\Searcher.js":"24","C:\\Users\\gonza\\finance-app\\src\\SignInForm.js":"25","C:\\Users\\gonza\\finance-app\\src\\dashboard\\StockDispatcher.js":"26","C:\\Users\\gonza\\finance-app\\src\\utils\\useViewport.js":"27","C:\\Users\\gonza\\finance-app\\src\\views\\principal\\elements\\Gainers.js":"28","C:\\Users\\gonza\\finance-app\\src\\views\\company\\TableUI.js":"29","C:\\Users\\gonza\\finance-app\\src\\views\\indexes\\SP500.js":"30","C:\\Users\\gonza\\finance-app\\src\\views\\indexes\\IndexesGeneral.js":"31","C:\\Users\\gonza\\finance-app\\src\\views\\company\\DetailsSquare.js":"32","C:\\Users\\gonza\\finance-app\\src\\portfolio\\PurchaseDialog.js":"33","C:\\Users\\gonza\\finance-app\\src\\charts\\IndexesChart.js":"34","C:\\Users\\gonza\\finance-app\\src\\ContextUI.js":"35","C:\\Users\\gonza\\finance-app\\src\\views\\company\\CompanySection.js":"36","C:\\Users\\gonza\\finance-app\\src\\utils\\useMesure.js":"37","C:\\Users\\gonza\\finance-app\\src\\views\\principal\\elements\\Sectors.js":"38","C:\\Users\\gonza\\finance-app\\src\\views\\company\\KeyMetrics.js":"39","C:\\Users\\gonza\\finance-app\\src\\charts\\CovidMap.js":"40","C:\\Users\\gonza\\finance-app\\src\\views\\indexes\\ChartIndex.js":"41","C:\\Users\\gonza\\finance-app\\src\\components\\TransitionComponent.js":"42","C:\\Users\\gonza\\finance-app\\src\\components\\Sidebar.js":"43","C:\\Users\\gonza\\finance-app\\src\\portfolio\\logicPruebas.js":"44","C:\\Users\\gonza\\finance-app\\src\\views\\principal\\elements\\News.js":"45","C:\\Users\\gonza\\finance-app\\src\\components\\components\\CustomCircularProgress.js":"46","C:\\Users\\gonza\\finance-app\\src\\views\\company\\BottomSection.js":"47","C:\\Users\\gonza\\finance-app\\src\\charts\\CustomAreaChart.js":"48","C:\\Users\\gonza\\finance-app\\src\\charts\\GeneralIndexDispatcher.js":"49","C:\\Users\\gonza\\finance-app\\src\\utils\\useFetchWithCors.js":"50","C:\\Users\\gonza\\finance-app\\src\\portfolio\\portfolioGenerator2.js":"51"},{"size":489,"mtime":1608059449158,"results":"52","hashOfConfig":"53"},{"size":6138,"mtime":1608294346008,"results":"54","hashOfConfig":"53"},{"size":1214,"mtime":1608063725566,"results":"55","hashOfConfig":"53"},{"size":3215,"mtime":1608062225211,"results":"56","hashOfConfig":"53"},{"size":947,"mtime":1608063725567,"results":"57","hashOfConfig":"53"},{"size":5439,"mtime":1608225082362,"results":"58","hashOfConfig":"53"},{"size":25735,"mtime":1608319897660,"results":"59","hashOfConfig":"53"},{"size":10063,"mtime":1608231470647,"results":"60","hashOfConfig":"53"},{"size":7455,"mtime":1608316474189,"results":"61","hashOfConfig":"53"},{"size":9872,"mtime":1608225373409,"results":"62","hashOfConfig":"53"},{"size":1562,"mtime":1608225605796,"results":"63","hashOfConfig":"53"},{"size":5681,"mtime":1608225605796,"results":"64","hashOfConfig":"53"},{"size":2216,"mtime":1608210584497,"results":"65","hashOfConfig":"53"},{"size":4428,"mtime":1606479538024,"results":"66","hashOfConfig":"53"},{"size":1373,"mtime":1608210767414,"results":"67","hashOfConfig":"53"},{"size":1147,"mtime":1608320378309,"results":"68","hashOfConfig":"53"},{"size":2909,"mtime":1608320247258,"results":"69","hashOfConfig":"53"},{"size":2305,"mtime":1606484616583,"results":"70","hashOfConfig":"53"},{"size":830,"mtime":1605811574797,"results":"71","hashOfConfig":"53"},{"size":5380,"mtime":1606586616784,"results":"72","hashOfConfig":"53"},{"size":220,"mtime":1604921109937,"results":"73","hashOfConfig":"53"},{"size":2548,"mtime":1607002043070,"results":"74","hashOfConfig":"53"},{"size":2424,"mtime":1605785592357,"results":"75","hashOfConfig":"53"},{"size":3556,"mtime":1606599024443,"results":"76","hashOfConfig":"53"},{"size":1868,"mtime":1607984690320,"results":"77","hashOfConfig":"53"},{"size":2551,"mtime":1607890229872,"results":"78","hashOfConfig":"53"},{"size":463,"mtime":1606078800550,"results":"79","hashOfConfig":"53"},{"size":1114,"mtime":1606594660041,"results":"80","hashOfConfig":"53"},{"size":2429,"mtime":1605532169325,"results":"81","hashOfConfig":"53"},{"size":154,"mtime":1605711412858,"results":"82","hashOfConfig":"53"},{"size":4807,"mtime":1607003068471,"results":"83","hashOfConfig":"53"},{"size":2164,"mtime":1605640036088,"results":"84","hashOfConfig":"53"},{"size":1682,"mtime":1607699266520,"results":"85","hashOfConfig":"53"},{"size":4147,"mtime":1605804791338,"results":"86","hashOfConfig":"53"},{"size":411,"mtime":1605630174695,"results":"87","hashOfConfig":"53"},{"size":1764,"mtime":1607950583565,"results":"88","hashOfConfig":"53"},{"size":649,"mtime":1606232051393,"results":"89","hashOfConfig":"53"},{"size":809,"mtime":1606596100778,"results":"90","hashOfConfig":"53"},{"size":822,"mtime":1607949143110,"results":"91","hashOfConfig":"53"},{"size":3360,"mtime":1606585290855,"results":"92","hashOfConfig":"53"},{"size":897,"mtime":1605786156851,"results":"93","hashOfConfig":"53"},{"size":1989,"mtime":1607005895516,"results":"94","hashOfConfig":"53"},{"size":7735,"mtime":1606324012726,"results":"95","hashOfConfig":"53"},{"size":20608,"mtime":1608151315097,"results":"96","hashOfConfig":"53"},{"size":3020,"mtime":1608298615712,"results":"97","hashOfConfig":"53"},{"size":678,"mtime":1605543956683,"results":"98","hashOfConfig":"53"},{"size":873,"mtime":1606666875691,"results":"99","hashOfConfig":"53"},{"size":3498,"mtime":1607890160675,"results":"100","hashOfConfig":"53"},{"size":1235,"mtime":1607005895515,"results":"101","hashOfConfig":"53"},{"size":2778,"mtime":1606487634588,"results":"102","hashOfConfig":"53"},{"size":9558,"mtime":1608319320103,"results":"103","hashOfConfig":"53"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vy415x",{"filePath":"106","messages":"107","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"112"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"112"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"112"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"112"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"112"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"112"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"112"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"112"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"171"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"178","messages":"179","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"112"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"171"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"171"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"171"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"112"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"112"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"112"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"218","messages":"219","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"222","messages":"223","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"224","messages":"225","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\gonza\\finance-app\\src\\SignIn.js",[],"C:\\Users\\gonza\\finance-app\\src\\App.js",["226","227","228","229"],"C:\\Users\\gonza\\finance-app\\src\\AppWithRouterAccess.js",[],"C:\\Users\\gonza\\finance-app\\src\\RegistrationForm.js",[],["230","231"],"C:\\Users\\gonza\\finance-app\\src\\index.js",["232","233","234"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"./styles/main.css\"\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport { ContextProvider } from './Context';\nimport { UIProvider } from './ContextUI';\nimport { AppWithRouterAccess } from './AppWithRouterAccess';\n\n //hasrouter won't work with okta\nReactDOM.render(\n  <React.StrictMode>\n    <ContextProvider>\n      <UIProvider>\n        <BrowserRouter>\n            <AppWithRouterAccess />\n        </BrowserRouter>\n      </UIProvider>\n    </ContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n{/*</Security> */ }\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","C:\\Users\\gonza\\finance-app\\src\\portfolio\\StockShop.js",["235","236","237"],"C:\\Users\\gonza\\finance-app\\src\\portfolio\\logicPruebasConAdd.js",["238"],"C:\\Users\\gonza\\finance-app\\src\\portfolio\\Engine.js",["239","240","241","242","243","244","245","246","247","248"],"import React, { useEffect, useRef, useState } from \"react\"\r\nimport { useDataLayer } from \"../Context\"\r\nimport { convertHumanToUnix } from \"../utils/datesUtils\"\r\nimport { useLogicPruebas } from \"./logicPruebasConAdd\"\r\nimport { PortfolioGenerator } from \"./portfolioGenerator\"\r\nimport { PortfolioPriceChart } from \"./PortfolioPriceChart\"\r\n\r\n\r\n//1. Deducimos del historial de operaciones los Tickers que necesitamos\r\n//2. Enviamos esos tickers a nuestro servidor, obtnemos sus precios historicos y los devolvemos de vuelta\r\n//3. combinamos y tranformamos esos precios en el cliente y guardamos el resultado en el estado\r\n//4. el resultado nos sirve para conocer el precio de todas las acciones para cualquier fecha y consultarlo de manera muy eficiente\r\n\r\n\r\nexport const useEngine = () => {\r\n\r\n    useLogicPruebas()\r\n\r\n    const [tickers, setTickers] = useState([])\r\n    const [allData, setAllData] = useState([])\r\n    const [missingTicker, setMissingTicker] = useState([])\r\n    const { state, dispatch } = useDataLayer()\r\n    const userRefreshed = useRef(true)\r\n    const getAllTickers = () => {\r\n        console.log(state.currentPossesions.stocks, \"que mirda\")\r\n        console.log(state.stockLibrary, \"aver3\")\r\n        let tickars = []\r\n        state.stockLibrary.forEach(item => {\r\n            tickars = [...tickars, item.toUpperCase()]\r\n        })\r\n        // const tickars = state.currentPossesions.stocks.map((item) => item.ticker.toUpperCase())\r\n        // let tickars = []\r\n        // state.userActivity.forEach(operation => {\r\n        //     const { ticker } = operation.details;\r\n        //     if (!tickars.includes(ticker.toUpperCase())) tickars = [...tickars, ticker.toUpperCase()]\r\n        // })\r\n        return tickars\r\n    }\r\n    //WHAT if we don't have any ticker yet??\r\n    const getMissingTicker = () => {\r\n        let _missingTickers = []\r\n        // console.log(JSON.parse(JSON.stringify(state.portfolioHistoryByCompany)), \"que wubu\")\r\n        console.log(JSON.parse(JSON.stringify(state.stockLibrary)), \"que wubu\")\r\n        console.log(state.stockLibrary, \"que wubu2\")\r\n        console.log(JSON.parse(JSON.stringify(tickers)), \"que wubu1\")\r\n        // Object.keys(state.portfolioHistoryByCompany).forEach(ticker => {\r\n        //     if (!tickers.includes(ticker)) {\r\n        //         _missingTickers = [...missingTicker, ticker]\r\n        //     }\r\n        // })\r\n        state.stockLibrary.forEach(ticker => {\r\n            if (!tickers.includes(ticker.toUpperCase())) {\r\n                _missingTickers = [...missingTicker, ticker]\r\n            }\r\n        })\r\n        console.log(_missingTickers, \"jodaaaaaaaaaar\")\r\n        return _missingTickers\r\n    }\r\n    const getNewCompanyPrices = () => {\r\n\r\n    }\r\n    const getPricesHistory = async (tickers) => {\r\n        console.log(tickers, \"tiiiiiiiiiiii\")\r\n        try {\r\n            const request = await fetch(\"http://localhost:8001/portfolio\", {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                method: \"POST\",\r\n                body: JSON.stringify(tickers)\r\n            })\r\n            const data = await request.json()\r\n            return data\r\n        }\r\n        catch (err) {\r\n            throw new Error(err, \" aquiii puta\")\r\n        }\r\n    }\r\n\r\n    //only one at a time right now\r\n    const updateData = (data, cb) => {\r\n        const newCompanyData = data[0][missingTicker]\r\n        let portfolioHistoryCopy = { ...state.portfolioHistory }\r\n        let portfolioHistoryByCompanyCopy = { ...state.portfolioHistoryByCompany }\r\n        console.log(portfolioHistoryCopy, \"que wobo\")\r\n        console.log(newCompanyData, \"ku pasau\")\r\n        newCompanyData.forEach(register => {\r\n            const date = register.date.split(\"T\")[0]\r\n            if (state.portfolioHistory[date]) {\r\n                portfolioHistoryCopy[date] = {\r\n                    ...portfolioHistoryCopy[date],\r\n                    [missingTicker]: { close: register.close }\r\n                }\r\n            }\r\n            else {\r\n                portfolioHistoryCopy[date] = {\r\n                    [missingTicker]: { close: register.close }\r\n                }\r\n            }\r\n        })\r\n        let newCompanyChartData = newCompanyData.map(register => {\r\n            const date = register.date.split(\"T\")[0]\r\n            return [\r\n                convertHumanToUnix(date),\r\n                register[\"adjClose\"],\r\n                register[\"adjHigh\"],\r\n                register[\"adjLow\"],\r\n                register[\"adjOpen\"]\r\n            ]\r\n        })\r\n        console.log(portfolioHistoryCopy, \"que wobo2\")\r\n        console.log(newCompanyChartData, \"perula\", JSON.parse(JSON.stringify(missingTicker)))\r\n        portfolioHistoryByCompanyCopy = {\r\n            ...portfolioHistoryByCompanyCopy,\r\n            [missingTicker]: newCompanyChartData\r\n        }\r\n        console.log(portfolioHistoryByCompanyCopy, \"perula1\", JSON.parse(JSON.stringify(missingTicker)))\r\n        dispatch({ type: \"STORE_PORTFOLIO_HISTORY_BY_COMPANY_CHART_READY\", payload: portfolioHistoryByCompanyCopy })\r\n\r\n\r\n        dispatch({ type: \"STORE_PORTFOLIO_HISTORY_BY_DATE\", payload: portfolioHistoryCopy })\r\n\r\n        cb()\r\n    }\r\n\r\n    const prepareData = (arr, cb) => {\r\n        let portfolioHistoryByDate = {}\r\n        let cleanPriceHistoryByCompanies = {};\r\n        console.log(arr, \"tumuela\")\r\n        arr.forEach(company => {\r\n            //we take the unique key which is the ticker\r\n            console.log(company, \"webos\")\r\n            const ticker = Object.keys(company)[0]\r\n            if (company[ticker].length > 0) {\r\n                console.log(company[ticker, \"pooouto\"])\r\n                company[ticker].forEach(register => {\r\n                    const date = register.date.split(\"T\")[0]\r\n\r\n                    portfolioHistoryByDate[date] = {\r\n                        ...portfolioHistoryByDate[date],\r\n                        //aqui podriamos poner close high y todos\r\n                        [ticker]: {\r\n                            close: register.close\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        arr.forEach(({ ...company }) => {\r\n            const ticker = Object.keys(company)[0]\r\n            console.log(ticker, \"weba\")\r\n            const companyHistory = company[ticker].map(register => {\r\n                const date = register.date.split(\"T\")[0]\r\n                return (\r\n                    [convertHumanToUnix(date),\r\n                    register[\"adjClose\"],\r\n                    register[\"adjHigh\"],\r\n                    register[\"adjLow\"],\r\n                    register[\"adjOpen\"]])\r\n            })\r\n            cleanPriceHistoryByCompanies[ticker] = companyHistory\r\n        })\r\n        console.log(cleanPriceHistoryByCompanies, \"pooota\")\r\n        dispatch({ type: \"STORE_PORTFOLIO_HISTORY_BY_COMPANY_CHART_READY\", payload: cleanPriceHistoryByCompanies })\r\n        console.log(cleanPriceHistoryByCompanies, \"ku pusu\")\r\n\r\n        console.log(arr, \"averaaaa\")\r\n        console.log(portfolioHistoryByDate, \"master\")\r\n        dispatch({ type: \"STORE_PORTFOLIO_HISTORY_BY_DATE\", payload: portfolioHistoryByDate })\r\n        cb()\r\n    }\r\n\r\n\r\n    //this component only rerenders on state update, you only can dismount it by refrshing the page\r\n    // useEffect(() => {\r\n    //     console.log(\"no mola\", state.currentPossesions.stocks)\r\n    //     if (state.currentPossesions.stocks.length > 0) {\r\n    //         if (userRefreshed.current) {\r\n    //             const initialTickers = getAllTickers()\r\n    //             setTickers(initialTickers)\r\n    //         } else {\r\n    //             const result = getMissingTicker()\r\n    //             setMissingTicker(result)\r\n    //         }\r\n    //     }\r\n    // }, [state.currentPossesions.stocks])\r\n    useEffect(() => {\r\n        console.log(\"no mola\", state.currentPossesions.stocks)\r\n        if (state.userActivity.length > 0 && state.setPruebaReady && state.stockLibrary.size > 0) {\r\n\r\n            if (userRefreshed.current) {\r\n                const initialTickers = getAllTickers()\r\n                setTickers(initialTickers)\r\n            } else {\r\n                // const result = getMissingTicker()\r\n                // setMissingTicker(result)\r\n            }\r\n        }\r\n    }, [state.userActivity, state.setPruebaReady, state.stockLibrary])\r\n\r\n    useEffect(() => {\r\n        console.log(\"muulda\", userRefreshed.current, state.stockLibrary.size)\r\n        if (!userRefreshed.current && state.stockLibrary.size > 0) {\r\n            const result = getMissingTicker()\r\n            setMissingTicker(result)\r\n        }\r\n    }, [state.stockLibrary.size, state.setPruebaReady])\r\n\r\n    console.log(tickers, \"tickarss\")\r\n\r\n    useEffect(() => {\r\n        if (tickers.length > 0 && userRefreshed.current) {\r\n\r\n            const asyncWrapper = async () => {\r\n                const initialData = await getPricesHistory(tickers)\r\n                console.log(initialData, \"datatota\")\r\n                prepareData(initialData, () => {\r\n                    //ojo que no teganmos que declarar esto al principio\r\n                    userRefreshed.current = false\r\n                    // historicprices always starts as false\r\n                    dispatch({ type: \"SET_ARE_HISTORIC_PRICES_READY\", payload: true })\r\n                })\r\n            }\r\n            asyncWrapper()\r\n        }\r\n    }, [tickers])\r\n\r\n    useEffect(() => {\r\n        console.log(missingTicker, \"missing\")\r\n        if (missingTicker.length > 0) {\r\n            dispatch({ type: \"SET_ARE_HISTORIC_PRICES_READY\", payload: false })\r\n            const asyncWrapper = async () => {\r\n                const missingData = await getPricesHistory(missingTicker)\r\n                updateData(missingData, () => {\r\n                    setMissingTicker([])\r\n                    dispatch({ type: \"SET_ARE_HISTORIC_PRICES_READY\", payload: true })\r\n                })\r\n            }\r\n            asyncWrapper()\r\n        }\r\n    }, [missingTicker])\r\n\r\n\r\n\r\n    console.log(allData, \"aquidata\")\r\n\r\n}\r\n\r\n","C:\\Users\\gonza\\finance-app\\src\\portfolio\\portfolioGenerator.js",["249","250"],"C:\\Users\\gonza\\finance-app\\src\\Context.js",[],"C:\\Users\\gonza\\finance-app\\src\\useTemporaryPossesions.js",["251","252","253"],"import React, { useEffect, useRef } from 'react'\r\nimport { useDataLayer } from './Context'\r\nimport { userActivity } from './portfolio/logicPruebasConAdd'\r\n\r\nexport const useTemporaryPossesions = () => {\r\n    const { state, dispatch } = useDataLayer()\r\n    const length = useRef(0)\r\n    const iteration = useRef(0)\r\n    useEffect(() => {\r\n        if (state.userActivity.length > 0) {\r\n            length.current = state.userActivity.length\r\n            userActivity.forEach((op, index, arr) => {\r\n                console.log(index, \"opixxo\")\r\n                dispatch({\r\n                    type: \"ADD_PORTFOLIO_CURRENT_POSSESIONS\",\r\n                    payload: {\r\n                        ticker: op.details.ticker,\r\n                        amount: op.details.amount,\r\n                        operationType: op.operationType,\r\n                        cashNetOperation: 0\r\n                    }\r\n                })\r\n                dispatch({\r\n                    type: \"ADD_UNIQUE_STOCKS\",\r\n                    payload: {\r\n                        ticker: op.details.ticker,\r\n                    }\r\n                })\r\n                index + 1 === arr.length && dispatch({ type: \"ENABLE\" })\r\n\r\n            })\r\n        }\r\n    }, [state.userActivity])\r\n\r\n    // useEffect(() => {\r\n    //     iteration.current += 1\r\n    //     console.log(\"botonto\")\r\n    //     console.log(iteration.current, length.current, \"zorrona\")\r\n    //     if (iteration.current === 2) {\r\n    //         dispatch({ type: \"ENABLE\" })\r\n    //     }\r\n    // }, [state.currentPossesions])\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\components\\Navbar.js",["254"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport clsx from \"clsx\";\r\nimport { Tab, Tabs } from \"@material-ui/core\";\r\nimport { useHistory, useLocation } from \"react-router-dom\"\r\nimport { useDataLayer } from \"../Context\";\r\nimport { useUILayer } from \"../ContextUI\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useMesure } from \"../utils/useMesure\";\r\nimport { Transition } from \"react-transition-group\";\r\nimport { formatter } from \"../utils/numFormatter\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  appBarCompany: {\r\n    transition: theme.transitions.create([\"top\", \"transform\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    transform: \"translateX(0px)\"\r\n  },\r\n  appBarCompanyShift: {\r\n    transform: `translateX(${drawerWidth}px)`\r\n  },\r\n  tab: {\r\n    marginLeft: \"60px\",\r\n\r\n  }\r\n\r\n}));\r\n\r\nexport const Navbar = ({ handleDrawerOpen }) => {\r\n\r\n  const [tabValue, setTabValue] = React.useState(0);\r\n  const topNavigation = useRef(null)\r\n  const history = useHistory()\r\n  const { state } = useDataLayer()\r\n  const { sidebarOpen } = useUILayer()\r\n  const location = useLocation()\r\n  const [menuCompaniesOpen, setMenuCompaniesOpen] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (location.pathname !== \"/\") {\r\n      const masterRoute = location.pathname.split(\"/\").filter(item => item !== \"\")\r\n      console.log(masterRoute[0], \"first pathname query\")\r\n      if (masterRoute[0] === \"companies\") {\r\n        setMenuCompaniesOpen(true)\r\n      }\r\n      else {\r\n        setMenuCompaniesOpen(false)\r\n      }\r\n    }\r\n    \r\n  }, [location])\r\n\r\n  // console.log(location, \"location\")\r\n  const { height } = useMesure(topNavigation)\r\n\r\n  const classes = useStyles({ height });\r\n  function a11yProps(index) {\r\n    return {\r\n      id: `simple-tab-${index}`,\r\n      'aria-controls': `simple-tabpanel-${index}`,\r\n    };\r\n  }\r\n\r\n  const handleChange = (e, val) => {\r\n    setTabValue(val)\r\n  }\r\n\r\n  const menu2transitions = {\r\n    entering: {\r\n      top: `${height}px`,\r\n    },\r\n    entered: {\r\n      top: `${height}px`,\r\n    },\r\n    exiting: {\r\n      top: \"0px\",\r\n    },\r\n    exited: {\r\n      top: \"0px\"\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: sidebarOpen,\r\n        })}\r\n        ref={topNavigation}\r\n      >\r\n        <Toolbar>\r\n          <IconButton\r\n\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            edge=\"start\"\r\n            className={clsx(classes.menuButton, {\r\n              [classes.hide]: sidebarOpen,\r\n            })}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap>\r\n            {state.currentCompany.name}\r\n          </Typography>\r\n          <Button\r\n          onClick={()=>{history.push(\"/portfolio\")}}\r\n          variant=\"contained\"\r\n          >\r\n            request ticker history\r\n          </Button>\r\n          <div\r\n          style={{marginLeft: \"auto\"}}\r\n          >\r\n            <Button\r\n            onClick={()=>{history.push(\"/portfoliof\")}}\r\n            variant=\"contained\"\r\n            >\r\n              Investment Dashboard\r\n            </Button>\r\n            <Typography>\r\n            {formatter.format(state.currentPossesions.userCash)} $\r\n            </Typography>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Transition\r\n        in={menuCompaniesOpen}\r\n      >\r\n        {animationState => (\r\n          <AppBar\r\n            className={clsx(classes.appBarCompany, {\r\n              [classes.appBarCompanyShift]: sidebarOpen\r\n            })}\r\n            style={menu2transitions[animationState]}\r\n          >\r\n            <Tabs value={tabValue} onChange={handleChange} aria-label=\"simple tabs example\"\r\n              classes={{ root: classes.tab }}\r\n            >\r\n              <Tab label=\"Overview\" {...a11yProps(0)} onClick={() => { history.push(`/companies/overview/${state.currentCompany.ticker}`) }} />\r\n              <Tab label=\"Financials\" {...a11yProps(1)} onClick={() => { history.push(`/companies/financials/${state.currentCompany.ticker}`) }} />\r\n              <Tab label=\"Key metrics\" {...a11yProps(2)} onClick={() => { history.push(`/companies/keymetrics/${state.currentCompany.ticker}`) }} />\r\n              <Tab label=\"News\" {...a11yProps(2)} onClick={() => { history.push(`/news/${state.currentCompany.ticker}`) }} />\r\n            </Tabs>\r\n          </AppBar>\r\n        )}\r\n      </Transition>\r\n    </div>\r\n  );\r\n};\r\n\r\n","C:\\Users\\gonza\\finance-app\\src\\dashboard\\UserMain.js",["255"],"import React, { useEffect, useState } from 'react'\r\nimport { useDataLayer } from '../Context'\r\nimport { StockDispatcher } from './StockDispatcher'\r\n\r\nexport const UserMain = () => {\r\n\r\n    const { state } = useDataLayer()\r\n    const [stocks, setStocks] = useState([])\r\n    //const [metadata, setMetadata] = useState(\"\")\r\n    //tenemos que comprobar que cuando entramos al dashboard (por segunda vez), si hay algun stock nuevo que antes no tuviesemos\r\n    useEffect(() => {\r\n        if (state.areHistoricPricesReady > 0) {\r\n            console.log(state.currentPossesions, \"los tenemos\")\r\n            setStocks(state.currentPossesions.stocks)\r\n            //getHistoricals(state.currentPossesions.stocks)\r\n        }\r\n    }, [state.areHistoricPricesReady])\r\n\r\n    \r\n\r\n    return (\r\n        <div\r\n            className=\"user-dashboard\"\r\n        >\r\n            { stocks.length > 0\r\n                &&\r\n                stocks.map(asset => {\r\n                    return (\r\n                        <div\r\n                            className=\"user-dashboard--item\"\r\n                            key={asset.ticker}\r\n                        >\r\n\r\n                            <StockDispatcher\r\n                                ticker={asset.ticker.toUpperCase()}\r\n                            />\r\n                        </div>\r\n                    )\r\n\r\n                }\r\n                )}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n// const getHistoricals = async (posesions) => {\r\n//     console.log(posesions, \"posesiones\")\r\n//     const tickersArr = posesions.map(item => item.ticker.toUpperCase())\r\n//     try {\r\n//         const request = await fetch(\"http://localhost:8001/portfolio?dates=true\", {\r\n//             headers: {\r\n//                 \"Content-Type\": \"application/json\"\r\n//             },\r\n//             method: \"POST\",\r\n//             body: JSON.stringify(tickersArr)\r\n//         })\r\n//         const datos = await request.json()\r\n//         const readyData = {}\r\n//         datos.forEach(item => {\r\n//             readyData[item.ticker] = { startDate: item.startDate, endDate: item.endDate }\r\n//         })\r\n//         setMetadata(readyData)\r\n//     }\r\n//     catch (err) {\r\n//         console.log(err)\r\n//     }\r\n// }","C:\\Users\\gonza\\finance-app\\src\\charts\\KeymetricsChart.js",["256"],"import React, { useEffect, useRef, useState } from 'react'\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport { useParams } from \"react-router-dom\"\r\nimport { useFetch } from '../utils/useFetch';\r\nimport { Multioption } from '../components/Multioption';\r\n//those are historical\r\nexport const KeymetricsChart = () => {\r\n    const { company } = useParams()\r\n    const url = `https://financialmodelingprep.com/api/v3/key-metrics/${company.toUpperCase()}?apikey=651d720ba0c42b094186aa9906e307b4`\r\n    \r\n    const [dataset, setDataset] = useState({})\r\n    const hookOptions = {\r\n        explicitUrl: true\r\n    }\r\n\r\n\r\n    const [chosenFields, setChosenFields] = useState(\r\n        [\"tangibleBookValuePerShare\", \"shareholdersEquityPerShare\", \"interestDebtPerShare\"])\r\n\r\n    const { datos, loading, error } = useFetch(url, company, \"metricsHistorical\", hookOptions)\r\n\r\n    const datasetBuilder = (data) => {\r\n        let masterObject = {}\r\n        Object.keys(data[0]).forEach(item => {\r\n            masterObject[item] = []\r\n        })\r\n        data.forEach(record => {\r\n            Object.keys(record).forEach(item => {\r\n                masterObject[item] = [...masterObject[item], record[item]]\r\n            })\r\n        })\r\n        console.log(masterObject, \"master\")\r\n        return masterObject\r\n    }\r\n    useEffect(() => {\r\n        console.log(\"momop\", datos, datos.length)\r\n        if (datos.length > 0) {\r\n            console.log(\"momo\")\r\n            let readyData = datasetBuilder(datos)\r\n            setDataset(readyData)\r\n        }\r\n    }, [datos])\r\n\r\n\r\n    console.log(\"mama\")\r\n\r\n    const options = {\r\n        chart: {\r\n            type: \"spline\"\r\n        },\r\n        title: {\r\n            text: 'Solar Employment Growth by Sector, 2010-2016'\r\n        },\r\n\r\n        // subtitle: {\r\n        //     text: 'Source: thesolarfoundation.com'\r\n        // },\r\n\r\n        // yAxis: {\r\n        //     title: {\r\n        //         text: 'Number of Employees'\r\n        //     }\r\n        // },\r\n\r\n        // xAxis: {\r\n        //     accessibility: {\r\n        //         rangeDescription: 'Range: 2014 to 2017'\r\n        //     }\r\n        // },\r\n        // xAxis: [{\r\n        //     labels: {\r\n        //         formatter: function () {\r\n        //             const arr = dataset.date[0].split(\"-\")\r\n        //             const arrint = arr.map(item=>parseFloat(item))\r\n        //             return Highcharts.dateFormat('%Y %M %d', new Date(arrint));\r\n        //         }\r\n        //     }\r\n        // }],\r\n        xAxis:{\r\n            allowDecimals: false\r\n        },\r\n        legend: {\r\n            layout: 'vertical',\r\n            align: 'center',\r\n            verticalAlign: 'bottom'\r\n        },\r\n        height: 500,\r\n        plotOptions: {\r\n            series: {\r\n                label: {\r\n                    connectorAllowed: false\r\n                },\r\n                pointStart: 2014\r\n            }\r\n        },\r\n        series: Object.keys(dataset).length > 0 && chosenFields.map(field => {\r\n            console.log(dataset, \"dooota\")\r\n            return ({\r\n                name: field,\r\n                data: dataset[field]\r\n            }\r\n            )\r\n        })\r\n        ,\r\n\r\n        responsive: {\r\n            rules: [{\r\n                condition: {\r\n                    maxWidth: 500\r\n                },\r\n                chartOptions: {\r\n                    legend: {\r\n                        layout: 'vertical',\r\n                        align: 'center',\r\n                        verticalAlign: 'bottom'\r\n                    }\r\n                }\r\n            }]\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {loading && <p>laoding...</p>}\r\n            {error && <p>{error}</p>}\r\n            {Object.keys(dataset).length > 0 &&\r\n                <div style={{ display: \"flex\", marginTop: \"100px\", height: \"550px\", justifyContent: \"flexEnd\" }}>\r\n                    <HighchartsReact\r\n                        highcharts={Highcharts}\r\n                        options={options}\r\n                        containerProps={{ style: { flex: 1 } }}\r\n                    />\r\n                    <Multioption\r\n                        fields={dataset}\r\n                        setChosenFields={setChosenFields}\r\n                        chosenFields={chosenFields}\r\n                    />\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","C:\\Users\\gonza\\finance-app\\src\\dashboard\\Middleware.js",[],"C:\\Users\\gonza\\finance-app\\src\\views\\principal\\principal.js",["257"],"C:\\Users\\gonza\\finance-app\\src\\portfolio\\PortfolioPriceChart.js",["258","259"],"C:\\Users\\gonza\\finance-app\\src\\utils\\useFetch.js",["260","261","262"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDataLayer } from \"../Context\";\r\n\r\n//ticker can refer as a category\r\nexport const useFetch = (url, ticker, field, options) => {\r\n\r\n  const { state, dispatch } = useDataLayer()\r\n\r\n  const [{ datos, loading, error }, setRequest] = useState({\r\n    datos: \"\",\r\n    loading: false,\r\n    error: \"\"\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log(datos, \"daaaatooos\")\r\n    const fetchar = async (query) => {\r\n      console.log(isInState(field), \"ceeeeeeee\")\r\n      if (!isInState(field)) {\r\n        try {\r\n          setRequest((prev) => ({ ...prev, loading: true }));\r\n          let dir;\r\n          if(options.explicitUrl){\r\n            dir = url\r\n          }else{\r\n            query === null ?\r\n            dir = url\r\n            :\r\n            dir = `${url}/${query}`\r\n          }\r\n          const rawData = await fetch(dir);\r\n          const data = await rawData.json();\r\n          dispatch({ type: \"STORE_DATA\", payload: { ticker: ticker, field: field, value: data } })\r\n\r\n        } catch (err) {\r\n          setRequest((prev) => ({\r\n            ...prev,\r\n            loading: false,\r\n            error: err.message,\r\n          }));\r\n        }\r\n      }\r\n      else{\r\n        setRequest(prev => ({\r\n          ...prev,\r\n          loading: false,\r\n          datos: state[field][ticker]\r\n        }))\r\n      }\r\n    }\r\n    fetchar(ticker);\r\n\r\n  }, [ticker]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"ahora\", state)\r\n    if ( state[field] && state[field][ticker]) {\r\n      setRequest(prev => ({\r\n        ...prev,\r\n        loading: false,\r\n        datos: state[field][ticker]\r\n      }))\r\n      if (field !== \"prices\") {\r\n        try {\r\n          localStorage.setItem(field, JSON.stringify(state[field]))\r\n        }\r\n        catch (e) {\r\n          console.log(e, \"eeeee\")\r\n        }\r\n      }\r\n    }\r\n  }, [state])\r\n\r\n\r\n  const isInState = (field) => {\r\n    //check if we have this data already in localStorage\r\n    console.log(field, \"campo\")\r\n    if (state[field]) {\r\n      console.log(field, ticker, \"esta en mayuscula o que\")\r\n      if (state[field][ticker]) {\r\n        //we won't make additional request\r\n        return true\r\n      }\r\n      return false\r\n    }\r\n    else {\r\n\r\n      return false\r\n    }\r\n  }\r\n\r\n  return { datos, loading, error };\r\n};\r\n","C:\\Users\\gonza\\finance-app\\src\\views\\principal\\elements\\Indices.js",["263"],"C:\\Users\\gonza\\finance-app\\src\\views\\covid\\Sliders.js",["264","265","266"],"C:\\Users\\gonza\\finance-app\\src\\components\\Cell.js",[],"C:\\Users\\gonza\\finance-app\\src\\charts\\MiniatureChartIndex.js",[],["267","268"],"C:\\Users\\gonza\\finance-app\\src\\utils\\useFatch.js",["269","270","271"],"C:\\Users\\gonza\\finance-app\\src\\components\\Searcher.js",["272","273","274","275","276","277","278"],"import { Button, Chip, TextField } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { useDataLayer } from \"../Context\";\r\n\r\n\r\nexport const Searcher = ({ setSelection }) => {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [{ data, loading, error }, setRequest] = useState({\r\n    data: [],\r\n    loading: false,\r\n    error: \"\",\r\n  });\r\n\r\n  const { state, dispatch } = useDataLayer()\r\n  const fetchar = async (query) => {\r\n    try {\r\n      setRequest((prev) => ({ ...prev, loading: true }));\r\n      const rawData = await fetch(`http://localhost:8001/search/${query}`);\r\n      const { data } = await rawData.json();\r\n      const dataOnlyStocks = data.filter(item => item.assetType === \"Stock\")\r\n      setRequest((prev) => ({ ...prev, data: dataOnlyStocks, loading: false }));\r\n    } catch (err) {\r\n      setRequest((prev) => ({\r\n        ...prev,\r\n        loading: false,\r\n        error: err.message,\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleSearch = () => {\r\n    if (query) {\r\n      fetchar(query);\r\n    }\r\n  };\r\n\r\n  const handleAutocomplete = (e) => {\r\n    console.log(e.key, \"va o que\");\r\n    // if (query && e.key === \" \")\r\n    if (query) fetchar(query.slice(0, query.length - 1));\r\n  };\r\n\r\n  const handleSelection = (value, reason) => {\r\n    if (reason === \"select-option\") {\r\n      console.log(value, \"valueeee\")\r\n      setSelection(value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"search-section\">\r\n        {loading && <p>cargando...</p>}\r\n        {data && data.map((item) => <p>{item.name}</p>)}\r\n        {error && <p>{error}</p>}\r\n        {/* <Chip\r\n        size=\"medium\"\r\n        label={<h3>Search for company</h3>}\r\n    style={{marginBottom: \"0.5rem\"}}\r\n      /> */}\r\n      <h2>Search company data</h2>\r\n        <Autocomplete\r\n          id=\"asynchronous-demo\"\r\n          style={{ width: 300 }}\r\n          open={true}\r\n          onOpen={() => {\r\n            setOpen(true);\r\n          }}\r\n          onClose={() => {\r\n            setOpen(false);\r\n          }}\r\n          noOptionsText\r\n          // getOptionSelected={(option, value) => {\r\n          //   console.log(value.name, option.name, \"hooolabeeeeeeee\");\r\n          //   return (value.name = option.name);\r\n          // }}\r\n          getOptionLabel={(option) => option.name}\r\n          options={data}\r\n          loading={loading}\r\n          filterOptions={(options) => query && options}\r\n          onChange={(e, value, reason) => {\r\n            handleSelection(value, reason);\r\n          }}\r\n          renderInput={(params) => (\r\n            <TextField\r\n              {...params}\r\n              label=\"Asynchronous\"\r\n              variant=\"outlined\"\r\n              onKeyUp={handleAutocomplete}\r\n              onChange={(e) => {\r\n                setQuery(e.target.value);\r\n              }}\r\n              value={query}\r\n              InputProps={{\r\n                ...params.InputProps,\r\n                endAdornment: (\r\n                  <React.Fragment>\r\n                    {loading ? (\r\n                      <CircularProgress color=\"inherit\" size={20} />\r\n                    ) : null}\r\n                    {params.InputProps.endAdornment}\r\n                  </React.Fragment>\r\n                ),\r\n              }}\r\n            />\r\n          )}\r\n        />\r\n      </div>\r\n      {/* {selection && JSON.stringify(selection, null, 2)} */}\r\n\r\n    </>\r\n  );\r\n};\r\n","C:\\Users\\gonza\\finance-app\\src\\SignInForm.js",[],"C:\\Users\\gonza\\finance-app\\src\\dashboard\\StockDispatcher.js",["279","280","281"],"C:\\Users\\gonza\\finance-app\\src\\utils\\useViewport.js",["282"],"C:\\Users\\gonza\\finance-app\\src\\views\\principal\\elements\\Gainers.js",["283","284"],"import React, { useEffect } from 'react'\r\nimport { Gainer } from '../../../components/Gainer'\r\nimport { useFetchWithCors } from '../../../utils/useFetchWithCors'\r\n\r\nexport const Gainers = () => {\r\n    const url = \"https://financialmodelingprep.com/api/v3/gainers?apikey=651d720ba0c42b094186aa9906e307b4\"\r\n    const { data, loading, error } = useFetchWithCors(url, \"gainers\")\r\n    \r\n\r\n    return (\r\n        <>\r\n            <ul>\r\n\r\n                {loading && <p>loading...</p>}\r\n                {error && <p>{error}</p>}\r\n                {/* {data.length >0 && data.map(item=><li>\r\n                <span>{item.companyName}</span>\r\n                <span>{item.price}</span>\r\n                <span>{item.changes}</span>\r\n                <span>{item.changesPercentage}</span>\r\n            </li>)} */}\r\n                {/* {data.length > 0 && data.slice(0,1).map(item => <li>\r\n                    <Gainer data={item} />\r\n                </li>)} */}\r\n                <li style={{height: \"50px\", width: \"80px\"}}>\r\n                <Gainer ticker=\"amzn\" />\r\n                </li>\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n",["285","286"],"C:\\Users\\gonza\\finance-app\\src\\views\\company\\TableUI.js",["287"],"C:\\Users\\gonza\\finance-app\\src\\views\\indexes\\SP500.js",[],"C:\\Users\\gonza\\finance-app\\src\\views\\indexes\\IndexesGeneral.js",["288","289","290","291","292","293","294","295","296"],"C:\\Users\\gonza\\finance-app\\src\\views\\company\\DetailsSquare.js",["297","298"],"C:\\Users\\gonza\\finance-app\\src\\portfolio\\PurchaseDialog.js",[],"C:\\Users\\gonza\\finance-app\\src\\charts\\IndexesChart.js",["299","300","301","302","303"],"import React, { useState, useEffect, useRef, useLayoutEffect } from \"react\";\r\nimport Highcharts from \"highcharts/highstock\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport { useUILayer } from \"../ContextUI\";\r\nimport { useChartReflow } from \"../utils/useChartReflow\";\r\n\r\n\r\nexport const IndexesChart = ({ datos }) => {\r\n    const chart = useRef(null)\r\n    const [dataset, setDataset] = useState(\"\")\r\n    useChartReflow(chart.current)\r\n    useEffect(() => {\r\n        console.log(\"manzana\", datos.historical)\r\n        if (datos.historical && datos.historical.length > 0) {\r\n            console.log(\"entra\")\r\n            prepareData(datos.historical)\r\n\r\n        } else {\r\n            console.log(\"algo pasa, nunca deberia ejecutarse este else\")\r\n        }\r\n    }, [datos])\r\n\r\n    const sanitizeDates = (datar) => {\r\n        const data = datar.slice(0).map(item => {\r\n            const dateArr = item.date.slice(0).split(\"-\").map(num => parseInt(num));\r\n            item.date = new Date(dateArr).getTime();\r\n            return item\r\n        })\r\n        return data\r\n    }\r\n    \r\n    const prepareData = (datab) => {\r\n        console.log(datab, \"koojones que pasa\")\r\n        let data = typeof datos.historical[0].date === \"string\"\r\n            ?\r\n            sanitizeDates(datab)\r\n            :\r\n            datab\r\n\r\n\r\n        console.log(\"hola\");\r\n        let ohl = [];\r\n        let ohlNA = [];\r\n        let volume = [];\r\n        data.forEach((record) => {\r\n            let cleanRecord = [\r\n                record[\"date\"],\r\n                record[\"close\"],\r\n                record[\"high\"],\r\n                record[\"low\"],\r\n                record[\"open\"],\r\n            ];\r\n            ohl = [...ohl, cleanRecord];\r\n        });\r\n        console.log(\"ooooohl\", ohl);\r\n\r\n        setDataset(ohl.reverse());\r\n    };\r\n\r\n    const options = {\r\n        chart: {\r\n            zoomType: \"x\",\r\n            events: {\r\n                selection: function (e) {\r\n                    e && console.log(e);\r\n                },\r\n                load: function () {\r\n                    chart.current = this\r\n                }\r\n                // load: function(){\r\n                //   setIsBuilding(false)\r\n                // }\r\n            },\r\n            //width,\r\n            id: \"chart-stock\",\r\n            animation: {\r\n                duration: 225,\r\n            },\r\n        },\r\n        plotOptions: {\r\n            candlestick: {\r\n                color: \"red\",\r\n                upColor: \"rgb(22,177,87)\",\r\n                lineColor: \"red\",\r\n                upLineColor: \"rgb(22,177,87)\",\r\n                pointPadding: 0.02,\r\n            },\r\n        },\r\n\r\n        title: {\r\n            text: \"My chart\",\r\n            zoomType: \"x\",\r\n        },\r\n        rangeSelector: {\r\n            allButtonsEnabled: true,\r\n        },\r\n        navigator: {},\r\n        series: [\r\n            {\r\n                type: \"candlestick\",\r\n                data: dataset,\r\n                dataGrouping: {\r\n                    units: [\r\n                        [\"day\", [1, 2, 3, 4, 5, 8, 16]],\r\n                        [\"week\", [1, 2, 3, 4]],\r\n                        [\"month\", [1, 2, 3, 4, 6]],\r\n                    ],\r\n                    smoothed: true,\r\n                },\r\n                // showInNavigator: true,\r\n            },\r\n        ],\r\n    };\r\n    console.log(dataset, \"jodio\")\r\n\r\n    return (\r\n        <>\r\n            {\r\n                dataset &&\r\n                <HighchartsReact\r\n                    highcharts={Highcharts}\r\n                    options={options}\r\n                    constructorType={\"stockChart\"}\r\n\r\n                />}\r\n            <div>kaak</div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n//  key info example\r\n//{\r\n//     \"date\" : \"2020-11-17\",\r\n//     \"open\" : 12030.269531,\r\n//     \"high\" : 12047.129883,\r\n//     \"low\" : 11964.200195,\r\n//     \"close\" : 11977.490234,\r\n//     \"adjClose\" : 11977.490234,\r\n//     \"volume\" : 4.12277E9,\r\n//     \"unadjustedVolume\" : 4.12277E9,\r\n//     \"change\" : -52.7793,\r\n//     \"changePercent\" : -0.439,\r\n//     \"vwap\" : 11996.27344,\r\n//     \"label\" : \"November 17, 20\",\r\n//     \"changeOverTime\" : -0.00439\r\n//   }","C:\\Users\\gonza\\finance-app\\src\\ContextUI.js",[],"C:\\Users\\gonza\\finance-app\\src\\views\\company\\CompanySection.js",["304","305"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useLocation } from \"react-router-dom\";\r\nimport { BottomSection } from \"./BottomSection\";\r\nimport { Paper } from \"@material-ui/core\";\r\nimport { KeyMetrics } from \"./KeyMetrics\";\r\nimport { CompanyChart } from \"./CompanyChart\";\r\nimport { useDataLayer } from \"../../Context\";\r\nimport { StockShop } from \"../../portfolio/StockShop\";\r\n\r\n\r\nexport const CompanySection = React.forwardRef(({ width }, ref) => {\r\n\r\n  const { state, dispatch } = useDataLayer()\r\n  const { ticker } = state.currentCompany\r\n\r\n  const [tickar, setTicker] = useState(ticker)\r\n  const params = useParams()\r\n  const location = useLocation()\r\n  useEffect(() => {\r\n    if (!tickar) {\r\n      console.log(params, \"los params\", location, \"location\")\r\n      const { company } = params\r\n      setTicker(company.toUpperCase())\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    //polifill if the user browse directly without search\r\n    if (tickar && !ticker) {\r\n      dispatch({ type: \"SET_COMPANY\", payload: { ticker: tickar } })\r\n    }\r\n  }, [tickar])\r\n\r\n\r\n  return (\r\n    <>\r\n      {tickar &&\r\n        <>\r\n          <div>\r\n            <StockShop ticker={tickar} />\r\n          </div>\r\n          <div className=\"grida\" style={{ width: \"100%\" }}>\r\n            <Paper\r\n              className=\"chart\"\r\n            >\r\n              <CompanyChart ref={ref} width={width} ticker={tickar} />\r\n            </Paper>\r\n            <Paper\r\n              className=\"general\"\r\n            >\r\n              <div>\r\n                <KeyMetrics\r\n                  ticker={tickar}\r\n                />\r\n              </div>\r\n            </Paper>\r\n            <BottomSection ticker={tickar} />\r\n          </div>\r\n        </>\r\n      }\r\n    </>\r\n  );\r\n});\r\n\r\n","C:\\Users\\gonza\\finance-app\\src\\utils\\useMesure.js",["306"],"import React, { useEffect, useState } from 'react'\r\nimport { useViewport } from './useViewport'\r\n\r\nexport const useMesure = (ref) => {\r\n    //we also make sure we respnond ref dimension change due to viewport changes\r\n    const {viewport} = useViewport()\r\n\r\n    const [{ height, width }, setDimensions] = useState({\r\n        height: 60,\r\n        width: 0\r\n    })\r\n    useEffect(() => {\r\n        if (ref.current) {\r\n            setDimensions({\r\n                height: ref.current.offsetHeight,\r\n                width: ref.current.offsetWidth,\r\n            })\r\n        }\r\n    }, [ref, viewport])\r\n\r\n    return (\r\n        { height, width }\r\n    )\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\views\\principal\\elements\\Sectors.js",[],"C:\\Users\\gonza\\finance-app\\src\\views\\company\\KeyMetrics.js",["307"],"import React, { useEffect, useState } from 'react'\r\nimport { useDataLayer } from \"../../Context\"\r\nexport const KeyMetrics = ({ ticker }) => {\r\n    const [data, setData] = useState({})\r\n    const { state } = useDataLayer()\r\n    \r\n    useEffect(() => {\r\n        console.log(ticker, \"ka concha\")\r\n        console.log(state, \"hooola\")\r\n        if (state.keymetrics[ticker]) {\r\n            Object.keys(state.keymetrics[ticker]).length > 0 && setData(state.keymetrics[ticker])\r\n        }\r\n    }, [state])\r\n    return (\r\n        <ul>\r\n            {Object.keys(data).length > 0 &&\r\n                Object.keys(data).map(field => (\r\n                    <li>\r\n                        {field}\r\n                        <span>{data[field]}</span>\r\n                    </li>\r\n                ))\r\n            }\r\n        </ul>\r\n    )\r\n}\r\n","C:\\Users\\gonza\\finance-app\\src\\charts\\CovidMap.js",["308"],"C:\\Users\\gonza\\finance-app\\src\\views\\indexes\\ChartIndex.js",[],"C:\\Users\\gonza\\finance-app\\src\\components\\TransitionComponent.js",["309","310","311","312","313"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    position: 'relative',\r\n  },\r\n  title: {\r\n    marginLeft: theme.spacing(2),\r\n    flex: 1,\r\n  },\r\n}));\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport function TransitionComponent({children, open, setOpenChartModal}) {\r\n  const classes = useStyles();\r\n  //const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n      return\r\n    //setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n      return\r\n    //setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\r\n        <AppBar className={classes.appBar}>\r\n          <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" onClick={()=>{setOpenChartModal(false)}} aria-label=\"close\">\r\n              <CloseIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              Sound\r\n            </Typography>\r\n            <Button autoFocus color=\"inherit\" onClick={handleClose}>\r\n              save\r\n            </Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n        {children}\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","C:\\Users\\gonza\\finance-app\\src\\components\\Sidebar.js",["314","315","316","317"],"/* tslint:disable */\r\n\r\nimport {\r\n  Box,\r\n  Divider,\r\n  Drawer,\r\n  IconButton,\r\n  List,\r\n  makeStyles,\r\n  Typography,\r\n  useTheme,\r\n} from \"@material-ui/core\";\r\nimport clsx from \"clsx\";\r\nimport React, { useEffect } from \"react\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\r\nimport MailIcon from \"@material-ui/icons/Mail\";\r\nimport { TreeItem, TreeView } from \"@material-ui/lab\";\r\nimport { StyledTreeItem } from \"./components/treeItem\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Label from '@material-ui/icons/Label';\r\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport ForumIcon from '@material-ui/icons/Forum';\r\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { useUILayer } from \"../ContextUI\";\r\nimport { useDataLayer } from \"../Context\";\r\nimport { useViewport } from \"../utils/useViewport\";\r\n\r\nconst drawerWidth = 240;\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n    whiteSpace: \"nowrap\",\r\n  },\r\n  drawerOpen: {\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerClose: {\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    overflowX: \"hidden\",\r\n    width: theme.spacing(7) + 1,\r\n    [theme.breakpoints.down(\"sm\")]:{\r\n      width: 0\r\n    },\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9) + 1,\r\n    },\r\n  },\r\n  toolbar: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    height: \"112px\"\r\n  },\r\n  listItemText: {\r\n    width: \"100%\",\r\n    overflow: \"hidden\"\r\n    //necesary to make textOverflow work\r\n  },\r\n  textSpan: {\r\n    display: \"block\",\r\n    whiteSpace: \"nowrap\",\r\n    width: \"100%\",\r\n    textOverflow: \"ellipsis\",\r\n    overflow: \"hidden\"\r\n  }\r\n}));\r\n\r\n//ad open if not works\r\nexport const Sidebar = ({ handleDrawerClose, handleDrawerOpen, expanded, handleSidebarToggle }) => {\r\n  const history = useHistory()\r\n  \r\n  const theme = useTheme();\r\n  const {viewport} = useViewport()\r\n  const { sidebarOpen } = useUILayer()\r\n  const { state } = useDataLayer()\r\n  const classes = useStyles({viewport});\r\n\r\n  const [selected, setSelected] = React.useState(\"\");\r\n\r\n  const handleSelect = (event, nodeIds) => {\r\n    setSelected(nodeIds);\r\n  };\r\n\r\n\r\n  return (\r\n    <Drawer\r\n    variant={viewport > 600 ? \"permanent\":\"temporary\"}\r\n      className={clsx(classes.drawer, {\r\n        [classes.drawerOpen]: sidebarOpen,\r\n        [classes.drawerClose]: !sidebarOpen,\r\n      })}\r\n      classes={{\r\n        paper: clsx({\r\n          [classes.drawerOpen]: sidebarOpen,\r\n          [classes.drawerClose]: !sidebarOpen,\r\n        }),\r\n      }}\r\n      //this is for the movile version\r\n      open={sidebarOpen}\r\n    >\r\n      <div className={classes.toolbar}>\r\n        <IconButton onClick={handleDrawerClose}>\r\n          {theme.direction === \"rtl\" ? (\r\n            <ChevronRightIcon />\r\n          ) : (\r\n              <ChevronLeftIcon />\r\n            )}\r\n        </IconButton>\r\n      </div>\r\n      <Divider />\r\n      <TreeView\r\n        style={{ margin: \"1rem 0\" }}\r\n\r\n        // defaultCollapseIcon={<ArrowDropDownIcon />}\r\n        // defaultExpandIcon={<ArrowRightIcon />}\r\n        defaultEndIcon={<div style={{ width: 24 }} />}\r\n        expanded={expanded}\r\n        selected={selected}\r\n        onClick={handleDrawerOpen}\r\n        onNodeToggle={handleSidebarToggle}\r\n        onNodeSelect={handleSelect}\r\n      >\r\n        <StyledTreeItem nodeId=\"13\" labelText=\"Search\" labelIcon={SearchIcon} isTitle\r\n          ariaLabel=\"search\"\r\n          onLabelClick={() => { history.push(\"/search\") }}\r\n        />\r\n        <StyledTreeItem nodeId=\"1\" labelText=\"Indexes\" labelIcon={MailIcon} isTitle\r\n\r\n        >\r\n          <StyledTreeItem\r\n            nodeId=\"2\"\r\n            labelText=\"S&P 500\"\r\n            labelIcon={SupervisorAccountIcon}\r\n            labelInfo=\"90\"\r\n            color=\"#1a73e8\"\r\n            bgColor=\"#e8f0fe\"\r\n            onLabelClick={() => { history.push(\"/indexes/sp500\") }}\r\n\r\n          />\r\n          <StyledTreeItem\r\n            nodeId=\"3\"\r\n            labelText=\"NASDAQ\"\r\n            labelIcon={InfoIcon}\r\n            labelInfo=\"2,294\"\r\n            color=\"#e3742f\"\r\n            bgColor=\"#fcefe3\"\r\n            onLabelClick={() => { history.push(\"/indexes/nasdaq\") }}\r\n\r\n          />\r\n          <StyledTreeItem\r\n            nodeId=\"4\"\r\n            labelText=\"Major INDEXES\"\r\n            labelIcon={ForumIcon}\r\n            labelInfo=\"3,566\"\r\n            color=\"#a250f5\"\r\n            bgColor=\"#f3e8fd\"\r\n            onLabelClick={() => { history.push(\"/indexes/general\") }}\r\n          />\r\n        </StyledTreeItem>\r\n\r\n        {/* <StyledTreeItem nodeId=\"7\" labelText=\"Sectors\" labelIcon={DeleteIcon} isTitle /> */}\r\n        <StyledTreeItem nodeId=\"8\" labelText=\"News\" labelIcon={Label} isTitle>\r\n          <StyledTreeItem\r\n            nodeId=\"9\"\r\n            labelText=\"General\"\r\n            labelIcon={SupervisorAccountIcon}\r\n            labelInfo=\"90\"\r\n            color=\"#1a73e8\"\r\n            bgColor=\"#e8f0fe\"\r\n            onLabelClick={() => { history.push(\"/news/general\") }}\r\n          />\r\n          <StyledTreeItem\r\n            nodeId=\"10\"\r\n            labelText=\"Forex\"\r\n            labelIcon={InfoIcon}\r\n            labelInfo=\"2,294\"\r\n            color=\"#e3742f\"\r\n            bgColor=\"#fcefe3\"\r\n            onLabelClick={() => { history.push(\"/news/forex\") }}\r\n          />\r\n          <StyledTreeItem\r\n            nodeId=\"11\"\r\n            labelText=\"Crypto\"\r\n            labelIcon={ForumIcon}\r\n            labelInfo=\"3,566\"\r\n            color=\"#a250f5\"\r\n            bgColor=\"#f3e8fd\"\r\n            onLabelClick={() => { history.push(\"/news/crypto\") }}\r\n          />\r\n          <StyledTreeItem\r\n            nodeId=\"12\"\r\n            labelText=\"Merger\"\r\n            labelIcon={LocalOfferIcon}\r\n            labelInfo=\"733\"\r\n            color=\"#3c8039\"\r\n            bgColor=\"#e6f4ea\"\r\n            onLabelClick={() => { history.push(\"/news/merger\") }}\r\n          />\r\n        </StyledTreeItem>\r\n        <StyledTreeItem nodeId=\"14\" labelText=\"Covid-19\" labelIcon={DeleteIcon}\r\n          isTitle\r\n          onClick={(e) => { history.push(\"/covid19\") }}\r\n        />\r\n      </TreeView>\r\n      <Divider />\r\n      <List\r\n      >\r\n\r\n        {state.visitedCompanies.length > 0 && state.visitedCompanies.map((company, index) => (\r\n          <ListItem button key={company.ticker}\r\n          >\r\n            {/* <ListItemIcon>\r\n              {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\r\n            </ListItemIcon> */}\r\n            <ListItemIcon>\r\n              <Typography>{company.ticker}</Typography>\r\n            </ListItemIcon>\r\n\r\n            <ListItemText\r\n              primary={company.name}\r\n              classes={{\r\n                root: classes.listItemText,\r\n                primary: classes.textSpan\r\n              }}\r\n            />\r\n          </ListItem>\r\n\r\n        ))}\r\n\r\n      </List>\r\n    </Drawer>\r\n  );\r\n};\r\n","C:\\Users\\gonza\\finance-app\\src\\portfolio\\logicPruebas.js",["318"],"import { useEffect } from \"react\";\r\nimport { useDataLayer } from \"../Context\";\r\nimport { convertHumanToUnix, convertUnixToHuman } from \"../utils/datesUtils\";\r\nimport { usePortfolioGenerator } from \"./portfolioGenerator\";\r\n//we lost lot of time by not realising .map() mutate object, so each time we were changing th eamount of one date we were change all the amount of the past dates as well kind of magically. That is because each date is an array of objects, and this objects are references from the previous object as we generate the the series from the objects of the date before. So everytime we were fining the updatedInfo, we were using the same object (as they werre pointing to he same memory dir), instead of a copy..\r\n\r\n\r\n//we are injecting this from App.js\r\n\r\n\r\nexport const userActivity = [\r\n    {\r\n        date: \"2020-06-15\",\r\n        operationType: \"buy\",\r\n        details: {\r\n            ticker: \"amzn\",\r\n            amount: 40,\r\n            unitaryCost: 300\r\n\r\n        },\r\n        isFirstOperation: true,\r\n\r\n    },\r\n    {\r\n        date: \"2020-06-15\",\r\n        operationType: \"buy\",\r\n        details: {\r\n            ticker: \"aapl\",\r\n            amount: 60,\r\n            unitaryCost: 300\r\n\r\n        },\r\n        isFirstOperation: false,\r\n\r\n    },\r\n    {\r\n        date: \"2020-06-15\",\r\n        operationType: \"sell\",\r\n        details: {\r\n            ticker: \"aapl\",\r\n            amount: 40,\r\n            priceSold: 300\r\n\r\n        },\r\n        isFirstOperation: false,\r\n    },\r\n    {\r\n        date: \"2020-06-16\",\r\n        operationType: \"buy\",\r\n        details: {\r\n            ticker: \"aa\",\r\n            amount: 40,\r\n            unitaryCost: 14\r\n\r\n        },\r\n        isFirstOperation: false,\r\n\r\n    },\r\n    {\r\n        date: \"2020-06-22\",\r\n        operationType: \"buy\",\r\n        details: {\r\n            ticker: \"aa\",\r\n            amount: 30,\r\n            unitaryCost: 14\r\n\r\n        },\r\n        isFirstOperation: false,\r\n    },\r\n    {\r\n        date: \"2020-06-25\",\r\n        operationType: \"buy\",\r\n        details: {\r\n            ticker: \"aa\",\r\n            amount: 30,\r\n            unitaryCost: 14\r\n\r\n        },\r\n        isFirstOperation: false,\r\n\r\n    },\r\n    {\r\n        date: \"2020-07-18\",\r\n        operationType: \"sell\",\r\n        details: {\r\n            ticker: \"aapl\",\r\n            amount: 10,\r\n            priceSold: 315\r\n\r\n        },\r\n        isFirstOperation: false,\r\n\r\n    },\r\n    {\r\n        date: \"2020-08-21\",\r\n        operationType: \"buy\",\r\n        details: {\r\n            ticker: \"fb\",\r\n            amount: 100,\r\n            unitaryCost: 10\r\n\r\n        },\r\n        isFirstOperation: false,\r\n\r\n    },\r\n    {\r\n        date: \"2020-08-21\",\r\n        operationType: \"buy\",\r\n        details: {\r\n            ticker: \"fb\",\r\n            amount: 20,\r\n            unitaryCost: 10\r\n\r\n        },\r\n        isFirstOperation: false,\r\n\r\n    },\r\n    {\r\n        date: \"2020-08-21\",\r\n        operationType: \"buy\",\r\n        details: {\r\n            ticker: \"tef\",\r\n            amount: 80,\r\n            unitaryCost: 7\r\n\r\n        },\r\n        isFirstOperation: false,\r\n\r\n    },\r\n    {\r\n        date: \"2020-09-24\",\r\n        operationType: \"sell\",\r\n        details: {\r\n            ticker: \"fb\",\r\n            amount: 120,\r\n            priceSold: 20\r\n\r\n        },\r\n        isFirstOperation: false,\r\n\r\n\r\n    },\r\n    {\r\n        date: \"2020-09-21\",\r\n        operationType: \"sell\",\r\n        details: {\r\n            ticker: \"tef\",\r\n            amount: 45,\r\n            priceSold: 3\r\n\r\n        },\r\n        isFirstOperation: false,\r\n\r\n    },\r\n    {\r\n        date: \"2020-10-26\",\r\n        operationType: \"sell\",\r\n        details: {\r\n            ticker: \"amzn\",\r\n            amount: 10,\r\n            priceSold: 3000\r\n\r\n        },\r\n        isFirstOperation: false,\r\n\r\n    }\r\n]\r\n//let initialTimeUnix = 0\r\n//gastamos 12.000 en acciones de amzn\r\n//vendemos 10 acciones a 3000, ingresando 30.000, ganamos 12.000\r\n\r\nconst findFirstDate = (userActivity) => {\r\n    let valu\r\n    userActivity.forEach(operation => {\r\n        if (operation.isFirstOperation) {\r\n            console.log(operation.date)\r\n            valu = convertHumanToUnix(operation.date)\r\n        }\r\n    })\r\n    return valu\r\n}\r\n\r\n\r\nconst milisencondsInADay = 24 * 60 * 60 * 1000\r\n\r\n\r\n\r\nconst getTotalDaysElapsed = (initialTime) => {\r\n    //const initialTime = findFirstDate()\r\n    const date = convertUnixToHuman(Date.now())\r\n    const todayUnix00 = convertHumanToUnix(date)\r\n    const totalMilisecons = todayUnix00 - initialTime\r\n    return totalMilisecons / milisencondsInADay\r\n}\r\n\r\n\r\n\r\nexport const useLogicPruebas = () => {\r\n\r\n    const { state, dispatch } = useDataLayer()\r\n\r\n    const createTimelaspse = (initialTime) => {\r\n        let timelapse = []\r\n        //let initialTime = findFirstDate(state.userActivity)\r\n        const range = getTotalDaysElapsed(initialTime)\r\n        //let unixDate = initialTimeUnix.current\r\n        //console.log(range)\r\n        Array.from(Array(range).keys()).forEach(_ => {\r\n            const humanDate = convertUnixToHuman(initialTime)\r\n            timelapse = [...timelapse, humanDate]\r\n            initialTime += milisencondsInADay\r\n        })\r\n        return timelapse\r\n    }\r\n\r\n    const handleSell = (costMeanXud, amountSold, priceSold) => {\r\n        const income = (priceSold * amountSold) - (costMeanXud * amountSold)\r\n        return { income }\r\n    }\r\n\r\n  \r\n\r\n    const generateSerieFromBegining = (userActivity, cb) => {\r\n        const initialTime = findFirstDate(userActivity)\r\n        console.log(initialTime, findFirstDate(userActivity), \"inicial\")\r\n        const timelapse = createTimelaspse(initialTime)\r\n        console.log(timelapse)\r\n        let masterHistory = {\r\n            income: 0\r\n        }\r\n        //here we initialize an empty array for each date\r\n        let koko = 0\r\n        timelapse.forEach(date => {\r\n            masterHistory = {\r\n                ...masterHistory,\r\n                dates: {\r\n                    ...masterHistory.dates,\r\n                    [date]: []\r\n                }\r\n            }\r\n        })\r\n        console.log(masterHistory, \"queu\")\r\n        timelapse.forEach((date, index) => {\r\n            console.log(date, \"fecha\")\r\n            let hasMadeOperationThatDate = false\r\n            userActivity.forEach(operation => {\r\n                if (date === operation.date) {\r\n                    console.log(index, \"iiii\")\r\n                    console.log(\"hola\")\r\n                    console.log(date, \"first date\")\r\n                    hasMadeOperationThatDate = true\r\n                    let ticker = operation.details.ticker\r\n                    let amount = operation.details.amount\r\n                    let unitaryCost = operation.details.unitaryCost\r\n                    let priceSold = operation.details.priceSold\r\n\r\n                    //tenemos que comprobar si teniamos alguna cantidad previamente de ese ticker\r\n                    let lastAmount = 0\r\n                    console.log(JSON.parse(JSON.stringify(masterHistory)), JSON.parse(JSON.stringify(masterHistory.dates)), masterHistory.dates[date], date, \"wata\")\r\n                    const hasAlreadyOperatedThatDay = masterHistory[\"dates\"][date].positions\r\n                    if (hasAlreadyOperatedThatDay) {\r\n                        console.log(ticker, \"operated twice that day\")\r\n                        const alreadyInPortfolio = masterHistory.dates[date].positions.find(item => item.ticker === ticker)\r\n                        if (alreadyInPortfolio) {\r\n                            lastAmount = alreadyInPortfolio.amount\r\n                            const newAmount =\r\n                                operation.operationType === \"buy\" ?\r\n                                    lastAmount + amount : lastAmount - amount\r\n                            if (operation.operationType === \"buy\") {\r\n                                const updatedInfo = masterHistory.dates[date].positions.map(({ ...posesions }) => {\r\n                                    if (posesions.ticker === ticker) {\r\n                                        posesions.amount = newAmount\r\n                                        const unitaryCostMean =\r\n                                            (posesions.unitaryCost * posesions.amount) /\r\n                                            (posesions.amount + amount)\r\n                                            +\r\n                                            (unitaryCost * amount) /\r\n                                            (posesions.amount + amount)\r\n\r\n                                        posesions.unitaryCost = Math.round(unitaryCostMean * 100) / 100\r\n                                    }\r\n                                    return posesions\r\n                                })\r\n                                masterHistory = {\r\n                                    ...masterHistory,\r\n                                    dates: {\r\n                                        ...masterHistory.dates,\r\n                                        [date]: {\r\n                                            ...masterHistory.dates[date],\r\n                                            positions: updatedInfo\r\n                                        }\r\n                                    }\r\n\r\n                                }\r\n                            }\r\n                            else if (operation.operationType === \"sell\") {\r\n                                let dateIncome, operationIncome;\r\n                                masterHistory.dates[date].positions.forEach(posesions => {\r\n                                    if (posesions.ticker === ticker) {\r\n                                        if (index === 0) {\r\n                                            console.log(posesions.unitaryCost, \r\n                                            amount, priceSold, \"incomeee\")\r\n                                        }\r\n                                        const { income } = handleSell(posesions.unitaryCost, amount, priceSold)\r\n                                        if (index === 0) {\r\n                                            console.log(JSON.parse(JSON.stringify(income, \"incomeee\")))\r\n                                        }\r\n                                        operationIncome = income\r\n\r\n                                        dateIncome = masterHistory.dates[date].income + income\r\n                                    }\r\n                                })\r\n                                let updatedInfo = newAmount !== 0 ?\r\n                                    masterHistory.dates[date].positions.map(({ ...posesions }) => {\r\n                                        if (posesions.ticker === ticker) {\r\n                                            posesions.amount = newAmount\r\n                                            posesions[\"income\"] = operationIncome\r\n                                        }\r\n                                        return posesions\r\n                                    })\r\n                                    :\r\n                                    masterHistory.dates[date].positions.filter(item => item.ticker !== ticker)\r\n\r\n                                masterHistory = {\r\n                                    ...masterHistory,\r\n                                    dates: {\r\n                                        ...masterHistory.dates,\r\n                                        [date]: {\r\n                                            income: dateIncome,\r\n                                            positions: updatedInfo\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            masterHistory = {\r\n                                ...masterHistory,\r\n                                dates: {\r\n                                    ...masterHistory.dates,\r\n                                    [date]: {\r\n                                        ...masterHistory.dates[date],\r\n                                        positions: [\r\n                                            ...masterHistory.dates[date].positions,\r\n                                            {\r\n                                                ticker,\r\n                                                amount,\r\n                                                unitaryCost\r\n                                            }\r\n                                        ]\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //if is the first iteration we now this is the initial operation so there're weren stocks before.\r\n                    else {\r\n                        const alreadyInPortfolio = index === 0 ? false : masterHistory.dates[timelapse[index - 1]].positions.find(item => item.ticker === ticker)\r\n                        console.log(alreadyInPortfolio, \"que concho\")\r\n                        if (alreadyInPortfolio) {\r\n                            lastAmount = alreadyInPortfolio.amount\r\n                            const newAmount =\r\n                                operation.operationType === \"buy\" ?\r\n                                    lastAmount + amount : lastAmount - amount\r\n                            if (operation.operationType === \"buy\") {\r\n                                const updatedInfo = masterHistory.dates[timelapse[index - 1]].positions.map(({ ...posesions }) => {\r\n                                    console.log(posesions, \"cojones\")\r\n                                    if (posesions.ticker === ticker) {\r\n                                        posesions.amount = newAmount\r\n                                        const unitaryCostMean =\r\n                                            (posesions.unitaryCost * posesions.amount) /\r\n                                            (posesions.amount + amount)\r\n                                            +\r\n                                            (unitaryCost * amount) /\r\n                                            (posesions.amount + amount)\r\n\r\n                                        posesions.unitaryCost = Math.round(unitaryCostMean * 100) / 100\r\n                                    }\r\n                                    return posesions\r\n                                })\r\n\r\n                                masterHistory = {\r\n                                    ...masterHistory,\r\n                                    dates: {\r\n                                        ...masterHistory.dates,\r\n                                        [date]: {\r\n                                            ...masterHistory.dates[timelapse[index-1]],\r\n                                            positions: updatedInfo\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            else if (operation.operationType === \"sell\") {\r\n                                // console.log(JSON.parse(JSON.stringify(masterHistory)), \"antes\", ticker, date, timelapse[index - 1])\r\n                                //let newIncome;\r\n                                let operationIncome;\r\n                                let dateIncome;\r\n                                masterHistory.dates[timelapse[index - 1]].positions.forEach(posesions => {\r\n                                    if (posesions.ticker === ticker) {\r\n                                        const { income } = handleSell(posesions.unitaryCost, amount, priceSold)\r\n                                        operationIncome = income\r\n                                        dateIncome = masterHistory.dates[timelapse[index - 1]].income + income\r\n                                    }\r\n                                })\r\n                                let updatedInfo = newAmount !== 0 ?\r\n                                    masterHistory.dates[timelapse[index - 1]].positions.map(({ ...posesions }) => {\r\n                                        if (posesions.ticker === ticker) {\r\n                                            posesions.amount = newAmount\r\n                                            posesions[\"income\"] = operationIncome\r\n                                        }\r\n                                        return posesions\r\n                                    })\r\n                                    :\r\n                                    masterHistory.dates[timelapse[index - 1]].positions.filter(item => item.ticker !== ticker)\r\n                                // console.log(JSON.parse(JSON.stringify(masterHistory)), \"despues\", ticker, date, timelapse[index - 1])\r\n                                masterHistory = {\r\n                                    ...masterHistory,\r\n                                    dates: {\r\n                                        ...masterHistory.dates,\r\n                                        [date]: {\r\n                                            income: dateIncome,\r\n                                            positions: updatedInfo\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                        } else {\r\n                            //si opera varias en un dia, el codigo no debe pasar x aqui\r\n                            const info = {\r\n                                ticker,\r\n                                amount,\r\n                                unitaryCost\r\n                            }\r\n\r\n                            if (index === 0) {\r\n                                console.log(info, \"info\")\r\n                                //aunque sea el primer dia\r\n                                masterHistory = {\r\n                                    ...masterHistory,\r\n                                    dates: {\r\n                                        ...masterHistory.dates,\r\n                                        [date]: {\r\n                                            income: 0,\r\n                                            positions: [\r\n                                                info\r\n                                            ]\r\n                                        }\r\n                                    }\r\n\r\n                                }\r\n\r\n                            } else {\r\n                                masterHistory = {\r\n                                    ...masterHistory,\r\n                                    dates: {\r\n                                        ...masterHistory.dates,\r\n                                        [date]: {\r\n                                            ...masterHistory.dates[timelapse[index - 1]],\r\n                                            positions: [\r\n                                                ...masterHistory.dates[timelapse[index - 1]].positions,\r\n                                                info\r\n                                            ]\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n            if (!hasMadeOperationThatDate) {\r\n                //si no hemos operado copiaremos el contenido del dia anterior\r\n                //console.log(\"no operation that day\")\r\n                koko++\r\n                console.log(koko, \"recuento\")\r\n                const lastInfo = masterHistory.dates[timelapse[index - 1]]\r\n                console.log(lastInfo)\r\n                masterHistory = {\r\n                    ...masterHistory,\r\n                    dates: {\r\n                        ...masterHistory.dates,\r\n                        [date]: lastInfo\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        console.log(masterHistory, \"aveeer nena\")\r\n        cb(masterHistory)\r\n    }\r\n//solo se recalcularan las series cuando el ususario haya echo una nueva operacion y o cuando haya entrado en portolio dashboard\r\n    usePortfolioGenerator()\r\n    useEffect(() => {\r\n        if (state.userActivity.length > 0 && Object.keys(state.portfolioHistory).length > 0) {\r\n            generateSerieFromBegining(state.userActivity, (generatedSerie) => { dispatch({ type: \"STORE_GENERATED_SERIES\", payload: generatedSerie }) })\r\n        }\r\n    }, [state.userActivity, state.portfolioHistory])\r\n\r\n   \r\n}\r\n\r\n\r\n\r\n//console.log(createTimelaspse(), \"yea\")\r\n\r\n\r\n\r\n\r\n//makeIt()\r\n//console.log(findFirstDate(), \"aqui\")","C:\\Users\\gonza\\finance-app\\src\\views\\principal\\elements\\News.js",["319","320","321"],"import React, { useEffect, useState } from 'react'\r\nimport { useFetch } from '../../../utils/useFetch'\r\nimport { useFetchWithCors } from '../../../utils/useFetchWithCors'\r\nimport { useParams } from \"react-router-dom\"\r\nimport { GridComposition, NewsItem, NewsItemOver } from '../../../components/NewsItem'\r\nimport { useViewport } from '../../../utils/useViewport'\r\nimport { CompassCalibrationOutlined } from '@material-ui/icons'\r\n\r\n\r\n\r\nexport const News = ({ principal = false, title, classnames }) => {\r\n    // const {data, loading, error} = useFetchWithCors(\"http://localhost:8001/news\", \"news\", true)\r\n    const { category } = useParams()\r\n    const options = { explicitUrl: true }\r\n    const { datos, loading, error } = useFetch(`https://finnhub.io/api/v1/news?category=${category}&token=btm6dp748v6ud360stcg`, category, \"news\", options)\r\n    const [datosGrid, setDatosGrid] = useState(\"\")\r\n    const [newsPerPage, setNewsPerPage] = useState(4)\r\n    const { viewport } = useViewport()\r\n    const arrangeDatos = (data) => {\r\n        let gridArr = []\r\n        let initialNum = 0\r\n        let finalNum = 3\r\n        Array(Math.round(data.length / 3)).fill(0).forEach(() => {\r\n            let chunk = data.slice(initialNum, finalNum)\r\n            gridArr = [...gridArr, chunk]\r\n            initialNum += 3\r\n            finalNum += 3\r\n            console.log(finalNum, \"xii\")\r\n        })\r\n        console.log(gridArr, \"xwww\")\r\n        setDatosGrid(gridArr)\r\n    }\r\n    useEffect(() => {\r\n        if (datos.length > 0) {\r\n            arrangeDatos(datos)\r\n        }\r\n    }, [datos])\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const handleScrollBottom = () => {\r\n            if ((window.innerHeight + window.pageYOffset) >= document.body.offsetHeight) {\r\n                setNewsPerPage(prev => prev + 4)\r\n            }\r\n        }\r\n        document.addEventListener(\"scroll\", handleScrollBottom)\r\n        return () => {\r\n            document.removeEventListener(\"scroll\", handleScrollBottom)\r\n        }\r\n    }, [])\r\n\r\n    console.log(datos.length, \"ojones\")\r\n    return (\r\n        <div className={classnames}>\r\n            {   datos.length > 0 && principal ?\r\n                <>\r\n                    {loading && <p>loading...</p>}\r\n                    {error && <p>{error}</p>}\r\n\r\n\r\n                    <> {viewport < 1000 ?\r\n                        datos.map(item => <NewsItem item={item} />)\r\n                        :\r\n                        (<>\r\n\r\n                            { datosGrid && datosGrid.slice(1, newsPerPage).map(item => <GridComposition chunk={item} />)}\r\n                            {/* { datos && datos.slice(3, datos.length).map(item => <NewsItemOver item={item} />)} */}\r\n                        </>)\r\n                    }\r\n                    </>\r\n\r\n                </>\r\n                :\r\n                <>\r\n                    {datos.length > 0 && datos.map(item => <NewsItem item={item} />)}\r\n                </>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nNews.defaultProps = {\r\n    title: ()=>null\r\n}","C:\\Users\\gonza\\finance-app\\src\\components\\components\\CustomCircularProgress.js",[],"C:\\Users\\gonza\\finance-app\\src\\views\\company\\BottomSection.js",["322","323","324","325","326","327","328","329","330"],"C:\\Users\\gonza\\finance-app\\src\\charts\\CustomAreaChart.js",["331","332"],"C:\\Users\\gonza\\finance-app\\src\\charts\\GeneralIndexDispatcher.js",["333"],"C:\\Users\\gonza\\finance-app\\src\\utils\\useFetchWithCors.js",["334","335"],"C:\\Users\\gonza\\finance-app\\src\\portfolio\\portfolioGenerator2.js",["336","337","338","339","340","341","342","343","344","345"],{"ruleId":"346","severity":1,"message":"347","line":69,"column":17,"nodeType":"348","messageId":"349","endLine":69,"endColumn":25},{"ruleId":"350","severity":1,"message":"351","line":81,"column":6,"nodeType":"352","endLine":81,"endColumn":8,"suggestions":"353"},{"ruleId":"350","severity":1,"message":"354","line":111,"column":6,"nodeType":"352","endLine":111,"endColumn":17,"suggestions":"355"},{"ruleId":"350","severity":1,"message":"356","line":122,"column":6,"nodeType":"352","endLine":122,"endColumn":28,"suggestions":"357"},{"ruleId":"358","replacedBy":"359"},{"ruleId":"360","replacedBy":"361"},{"ruleId":"346","severity":1,"message":"362","line":5,"column":8,"nodeType":"348","messageId":"349","endLine":5,"endColumn":11},{"ruleId":"346","severity":1,"message":"363","line":7,"column":25,"nodeType":"348","messageId":"349","endLine":7,"endColumn":30},{"ruleId":"364","severity":1,"message":"365","line":26,"column":1,"nodeType":"366","messageId":"367","endLine":26,"endColumn":20},{"ruleId":"346","severity":1,"message":"368","line":100,"column":11,"nodeType":"348","messageId":"349","endLine":100,"endColumn":23},{"ruleId":"346","severity":1,"message":"369","line":102,"column":15,"nodeType":"348","messageId":"349","endLine":102,"endColumn":19},{"ruleId":"350","severity":1,"message":"370","line":109,"column":8,"nodeType":"352","endLine":109,"endColumn":24,"suggestions":"371"},{"ruleId":"350","severity":1,"message":"372","line":608,"column":8,"nodeType":"352","endLine":608,"endColumn":28,"suggestions":"373"},{"ruleId":"346","severity":1,"message":"374","line":1,"column":8,"nodeType":"348","messageId":"349","endLine":1,"endColumn":13},{"ruleId":"346","severity":1,"message":"375","line":5,"column":10,"nodeType":"348","messageId":"349","endLine":5,"endColumn":28},{"ruleId":"346","severity":1,"message":"376","line":6,"column":10,"nodeType":"348","messageId":"349","endLine":6,"endColumn":29},{"ruleId":"346","severity":1,"message":"377","line":20,"column":21,"nodeType":"348","messageId":"349","endLine":20,"endColumn":31},{"ruleId":"346","severity":1,"message":"378","line":59,"column":11,"nodeType":"348","messageId":"349","endLine":59,"endColumn":30},{"ruleId":"379","severity":1,"message":"380","line":135,"column":43,"nodeType":"381","messageId":"382","endLine":135,"endColumn":44},{"ruleId":"350","severity":1,"message":"383","line":199,"column":8,"nodeType":"352","endLine":199,"endColumn":70,"suggestions":"384"},{"ruleId":"350","severity":1,"message":"385","line":207,"column":8,"nodeType":"352","endLine":207,"endColumn":55,"suggestions":"386"},{"ruleId":"350","severity":1,"message":"387","line":226,"column":8,"nodeType":"352","endLine":226,"endColumn":17,"suggestions":"388"},{"ruleId":"350","severity":1,"message":"389","line":241,"column":8,"nodeType":"352","endLine":241,"endColumn":23,"suggestions":"390"},{"ruleId":"346","severity":1,"message":"374","line":1,"column":8,"nodeType":"348","messageId":"349","endLine":1,"endColumn":13},{"ruleId":"350","severity":1,"message":"391","line":165,"column":8,"nodeType":"352","endLine":165,"endColumn":92,"suggestions":"392"},{"ruleId":"346","severity":1,"message":"374","line":1,"column":8,"nodeType":"348","messageId":"349","endLine":1,"endColumn":13},{"ruleId":"346","severity":1,"message":"393","line":8,"column":11,"nodeType":"348","messageId":"349","endLine":8,"endColumn":20},{"ruleId":"350","severity":1,"message":"356","line":33,"column":8,"nodeType":"352","endLine":33,"endColumn":28,"suggestions":"394"},{"ruleId":"346","severity":1,"message":"395","line":14,"column":10,"nodeType":"348","messageId":"349","endLine":14,"endColumn":19},{"ruleId":"350","severity":1,"message":"396","line":17,"column":8,"nodeType":"352","endLine":17,"endColumn":38,"suggestions":"397"},{"ruleId":"346","severity":1,"message":"398","line":1,"column":28,"nodeType":"348","messageId":"349","endLine":1,"endColumn":34},{"ruleId":"346","severity":1,"message":"399","line":6,"column":10,"nodeType":"348","messageId":"349","endLine":6,"endColumn":17},{"ruleId":"346","severity":1,"message":"400","line":2,"column":22,"nodeType":"348","messageId":"349","endLine":2,"endColumn":27},{"ruleId":"350","severity":1,"message":"401","line":36,"column":8,"nodeType":"352","endLine":36,"endColumn":15,"suggestions":"402"},{"ruleId":"346","severity":1,"message":"374","line":1,"column":8,"nodeType":"348","messageId":"349","endLine":1,"endColumn":13},{"ruleId":"350","severity":1,"message":"403","line":53,"column":6,"nodeType":"352","endLine":53,"endColumn":14,"suggestions":"404"},{"ruleId":"350","severity":1,"message":"405","line":72,"column":6,"nodeType":"352","endLine":72,"endColumn":13,"suggestions":"406"},{"ruleId":"346","severity":1,"message":"407","line":3,"column":10,"nodeType":"348","messageId":"349","endLine":3,"endColumn":26},{"ruleId":"350","severity":1,"message":"408","line":65,"column":8,"nodeType":"352","endLine":65,"endColumn":19,"suggestions":"409"},{"ruleId":"350","severity":1,"message":"410","line":71,"column":8,"nodeType":"352","endLine":71,"endColumn":15,"suggestions":"411"},{"ruleId":"350","severity":1,"message":"412","line":82,"column":8,"nodeType":"352","endLine":82,"endColumn":20,"suggestions":"413"},{"ruleId":"358","replacedBy":"414"},{"ruleId":"360","replacedBy":"415"},{"ruleId":"346","severity":1,"message":"374","line":1,"column":8,"nodeType":"348","messageId":"349","endLine":1,"endColumn":13},{"ruleId":"350","severity":1,"message":"416","line":53,"column":6,"nodeType":"352","endLine":53,"endColumn":13,"suggestions":"417"},{"ruleId":"350","severity":1,"message":"418","line":73,"column":6,"nodeType":"352","endLine":73,"endColumn":21,"suggestions":"419"},{"ruleId":"346","severity":1,"message":"420","line":1,"column":10,"nodeType":"348","messageId":"349","endLine":1,"endColumn":16},{"ruleId":"346","severity":1,"message":"421","line":1,"column":18,"nodeType":"348","messageId":"349","endLine":1,"endColumn":22},{"ruleId":"346","severity":1,"message":"422","line":2,"column":17,"nodeType":"348","messageId":"349","endLine":2,"endColumn":26},{"ruleId":"346","severity":1,"message":"423","line":11,"column":10,"nodeType":"348","messageId":"349","endLine":11,"endColumn":14},{"ruleId":"346","severity":1,"message":"424","line":19,"column":11,"nodeType":"348","messageId":"349","endLine":19,"endColumn":16},{"ruleId":"346","severity":1,"message":"425","line":19,"column":18,"nodeType":"348","messageId":"349","endLine":19,"endColumn":26},{"ruleId":"346","severity":1,"message":"426","line":36,"column":9,"nodeType":"348","messageId":"349","endLine":36,"endColumn":21},{"ruleId":"346","severity":1,"message":"427","line":4,"column":10,"nodeType":"348","messageId":"349","endLine":4,"endColumn":28},{"ruleId":"346","severity":1,"message":"425","line":8,"column":20,"nodeType":"348","messageId":"349","endLine":8,"endColumn":28},{"ruleId":"350","severity":1,"message":"428","line":32,"column":8,"nodeType":"352","endLine":32,"endColumn":10,"suggestions":"429"},{"ruleId":"346","severity":1,"message":"374","line":1,"column":8,"nodeType":"348","messageId":"349","endLine":1,"endColumn":13},{"ruleId":"346","severity":1,"message":"422","line":1,"column":17,"nodeType":"348","messageId":"349","endLine":1,"endColumn":26},{"ruleId":"346","severity":1,"message":"430","line":7,"column":13,"nodeType":"348","messageId":"349","endLine":7,"endColumn":17},{"ruleId":"358","replacedBy":"431"},{"ruleId":"360","replacedBy":"432"},{"ruleId":"346","severity":1,"message":"395","line":11,"column":9,"nodeType":"348","messageId":"349","endLine":11,"endColumn":18},{"ruleId":"346","severity":1,"message":"433","line":4,"column":10,"nodeType":"348","messageId":"349","endLine":4,"endColumn":23},{"ruleId":"346","severity":1,"message":"434","line":5,"column":10,"nodeType":"348","messageId":"349","endLine":5,"endColumn":24},{"ruleId":"346","severity":1,"message":"435","line":6,"column":10,"nodeType":"348","messageId":"349","endLine":6,"endColumn":32},{"ruleId":"346","severity":1,"message":"436","line":7,"column":10,"nodeType":"348","messageId":"349","endLine":7,"endColumn":18},{"ruleId":"346","severity":1,"message":"437","line":11,"column":11,"nodeType":"348","messageId":"349","endLine":11,"endColumn":19},{"ruleId":"346","severity":1,"message":"438","line":12,"column":11,"nodeType":"348","messageId":"349","endLine":12,"endColumn":22},{"ruleId":"346","severity":1,"message":"439","line":13,"column":11,"nodeType":"348","messageId":"349","endLine":13,"endColumn":18},{"ruleId":"346","severity":1,"message":"440","line":17,"column":29,"nodeType":"348","messageId":"349","endLine":17,"endColumn":37},{"ruleId":"346","severity":1,"message":"441","line":17,"column":39,"nodeType":"348","messageId":"349","endLine":17,"endColumn":45},{"ruleId":"350","severity":1,"message":"442","line":40,"column":6,"nodeType":"352","endLine":40,"endColumn":13,"suggestions":"443"},{"ruleId":"350","severity":1,"message":"444","line":46,"column":6,"nodeType":"352","endLine":46,"endColumn":12,"suggestions":"445"},{"ruleId":"346","severity":1,"message":"446","line":1,"column":46,"nodeType":"348","messageId":"349","endLine":1,"endColumn":61},{"ruleId":"346","severity":1,"message":"447","line":4,"column":10,"nodeType":"348","messageId":"349","endLine":4,"endColumn":20},{"ruleId":"350","severity":1,"message":"401","line":21,"column":8,"nodeType":"352","endLine":21,"endColumn":15,"suggestions":"448"},{"ruleId":"346","severity":1,"message":"449","line":43,"column":13,"nodeType":"348","messageId":"349","endLine":43,"endColumn":18},{"ruleId":"346","severity":1,"message":"450","line":44,"column":13,"nodeType":"348","messageId":"349","endLine":44,"endColumn":19},{"ruleId":"350","severity":1,"message":"451","line":25,"column":6,"nodeType":"352","endLine":25,"endColumn":8,"suggestions":"452"},{"ruleId":"350","severity":1,"message":"453","line":32,"column":6,"nodeType":"352","endLine":32,"endColumn":14,"suggestions":"454"},{"ruleId":"346","severity":1,"message":"374","line":1,"column":8,"nodeType":"348","messageId":"349","endLine":1,"endColumn":13},{"ruleId":"350","severity":1,"message":"442","line":13,"column":8,"nodeType":"352","endLine":13,"endColumn":15,"suggestions":"455"},{"ruleId":"346","severity":1,"message":"430","line":89,"column":5,"nodeType":"348","messageId":"349","endLine":89,"endColumn":9},{"ruleId":"346","severity":1,"message":"456","line":5,"column":8,"nodeType":"348","messageId":"349","endLine":5,"endColumn":20},{"ruleId":"346","severity":1,"message":"457","line":6,"column":8,"nodeType":"348","messageId":"349","endLine":6,"endColumn":16},{"ruleId":"346","severity":1,"message":"458","line":7,"column":8,"nodeType":"348","messageId":"349","endLine":7,"endColumn":12},{"ruleId":"346","severity":1,"message":"459","line":8,"column":8,"nodeType":"348","messageId":"349","endLine":8,"endColumn":15},{"ruleId":"346","severity":1,"message":"460","line":34,"column":9,"nodeType":"348","messageId":"349","endLine":34,"endColumn":24},{"ruleId":"346","severity":1,"message":"461","line":4,"column":3,"nodeType":"348","messageId":"349","endLine":4,"endColumn":6},{"ruleId":"346","severity":1,"message":"422","line":14,"column":17,"nodeType":"348","messageId":"349","endLine":14,"endColumn":26},{"ruleId":"346","severity":1,"message":"462","line":20,"column":8,"nodeType":"348","messageId":"349","endLine":20,"endColumn":17},{"ruleId":"346","severity":1,"message":"463","line":22,"column":10,"nodeType":"348","messageId":"349","endLine":22,"endColumn":18},{"ruleId":"350","severity":1,"message":"464","line":499,"column":8,"nodeType":"352","endLine":499,"endColumn":52,"suggestions":"465"},{"ruleId":"346","severity":1,"message":"407","line":3,"column":10,"nodeType":"348","messageId":"349","endLine":3,"endColumn":26},{"ruleId":"346","severity":1,"message":"466","line":5,"column":37,"nodeType":"348","messageId":"349","endLine":5,"endColumn":49},{"ruleId":"346","severity":1,"message":"467","line":7,"column":10,"nodeType":"348","messageId":"349","endLine":7,"endColumn":36},{"ruleId":"346","severity":1,"message":"458","line":2,"column":3,"nodeType":"348","messageId":"349","endLine":2,"endColumn":7},{"ruleId":"346","severity":1,"message":"457","line":3,"column":3,"nodeType":"348","messageId":"349","endLine":3,"endColumn":11},{"ruleId":"346","severity":1,"message":"456","line":4,"column":3,"nodeType":"348","messageId":"349","endLine":4,"endColumn":15},{"ruleId":"346","severity":1,"message":"468","line":6,"column":3,"nodeType":"348","messageId":"349","endLine":6,"endColumn":13},{"ruleId":"346","severity":1,"message":"422","line":8,"column":17,"nodeType":"348","messageId":"349","endLine":8,"endColumn":26},{"ruleId":"346","severity":1,"message":"398","line":8,"column":28,"nodeType":"348","messageId":"349","endLine":8,"endColumn":34},{"ruleId":"346","severity":1,"message":"469","line":8,"column":36,"nodeType":"348","messageId":"349","endLine":8,"endColumn":44},{"ruleId":"346","severity":1,"message":"470","line":9,"column":10,"nodeType":"348","messageId":"349","endLine":9,"endColumn":19},{"ruleId":"346","severity":1,"message":"471","line":10,"column":10,"nodeType":"348","messageId":"349","endLine":10,"endColumn":22},{"ruleId":"346","severity":1,"message":"424","line":11,"column":12,"nodeType":"348","messageId":"349","endLine":11,"endColumn":17},{"ruleId":"346","severity":1,"message":"425","line":11,"column":19,"nodeType":"348","messageId":"349","endLine":11,"endColumn":27},{"ruleId":"350","severity":1,"message":"472","line":15,"column":8,"nodeType":"352","endLine":15,"endColumn":23,"suggestions":"473"},{"ruleId":"346","severity":1,"message":"374","line":1,"column":8,"nodeType":"348","messageId":"349","endLine":1,"endColumn":13},{"ruleId":"350","severity":1,"message":"474","line":47,"column":8,"nodeType":"352","endLine":47,"endColumn":10,"suggestions":"475"},{"ruleId":"346","severity":1,"message":"374","line":1,"column":8,"nodeType":"348","messageId":"349","endLine":1,"endColumn":13},{"ruleId":"346","severity":1,"message":"476","line":20,"column":13,"nodeType":"348","messageId":"349","endLine":20,"endColumn":30},{"ruleId":"346","severity":1,"message":"477","line":21,"column":13,"nodeType":"348","messageId":"349","endLine":21,"endColumn":19},{"ruleId":"346","severity":1,"message":"478","line":21,"column":21,"nodeType":"348","messageId":"349","endLine":21,"endColumn":31},{"ruleId":"346","severity":1,"message":"479","line":21,"column":33,"nodeType":"348","messageId":"349","endLine":21,"endColumn":42},{"ruleId":"346","severity":1,"message":"480","line":22,"column":13,"nodeType":"348","messageId":"349","endLine":22,"endColumn":23},{"ruleId":"346","severity":1,"message":"477","line":90,"column":13,"nodeType":"348","messageId":"349","endLine":90,"endColumn":19},{"ruleId":"346","severity":1,"message":"481","line":90,"column":21,"nodeType":"348","messageId":"349","endLine":90,"endColumn":29},{"ruleId":"346","severity":1,"message":"482","line":90,"column":31,"nodeType":"348","messageId":"349","endLine":90,"endColumn":41},{"ruleId":"350","severity":1,"message":"391","line":207,"column":8,"nodeType":"352","endLine":207,"endColumn":92,"suggestions":"483"},"no-unused-vars","'setWidth' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'inicializadorStadoPrueba'. Either include it or remove the dependency array.","ArrayExpression",["484"],"React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.",["485"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["486"],"no-native-reassign",["487"],"no-negated-in-lhs",["488"],"'App' is defined but never used.","'Route' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'getHumanDate' is assigned a value but never used.","'date' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'modalOpen'. Either include it or remove the dependency array.",["489"],"React Hook useEffect has missing dependencies: 'addToGeneratedSeries', 'dispatch', and 'generateSerieFromBegining'. Either include them or remove the dependency array.",["490"],"'React' is defined but never used.","'PortfolioGenerator' is defined but never used.","'PortfolioPriceChart' is defined but never used.","'setAllData' is assigned a value but never used.","'getNewCompanyPrices' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","React Hook useEffect has missing dependencies: 'getAllTickers' and 'state.currentPossesions.stocks'. Either include them or remove the dependency array.",["491"],"React Hook useEffect has a missing dependency: 'getMissingTicker'. Either include it or remove the dependency array.",["492"],"React Hook useEffect has missing dependencies: 'dispatch' and 'prepareData'. Either include them or remove the dependency array.",["493"],"React Hook useEffect has missing dependencies: 'dispatch' and 'updateData'. Either include them or remove the dependency array.",["494"],"React Hook useEffect has missing dependencies: 'dispatch', 'generateSerie', and 'updateSerie'. Either include them or remove the dependency array.",["495"],"'iteration' is assigned a value but never used.",["496"],"'useParams' is defined but never used.","React Hook useEffect has a missing dependency: 'state.currentPossesions'. Either include it or remove the dependency array.",["497"],"'useRef' is defined but never used.","'Indices' is defined but never used.","'chart' is defined but never used.","React Hook useEffect has a missing dependency: 'prepareData'. Either include it or remove the dependency array.",["498"],"React Hook useEffect has missing dependencies: 'datos', 'dispatch', 'field', 'isInState', 'options.explicitUrl', 'state', and 'url'. Either include them or remove the dependency array. If 'setRequest' needs the current value of 'field', you can also switch to useReducer instead of useState and read 'field' in the reducer.",["499"],"React Hook useEffect has missing dependencies: 'field' and 'ticker'. Either include them or remove the dependency array. If 'setRequest' needs the current value of 'field', you can also switch to useReducer instead of useState and read 'field' in the reducer.",["500"],"'useFetchWithCors' is defined but never used.","React Hook useEffect has a missing dependency: 'recursivadorStyle'. Either include it or remove the dependency array.",["501"],"React Hook useEffect has a missing dependency: 'setMode'. Either include it or remove the dependency array. If 'setMode' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["502"],"React Hook useEffect has a missing dependency: 'setDate'. Either include it or remove the dependency array. If 'setDate' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["503"],["487"],["488"],"React Hook useEffect has missing dependencies: 'datos', 'dispatch', 'isInState', 'options.explicitUrl', 'state.indexes', 'ticker', and 'url'. Either include them or remove the dependency array. If 'setRequest' needs the current value of 'ticker', you can also switch to useReducer instead of useState and read 'ticker' in the reducer.",["504"],"React Hook useEffect has missing dependencies: 'field', 'state', and 'ticker'. Either include them or remove the dependency array. If 'setRequest' needs the current value of 'field', you can also switch to useReducer instead of useState and read 'field' in the reducer.",["505"],"'Button' is defined but never used.","'Chip' is defined but never used.","'useEffect' is defined but never used.","'open' is assigned a value but never used.","'state' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'handleSearch' is assigned a value but never used.","'convertHumanToUnix' is defined but never used.","React Hook useEffect has missing dependencies: 'state.portfolioHistoryByCompany' and 'ticker'. Either include them or remove the dependency array.",["506"],"'data' is assigned a value but never used.",["487"],["488"],"'IndexesChart2' is defined but never used.","'MiniatureChart' is defined but never used.","'CustomCircularProgress' is defined but never used.","'useFetch' is defined but never used.","'category' is assigned a value but never used.","'subCategory' is assigned a value but never used.","'options' is assigned a value but never used.","'loading2' is assigned a value but never used.","'error2' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'ticker'. Either include it or remove the dependency array. If 'setData' needs the current value of 'ticker', you can also switch to useReducer instead of useState and read 'ticker' in the reducer.",["507"],"React Hook useEffect has missing dependencies: 'dispatch', 'state.keymetrics', and 'ticker'. Either include them or remove the dependency array.",["508"],"'useLayoutEffect' is defined but never used.","'useUILayer' is defined but never used.",["509"],"'ohlNA' is assigned a value but never used.","'volume' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'location', 'params', and 'tickar'. Either include them or remove the dependency array.",["510"],"React Hook useEffect has missing dependencies: 'dispatch' and 'ticker'. Either include them or remove the dependency array.",["511"],["512"],"'ListItemText' is defined but never used.","'ListItem' is defined but never used.","'List' is defined but never used.","'Divider' is defined but never used.","'handleClickOpen' is assigned a value but never used.","'Box' is defined but never used.","'InboxIcon' is defined but never used.","'TreeItem' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'generateSerieFromBegining'. Either include them or remove the dependency array.",["513"],"'NewsItemOver' is defined but never used.","'CompassCalibrationOutlined' is defined but never used.","'Typography' is defined but never used.","'useState' is defined but never used.","'Linechart' is defined but never used.","'useDataLayer' is defined but never used.","React Hook useEffect has a missing dependency: 'datos.symbol'. Either include it or remove the dependency array.",["514"],"React Hook useEffect has missing dependencies: 'dispatch', 'fromOwnServer', 'isInState', 'topic', and 'url'. Either include them or remove the dependency array. If 'setRequest' needs the current value of 'fromOwnServer', you can also switch to useReducer instead of useState and read 'fromOwnServer' in the reducer.",["515"],"'lastDaySerieStep2' is defined but never used.","'change' is defined but never used.","'incomeDiff' is defined but never used.","'dayBefore' is defined but never used.","'lastIncome' is assigned a value but never used.","'lastDate' is defined but never used.","'lastIncome' is defined but never used.",["516"],{"desc":"517","fix":"518"},{"desc":"519","fix":"520"},{"desc":"521","fix":"522"},"no-global-assign","no-unsafe-negation",{"desc":"523","fix":"524"},{"desc":"525","fix":"526"},{"desc":"527","fix":"528"},{"desc":"529","fix":"530"},{"desc":"531","fix":"532"},{"desc":"533","fix":"534"},{"desc":"535","fix":"536"},{"desc":"537","fix":"538"},{"desc":"539","fix":"540"},{"desc":"541","fix":"542"},{"desc":"543","fix":"544"},{"desc":"545","fix":"546"},{"desc":"547","fix":"548"},{"desc":"549","fix":"550"},{"desc":"551","fix":"552"},{"desc":"553","fix":"554"},{"desc":"555","fix":"556"},{"desc":"557","fix":"558"},{"desc":"559","fix":"560"},{"desc":"561","fix":"562"},{"desc":"541","fix":"563"},{"desc":"564","fix":"565"},{"desc":"566","fix":"567"},{"desc":"559","fix":"568"},{"desc":"569","fix":"570"},{"desc":"571","fix":"572"},{"desc":"573","fix":"574"},{"desc":"535","fix":"575"},"Update the dependencies array to be: [inicializadorStadoPrueba]",{"range":"576","text":"577"},"Update the dependencies array to be: [dispatch, history, selection]",{"range":"578","text":"579"},"Update the dependencies array to be: [dispatch, state.currentCompany]",{"range":"580","text":"581"},"Update the dependencies array to be: [modalOpen, state.userCash]",{"range":"582","text":"583"},"Update the dependencies array to be: [addToGeneratedSeries, dispatch, generateSerieFromBegining, state.userActivity]",{"range":"584","text":"585"},"Update the dependencies array to be: [state.userActivity, state.setPruebaReady, state.stockLibrary, state.currentPossesions.stocks, getAllTickers]",{"range":"586","text":"587"},"Update the dependencies array to be: [state.stockLibrary.size, state.setPruebaReady, getMissingTicker]",{"range":"588","text":"589"},"Update the dependencies array to be: [dispatch, prepareData, tickers]",{"range":"590","text":"591"},"Update the dependencies array to be: [dispatch, missingTicker, updateData]",{"range":"592","text":"593"},"Update the dependencies array to be: [state.generatedSeries, state.areHistoricPricesReady, state.areGeneratedSeriesReady, generateSerie, dispatch, updateSerie]",{"range":"594","text":"595"},"Update the dependencies array to be: [dispatch, state.userActivity]",{"range":"596","text":"597"},"Update the dependencies array to be: [state.areHistoricPricesReady, state.currentPossesions]",{"range":"598","text":"599"},"Update the dependencies array to be: [datos, prepareData]",{"range":"600","text":"601"},"Update the dependencies array to be: [datos, dispatch, field, isInState, options.explicitUrl, state, ticker, url]",{"range":"602","text":"603"},"Update the dependencies array to be: [field, state, ticker]",{"range":"604","text":"605"},"Update the dependencies array to be: [recursivadorStyle, sliderDay]",{"range":"606","text":"607"},"Update the dependencies array to be: [setMode, value]",{"range":"608","text":"609"},"Update the dependencies array to be: [month, day, setDate]",{"range":"610","text":"611"},"Update the dependencies array to be: [datos, dispatch, field, isInState, options.explicitUrl, state.indexes, ticker, url]",{"range":"612","text":"613"},"Update the dependencies array to be: [field, state, state.indexes, ticker]",{"range":"614","text":"615"},"Update the dependencies array to be: [state.portfolioHistoryByCompany, ticker]",{"range":"616","text":"617"},"Update the dependencies array to be: [state, ticker]",{"range":"618","text":"619"},"Update the dependencies array to be: [data, dispatch, state.keymetrics, ticker]",{"range":"620","text":"621"},{"range":"622","text":"601"},"Update the dependencies array to be: [location, params, tickar]",{"range":"623","text":"624"},"Update the dependencies array to be: [dispatch, tickar, ticker]",{"range":"625","text":"626"},{"range":"627","text":"619"},"Update the dependencies array to be: [state.userActivity, state.portfolioHistory, generateSerieFromBegining, dispatch]",{"range":"628","text":"629"},"Update the dependencies array to be: [chartSelected, datos.symbol]",{"range":"630","text":"631"},"Update the dependencies array to be: [dispatch, fromOwnServer, isInState, topic, url]",{"range":"632","text":"633"},{"range":"634","text":"595"},[2473,2475],"[inicializadorStadoPrueba]",[3405,3416],"[dispatch, history, selection]",[3646,3668],"[dispatch, state.currentCompany]",[4086,4102],"[modalOpen, state.userCash]",[25599,25619],"[addToGeneratedSeries, dispatch, generateSerieFromBegining, state.userActivity]",[8309,8371],"[state.userActivity, state.setPruebaReady, state.stockLibrary, state.currentPossesions.stocks, getAllTickers]",[8651,8698],"[state.stockLibrary.size, state.setPruebaReady, getMissingTicker]",[9405,9414],"[dispatch, prepareData, tickers]",[9994,10009],"[dispatch, missingTicker, updateData]",[7365,7449],"[state.generatedSeries, state.areHistoricPricesReady, state.areGeneratedSeriesReady, generateSerie, dispatch, updateSerie]",[1228,1248],"[dispatch, state.userActivity]",[723,753],"[state.areHistoricPricesReady, state.currentPossesions]",[1240,1247],"[datos, prepareData]",[1401,1409],"[datos, dispatch, field, isInState, options.explicitUrl, state, ticker, url]",[1855,1862],"[field, state, ticker]",[1989,2000],"[recursivadorStyle, sliderDay]",[2092,2099],"[setMode, value]",[2467,2479],"[month, day, setDate]",[1422,1429],"[datos, dispatch, field, isInState, options.explicitUrl, state.indexes, ticker, url]",[1938,1953],"[field, state, state.indexes, ticker]",[1044,1046],"[state.portfolioHistoryByCompany, ticker]",[1466,1473],"[state, ticker]",[1655,1661],"[data, dispatch, state.keymetrics, ticker]",[778,785],[871,873],"[location, params, tickar]",[1070,1078],"[dispatch, tickar, ticker]",[490,497],[20445,20489],"[state.userActivity, state.portfolioHistory, generateSerieFromBegining, dispatch]",[617,632],"[chartSelected, datos.symbol]",[1878,1880],"[dispatch, fromOwnServer, isInState, topic, url]",[9468,9552]]